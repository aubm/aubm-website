<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Aubm</title>
    <link>https://www.aubm.net/tags/golang/</link>
    <description>Recent content in Golang on Aubm</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 10 Aug 2022 18:10:01 -0400</lastBuildDate>
    
	<atom:link href="https://www.aubm.net/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Please Use Dependency Injection, If Not For Me, Do It For Your Unit Tests</title>
      <link>https://www.aubm.net/posts/please-use-dependency-injection-if-not-for-me-do-it-for-your-unit-tests/</link>
      <pubDate>Wed, 10 Aug 2022 18:10:01 -0400</pubDate>
      
      <guid>https://www.aubm.net/posts/please-use-dependency-injection-if-not-for-me-do-it-for-your-unit-tests/</guid>
      <description>TLDR; see title.
Long time no see, and it&amp;rsquo;s been a while since we haven&amp;rsquo;t talked about Go. I still love the language, I still use it on a daily basis, and today I feel like talking a bit about dependency injection. So hold on to your seats because it&amp;rsquo;s going to get boring very soon, or not we&amp;rsquo;ll see.
What&amp;rsquo;s the problem? Take the following file. It has a Fetch function that takes base currency and a target currency, and it fetches the exchange rate between the two currencies by contacting an API that has that information in JSON format.</description>
    </item>
    
    <item>
      <title>3 ways of shooting yourself in the foot when writing applications in Go</title>
      <link>https://www.aubm.net/posts/3-ways-of-shooting-yourself-in-the-foot-when-writing-applications-in-go/</link>
      <pubDate>Sun, 21 Jun 2020 09:40:36 +0100</pubDate>
      
      <guid>https://www.aubm.net/posts/3-ways-of-shooting-yourself-in-the-foot-when-writing-applications-in-go/</guid>
      <description>I&amp;rsquo;ve been using Go for a few years now and today I want to share some experience. This post is about a few funny and somewhat not obvious bad Go patterns. This is 3 ways of shooting yourself in the foot when writing applications in Go.
Channels overflow Among many other things, Go is great for its concurrent programming model. Goroutines, channels and packages from the standard library like sync offer a great experience when it comes to solving problems with concurrency.</description>
    </item>
    
    <item>
      <title>Extending the Kubernetes API</title>
      <link>https://www.aubm.net/posts/extending-the-kubernetes-api/</link>
      <pubDate>Sat, 09 May 2020 18:00:07 +0200</pubDate>
      
      <guid>https://www.aubm.net/posts/extending-the-kubernetes-api/</guid>
      <description>Kubernetes offers various ways to add custom functionalities and to modify the way built-in features work. Today I want to talk about extending Kubernetes by using custom resources and controllers. Let&amp;rsquo;s take a close look at how to do that, but first a quick story!
Why extending Kubernetes As I mentioned in my previous post, my journey on the cloud began with Google App Engine. As a developer, I was pretty happy with the path to production of the service.</description>
    </item>
    
  </channel>
</rss>