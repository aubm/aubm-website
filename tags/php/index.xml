<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Aubm</title>
    <link>http://www.aubm.net/tags/php/index.xml</link>
    <description>Recent content in Php on Aubm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <atom:link href="http://www.aubm.net/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Contrainte d&#39;unicité dans Symfony 2 avec Doctrine</title>
      <link>http://www.aubm.net/blog/contrainte-dunicite-dans-symfony-2-avec-doctrine/</link>
      <pubDate>Sun, 22 Mar 2015 15:55:31 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/contrainte-dunicite-dans-symfony-2-avec-doctrine/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Le &lt;a href=&#34;http://symfony.com/doc/current/book/validation.html&#34; target=&#34;_blank&#34;&gt;composant de validation de Symfony&lt;/a&gt; embarque des contraintes pré-définies (outre la possibilité de créer des contraintes personnalisées évidemment). Par ailleurs, l&amp;rsquo;intégration de Doctrine dans le framework full-stack fournit une autre contrainte prête à l&amp;rsquo;emploi : &lt;code&gt;UniqueEntity&lt;/code&gt;, qui permet de valider l&amp;rsquo;unicité dans une table de la base de données d&amp;rsquo;un ou plusieurs champs d&amp;rsquo;une entité.&lt;/p&gt;

&lt;p&gt;Cette contrainte est référencée dans la &lt;a href=&#34;http://symfony.com/doc/current/reference/constraints/UniqueEntity.html&#34; target=&#34;_blank&#34;&gt;documentation officielle de Symfony&lt;/a&gt;. Cet article se propose d&amp;rsquo;apporter quelques exemples et explications en complément de cette documentation. J&amp;rsquo;ajoute qu&amp;rsquo;à l&amp;rsquo;heure où j&amp;rsquo;écris, la version en français de la documentation ne semble pas être à jour. Elle est en effet incomplète en comparaison avec la version anglaise qui recense un plus grand nombre d&amp;rsquo;options.&lt;/p&gt;

&lt;h2 id=&#34;contexte&#34;&gt;Contexte&lt;/h2&gt;

&lt;p&gt;Les extraits de code de cet article sont issus de l&amp;rsquo;application exemple &lt;a href=&#34;https://github.com/aubm/Doctrine-Unique-Entity-Example-App&#34; target=&#34;_blank&#34;&gt;dont le code est disponible sur Github&lt;/a&gt;. Il s&amp;rsquo;agit d&amp;rsquo;une application réalisée à l&amp;rsquo;aide de Symfony 2.6 Standard Edition. La procédure à suivre pour installer l&amp;rsquo;application en local (si jamais vous souhaitez tester) est la suivante :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installer les pré-requis nécessaires : Git, PHP &amp;gt; 5.3, Composer, MySQL (ou un autre système de base de données compatible).&lt;/li&gt;
&lt;li&gt;Cloner le repo &lt;code&gt;git clone https://github.com/aubm/Doctrine-Unique-Entity-Example-App.git&lt;/code&gt; et se déplacer dans le répertoire du projet &lt;code&gt;cd Doctrine-Unique-Entity-Example-App/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Installer les dépendances avec Composer &lt;code&gt;composer install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modifier au besoin le nom et les paramètres de connexion à la base de données dans &lt;code&gt;app/config/parameters.yml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Créer la base de données, vous pouvez le faire avec l&amp;rsquo;outil cli &lt;code&gt;php app/console doctrine:database:create&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Générer le schéma &lt;code&gt;php app/console doctrine:schema:update --dump-sql --force&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Servir l&amp;rsquo;app &lt;code&gt;php app/console server:run&lt;/code&gt; (CTLR + C pour arrêter).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cette application est un système fictif de votes. Il est possible de lui adresser une requête HTTP qui ajoutera une entrée dans la table des votes. Un vote peut être positif ou négatif, cet état est représenté par la colonne &lt;code&gt;positive&lt;/code&gt; supposée recevoir une valeur &lt;code&gt;1&lt;/code&gt; ou &lt;code&gt;0&lt;/code&gt;. Afin d&amp;rsquo;illustrer l&amp;rsquo;utilisation de la contrainte &lt;code&gt;UniqueEntity&lt;/code&gt;, nous souhaitons ajouter une règle d&amp;rsquo;unicité sur l&amp;rsquo;IP entrante, afin de ne permettre à un client de n&amp;rsquo;enregistrer qu&amp;rsquo;un seul vote.&lt;/p&gt;

&lt;p&gt;Si vous avez installé l&amp;rsquo;application, vous pouvez lui adresser cette requête :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /votes
positive=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A défaut d&amp;rsquo;autre chose, &lt;a href=&#34;https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt; est un outil très pratique pour construire des requêtes HTTP et les envoyer via une interface web.&lt;/p&gt;

&lt;h2 id=&#34;utiliser-la-contrainte-uniqueentity&#34;&gt;Utiliser la contrainte UniqueEntity&lt;/h2&gt;

&lt;p&gt;Ce code est extrait du contrôleur responsable de l&amp;rsquo;enregistrement des votes :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function createAction(Request $request)
{
    $votes_manager = $this-&amp;gt;container-&amp;gt;get(&#39;ab.voting_system.votes_manager&#39;);
    $vote = $votes_manager-&amp;gt;newEntity([
            &#39;remote_addr&#39; =&amp;gt; $request-&amp;gt;server-&amp;gt;get(&#39;REMOTE_ADDR&#39;)
        ] + $request-&amp;gt;request-&amp;gt;all());
    $validation_errors = $votes_manager-&amp;gt;validateEntity($vote);
    if (count($validation_errors) == 0) {
        $votes_manager-&amp;gt;saveEntity($vote);
        return new JsonResponse(null, 201);
    } else {
        return new JsonResponse(null, 400);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;entité &lt;code&gt;Vote&lt;/code&gt; est une simple classe contenant les attributs suivants :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Vote
{
    private $id;
    private $positive;
    private $remote_addr;

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le mapping des attributs pour Doctrine est défini dans &lt;a href=&#34;https://github.com/aubm/Doctrine-Unique-Entity-Example-App/blob/master/src/AB/VotingSystemBundle/Resources/config/doctrine/Vote.orm.yml&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;src/AB/VotingSystemBundle/Resources/config/doctrine/Vote.orm.yml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il est possible de réduire légèrement le contrôleur en passant par une classe de formulaire. Pour cette exemple, j&amp;rsquo;ai fait le choix de valider manuellement l&amp;rsquo;entité afin de faciliter la compréhension du code (notamment pour des lecteurs moins familiers avec le framework).
L&amp;rsquo;ajout de la contrainte d&amp;rsquo;unicité sur &lt;code&gt;remote_addr&lt;/code&gt; peut être fait en yaml comme ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# src/AB/VotingSystem/Resources/config/validation.yml
AB\VotingSystemBundle\Entity\Vote:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
            fields: remote_addr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A ce niveau le contrôleur n&amp;rsquo;autorisera pas l&amp;rsquo;enregistrement d&amp;rsquo;une nouvelle ligne si la valeur contenue dans &lt;code&gt;remote_addr&lt;/code&gt; existe déjà dans la table. A noter que si notre application est servie derrière un proxy, il se peut qu&amp;rsquo;elle ne se comporte pas comme nous le souhaitons. Auquel cas il serait judicieux d&amp;rsquo;enregistrer également la valeur de l&amp;rsquo;en-tête &lt;code&gt;HTTP_X_FORWARDED_FOR&lt;/code&gt; afin de s&amp;rsquo;assurer de l&amp;rsquo;unicité de la paire &lt;code&gt;remote_addr&lt;/code&gt; + &lt;code&gt;http_x_forwarded_for&lt;/code&gt; dans la table.&lt;/p&gt;

&lt;p&gt;Commençons par mettre à jour l&amp;rsquo;entité &lt;code&gt;Vote&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Vote
{
    ...
    private $http_x_forwarded_for;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis le fichier de configuration des contraintes de validation :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# src/AB/VotingSystem/Resources/config/validation.yml
AB\VotingSystemBundle\Entity\Vote:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
            fields: [remote_addr, http_x_forwarded_for]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fields&lt;/code&gt; prend maintenant un tableau de champs à vérifier. Il faut préciser que Symfony s&amp;rsquo;assurera de l&amp;rsquo;unicité &lt;em&gt;du groupe de champs&lt;/em&gt; et non des deux champs de manière isolée.&lt;/p&gt;

&lt;h2 id=&#34;contrainte-uniqueentity-et-champ-nullable&#34;&gt;Contrainte UniqueEntity et champ nullable&lt;/h2&gt;

&lt;p&gt;Un comportement par défaut de la contrainte &lt;code&gt;UniqueEntity&lt;/code&gt; dont il faut être conscient est que celle-ci n&amp;rsquo;enregistrera aucune erreur si un ou plusieurs champs ont une valeur nulle (autrement dit, la contrainte sera ignorée). Dans l&amp;rsquo;état, il est donc possible dans la table en base de données d&amp;rsquo;avoir ces valeurs enregistrées :&lt;/p&gt;

&lt;table class=&#34;table table-condensed&#34;&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;positive&lt;/th&gt;
        &lt;th&gt;remote_addr&lt;/th&gt;
        &lt;th&gt;http_x_forwarded_for&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;0&lt;/td&gt;
        &lt;td&gt;80.13.81.94&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td class=&#34;text-danger&#34;&gt;213.80.109.42&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td class=&#34;text-danger&#34;&gt;213.80.109.42&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td class=&#34;text-danger&#34;&gt;213.80.109.42&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Dans le cas de cette application, ce comportement n&amp;rsquo;est pas celui attendu. Il est donc nécessaire de définir une autre valeur pour l&amp;rsquo;option &lt;code&gt;ignoreNull&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# src/AB/VotingSystem/Resources/config/validation.yml
AB\VotingSystemBundle\Entity\Vote:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
            fields: [remote_addr, http_x_forwarded_for]
            ignoreNull: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette fois tout devrait être bon :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mes premiers pas avec CakePHP 3</title>
      <link>http://www.aubm.net/blog/mes-premiers-pas-avec-cakephp-3/</link>
      <pubDate>Fri, 13 Mar 2015 16:22:40 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/mes-premiers-pas-avec-cakephp-3/</guid>
      <description>

&lt;h2 id=&#34;avant-propos&#34;&gt;Avant propos&lt;/h2&gt;

&lt;p&gt;Profitant d&amp;rsquo;un peu de temps libre j&amp;rsquo;ai décidé de m&amp;rsquo;essayer à la dernière version en date de CakePHP, à savoir CakePHP 3. Je suis donc parti dans l&amp;rsquo;idée de pondre un Twitter-like en version allégée (très allégée).&lt;/p&gt;

&lt;p&gt;Après avoir posé le contexte en présentant mon Twitter fait maison, je développerai cet article en apportant des précisions sur le code et les différentes fonctionnalités de CakePHP 3 que j&amp;rsquo;ai utilisées pour construire le site. A noter que l&amp;rsquo;objectif premier est de se concentrer sur les spécificités de CakePHP 3. Je suggère - afin de tirer meilleur parti de cette lecture - de bénéficier en amont d&amp;rsquo;une certaine expérience autour d&amp;rsquo;outils comme Composer, d&amp;rsquo;être à l&amp;rsquo;aise avec le modèle MVC, ou encore de savoir ce qu&amp;rsquo;est un ORM.&lt;/p&gt;

&lt;p&gt;Au départ, mes objectifs étaient de comprendre comment un projet CakePHP 3 est structuré et de découvrir les fonctionnalités offertes par le framework. C&amp;rsquo;est dans cet esprit que je vais écrire, tâchant de rester dans une simple description. Le but n&amp;rsquo;est donc pas de comparer CakePHP 3 à d&amp;rsquo;autres frameworks, ni de répondre directement à des questions comme &amp;ldquo;Cake est-il adapté pour tel type d&amp;rsquo;application ?&amp;rdquo;. D&amp;rsquo;autant que la forme ne s&amp;rsquo;y prête pas dans la mesure où un projet comme celui-ci ne permet pas de couvrir tous ses aspects.&lt;/p&gt;

&lt;p&gt;Cet article est un bilan sur les quelques journées que j&amp;rsquo;ai passées à jongler entre mon IDE et la documentation officielle de CakePHP 3. Je l&amp;rsquo;écris avant tout pour moi, afin qu&amp;rsquo;il puisse éventuellement me servir de point de départ si j&amp;rsquo;ai un jour besoin de travailler avec ce framework. Ceci étant dit, comme il semble qu&amp;rsquo;il n&amp;rsquo;existe encore (du moins à l&amp;rsquo;heure où j&amp;rsquo;écris) que relativement peu de ressources sur le sujet (en dehors de la documentation officielle et en français du moins), je serais content d&amp;rsquo;apprendre qu&amp;rsquo;il a pu servir à d&amp;rsquo;autres développeurs.&lt;/p&gt;

&lt;h2 id=&#34;contexte&#34;&gt;Contexte&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;application que j&amp;rsquo;ai réalisée s&amp;rsquo;inspire ouvertement du fonctionnement de Twitter. Voilà le contenu de ma check-list en début de projet :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Les utilisateurs enregistrés peuvent poster des messages (des tweets) de moins de 140 caractères&lt;/li&gt;
&lt;li&gt;Tous les tweets apparaissent en page d&amp;rsquo;accueil dans l&amp;rsquo;ordre du plus récent au plus ancien&lt;/li&gt;
&lt;li&gt;La page d&amp;rsquo;un utilisateur affiche les détails de son profil et la liste de ses tweets&lt;/li&gt;
&lt;li&gt;Possibilité d&amp;rsquo;ajouter des #hashtags dans les tweets, cliquer sur un hashtag affiche la liste de tous les tweets qui le mentionnent&lt;/li&gt;
&lt;li&gt;Pas de pagination pour les tweets, charger les tweets suivants au défilement de la page&lt;/li&gt;
&lt;li&gt;Les utilisateurs peuvent modifier les détails de leur profil et télécharger une image pour personnaliser leur avatar&lt;/li&gt;
&lt;li&gt;Afficher un bloc listant les hashtags les plus populaires&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;N&amp;rsquo;ayant pas souhaité déployer sur un serveur, j&amp;rsquo;ai pris la peine de réaliser cette vidéo de présentation au cas où vous souhaiteriez voir l&amp;rsquo;application tourner.&lt;/p&gt;

&lt;div class=&#34;video-wrapper&#34;&gt;
&lt;iframe width=&#34;1280&#34; height=&#34;750&#34; src=&#34;https://www.youtube.com/embed/_-UvsRoXZeM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Les sources sont disponibles sur &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;. Je suggère de conserver l&amp;rsquo;onglet Github ouvert pendant la lecture afin de pouvoir facilement faire des parallèles entre les notions abordées et le code de l&amp;rsquo;application.&lt;/p&gt;

&lt;p&gt;Le fichier &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3/blob/master/database.sql&#34; target=&#34;_blank&#34;&gt;database.sql&lt;/a&gt; contient les requêtes à exécuter pour ajouter les tables dans une base de données MySQL.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&#34;http://www.aubm.net/img/twitthome_schema.png&#34; alt=&#34;Schéma base de données Twitthome&#34;  class=&#34;img-responsive&#34;/&gt;
&lt;figcaption&gt;Une représentation graphique du schéma de la base de données.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;généralités-et-organisation-du-code&#34;&gt;Généralités et organisation du code&lt;/h2&gt;

&lt;p&gt;A supposer que vous souhaitiez démarrer un projet CakePHP 3, la seule chose à faire après avoir installé les pré-requis nécessaires (PHP 5.3 et Composer) est de lancer cette commande :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer create-project --prefer-dist -s dev cakephp/app my_app_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Composer téléchargera CakePHP 3 et ses dépendances dans un nouveau dossier &lt;code&gt;my_app_name&lt;/code&gt;. Le script d&amp;rsquo;installation est lancé automatiquement et propose de configurer les droits des répertoires pour vous. Vous pourrez alors commencer à travailler sur le site en utilisant le serveur HTTP embarqué :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comme pour beaucoup de frameworks web, CakePHP 3 propose une implémentation du pattern composite MVC pour la gestion du cycle de vie des requêtes HTTP. Le code de l&amp;rsquo;application va donc être segmenté en trois couches, chacune pouvant tirer parti d&amp;rsquo;un certain nombre d&amp;rsquo;éléments : composants, comportements, helpers, etc &amp;hellip; Il s&amp;rsquo;agit là de termes propres à CakePHP que je développerai plus tard.&lt;/p&gt;

&lt;p&gt;Le fichier d&amp;rsquo;entrée de l&amp;rsquo;application est  &lt;code&gt;/webroot/index.php&lt;/code&gt;. Son rôle est de déclencher le processus de démarrage de l&amp;rsquo;application, puis d&amp;rsquo;instancier le &lt;strong&gt;dispatcher&lt;/strong&gt; qui se chargera de déléguer la requête au bon contrôleur. &lt;code&gt;/webroot/&lt;/code&gt; est le répertoire auquel doit être configuré le &lt;strong&gt;document root&lt;/strong&gt;.&lt;code&gt;index.php&lt;/code&gt; devrait y être le seul fichier PHP aux côtés d&amp;rsquo;autres ressources web comme des images, des fichiers CSS ou Javascript.&lt;/p&gt;

&lt;p&gt;Si vous avez besoin d&amp;rsquo;intervenir sur des étapes du démarrage de l&amp;rsquo;application, vous aurez alors besoin d&amp;rsquo;éditer un peu de code dans &lt;code&gt;/config/&lt;/code&gt;. Dans &lt;code&gt;/config/app.php&lt;/code&gt; sont notamment définis les paramètres de connexion à la base de données, le niveau de debug ou encore la gestion des sessions. Les routes sont définies programmatiquement dans &lt;code&gt;/config/routes.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pour le reste, le répertoire &lt;code&gt;/src/&lt;/code&gt; se chargera d&amp;rsquo;héberger les sources de l&amp;rsquo;application. Les contrôleurs, les modèles ou encore les templates sont situés dans des sous-répertoires de &lt;code&gt;/src/&lt;/code&gt;. Cette même structure est reprise au travers &lt;a href=&#34;http://book.cakephp.org/3.0/fr/plugins.html&#34; target=&#34;_blank&#34;&gt;des plugins&lt;/a&gt;. Pratique pour packager une application dans le but de la réutiliser dans une autre (conceptuellement proche des bundles de Symfony 2).&lt;/p&gt;

&lt;h2 id=&#34;les-routes&#34;&gt;Les routes&lt;/h2&gt;

&lt;h3 id=&#34;déclarer-des-routes&#34;&gt;Déclarer des routes&lt;/h3&gt;

&lt;p&gt;Les routes sont définies dans &lt;code&gt;/config/routes.php&lt;/code&gt; à l&amp;rsquo;intérieur de &lt;strong&gt;scopes&lt;/strong&gt;. Un scope permet - entre autres - de factoriser plusieurs routes afin de leur attribuer un préfix.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Router::scope(&#39;/api/&#39;, function ($routes) {
    $routes-&amp;gt;connect(&#39;/tweets&#39;, [
        &#39;controller&#39; =&amp;gt; &#39;Tweets&#39;,
        &#39;action&#39; =&amp;gt; &#39;index&#39;
    ], [
        &#39;_name&#39; =&amp;gt; &#39;tweets_index&#39;
    ]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le code ci-dessus connecte la route &lt;code&gt;/api/tweets&lt;/code&gt; au dispatcher. Le dispatcher se chargera de passer la requête à la méthode &lt;code&gt;TweetsController::index()&lt;/code&gt;. Le tableau d&amp;rsquo;options en troisième paramètre de la méthode &lt;code&gt;connect()&lt;/code&gt; est facultatif. Définir l&amp;rsquo;option &lt;code&gt;_name&lt;/code&gt; permet de générer les urls plus facilement depuis les templates (vu plus tard).&lt;/p&gt;

&lt;h3 id=&#34;déclarer-des-ressources-restful&#34;&gt;Déclarer des ressources restful&lt;/h3&gt;

&lt;p&gt;Supposons maintenant qu&amp;rsquo;il s&amp;rsquo;agisse de mettre en place une API restful. CakePHP 3 offre la possibilité de s&amp;rsquo;affranchir de portions de code répétitives en tirant parti de quelques conventions sur lesquelles reposent des comportements par défaut du framework. Cette philosophie - sans doute héritée de Ruby on Rails - est omniprésente. Qu&amp;rsquo;il s&amp;rsquo;agisse de travailler avec les routes ou encore avec l&amp;rsquo;ORM, elle peut faire gagner un temps précieux.&lt;/p&gt;

&lt;p&gt;Pour l&amp;rsquo;exemple, jetons un oeil sur ce tableau :&lt;/p&gt;

&lt;table class=&#34;table table-condensed&#34;&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt; &lt;td&gt;/api/tweets.:format&lt;/td&gt; &lt;td&gt;TweetsController::index()&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt; &lt;td&gt;/api/tweets/:tweet_id.:format&lt;/td&gt; &lt;td&gt;TweetsController::view($tweet_id)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;POST&lt;/td&gt; &lt;td&gt;/api/tweets.:format&lt;/td&gt; &lt;td&gt;TweetsController::add()&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PUT&lt;/td&gt; &lt;td&gt;/api/tweets/:tweet_id.:format&lt;/td&gt; &lt;td&gt;TweetsController::edit($tweet_id)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PATCH&lt;/td&gt; &lt;td&gt;/api/tweets/:tweet_id.:format&lt;/td&gt; &lt;td&gt;TweetsController::edit($tweet_id)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DELETE&lt;/td&gt; &lt;td&gt;/api/tweets/:tweet_id.:format&lt;/td&gt; &lt;td&gt;TweetsController::delete($tweet_id)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Ces routes peuvent être configurées automatiquement avec ce seul extrait de code :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Router::scope(&#39;/api/&#39;, function ($routes) {
    $routes-&amp;gt;extensions([&#39;xml&#39;, &#39;json&#39;]);
    $routes-&amp;gt;resources(&#39;tweets&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-routes-auto-déclarées&#34;&gt;Les routes auto-déclarées&lt;/h3&gt;

&lt;p&gt;Une chose à savoir à propos de CakePHP 3 est qu&amp;rsquo;il connecte automatiquement une route au dispatcher pour chaque nouvelle action de contrôleur. Le nom de ces routes est défini en fonction du nom du contrôleur et de la méthode.
Si bien que le code si dessous :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class TweetsController
{
    function index()
    {
        ...
    }

    function add()
    {
        ...
    }

    function load()
    {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connectera automatiquement les routes &lt;code&gt;/tweets&lt;/code&gt;, &lt;code&gt;/tweets/add&lt;/code&gt; et &lt;code&gt;/tweets/load&lt;/code&gt;. Ce comportement est induit par cette instruction du fichier &lt;code&gt;/config/routes.php&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$routes-&amp;gt;fallbacks(&#39;InflectedRoute&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Naturellement, supprimer cette instruction supprimera ce comportement.&lt;/p&gt;

&lt;h2 id=&#34;la-couche-controller&#34;&gt;La couche Controller&lt;/h2&gt;

&lt;h3 id=&#34;les-classes-de-contrôleur&#34;&gt;Les classes de contrôleur&lt;/h3&gt;

&lt;p&gt;Les classes de contrôleur sont situées dans &lt;code&gt;/src/Controller/&lt;/code&gt;. Elles doivent étendre la classe &lt;code&gt;\Cake\Controller\Controller&lt;/code&gt; et leur nom doit - par convention - se terminer par le suffixe &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;application Twitthome utilise quatre classes de contrôleur : &lt;code&gt;TweetsController&lt;/code&gt;, &lt;code&gt;HashtagsController&lt;/code&gt;, &lt;code&gt;UsersController&lt;/code&gt; et &lt;code&gt;AccountParametersController&lt;/code&gt;. Comme suggéré dans la documentation officielle, ces classes étendent &lt;code&gt;AppController&lt;/code&gt;. Cette pratique est un moyen simple de définir des comportements globaux pour l&amp;rsquo;application, comme par exemple des règles liées à l&amp;rsquo;authentification.
L&amp;rsquo;instruction ci-dessous extraite de la classe &lt;code&gt;AppController&lt;/code&gt; autorise les accès non-authentifiés aux actions (i.e. aux méthodes) &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt; et &lt;code&gt;display&lt;/code&gt; pour tous les contrôleurs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$this-&amp;gt;Auth-&amp;gt;allow([&#39;index&#39;, &#39;view&#39;, &#39;display&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le router mis à part, le contrôleur est le point d&amp;rsquo;entrée de l&amp;rsquo;application. Depuis le contrôleur, CakePHP 3 permet de manipuler la requête et la réponse HTTP au moyen des attributs &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.Network.Request.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; et &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.Network.Response.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;. Les paramètres des routes sont quant à eux injectés en tant que paramètres des méthodes (des actions).&lt;/p&gt;

&lt;p&gt;Le contrôleur délègue la génération du contenu de la réponse à une vue. La méthode &lt;code&gt;\Cake\Controller\Controller::render()&lt;/code&gt; est automatiquement appelée et se charge d&amp;rsquo;invoquer le template correspondant à l&amp;rsquo;action (vu plus tard). Le contrôleur peut passer des données au template au moyen de &lt;code&gt;\Cake\View\ViewVarsTrait::set()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$this-&amp;gt;set([
    &#39;tweets&#39; =&amp;gt; $tweets,
    &#39;hashtag_name&#39; =&amp;gt; $name
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-composants-components&#34;&gt;Les composants (components)&lt;/h3&gt;

&lt;p&gt;Les composants sont des objets qui peuvent être invoqués par un contrôleur dans le but de remplir une tâche spécifique. Le core de CakePHP 3 embarque des composants pour l&amp;rsquo;authentification, la manipulation des cookies ou encore l&amp;rsquo;utilisation de messages flash.&lt;/p&gt;

&lt;p&gt;Charger des composants dans un contrôleur peut se faire à l&amp;rsquo;intérieur du hook &lt;code&gt;initialize()&lt;/code&gt; du contrôleur.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function initialize()
{
    $this-&amp;gt;loadComponent(&#39;Flash&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une fois fait, le composant est accessible en tant que variable d&amp;rsquo;instance du contrôleur :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersController extends Controller
{
    public function add()
    {
        ...
        $this-&amp;gt;Flash-&amp;gt;success(__(&#39;Your account has been created.&#39;));
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Créer ses propres composants est une solution simple et ludique permettant d&amp;rsquo;isoler de la logique dans des classes utilisables à l&amp;rsquo;intérieur d&amp;rsquo;un ou plusieurs contrôleurs. &amp;ldquo;Où placer la logique ?&amp;rdquo; est une des premières questions que je me suis posées. Un cas pratique d&amp;rsquo;utilisation était la possibilité de télécharger une photo de profil pour les utilisateurs. Le téléchargement d&amp;rsquo;une image représente une portion de code susceptible de vouloir être ré-utilisée à différents emplacements de l&amp;rsquo;application.
Comme CakePHP 3 ne semble pas embarquer de composant d&amp;rsquo;injection de dépendances qui permettrait de travailler avec des classes de service (à l&amp;rsquo;instar de Symfony 2 par exemple) et qu&amp;rsquo;avoir recours à l&amp;rsquo;héritage n&amp;rsquo;est pas toujours approprié, je me suis lancé de la construction de &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3/blob/master/src/Controller/Component/ImageUploadComponent.php&#34; target=&#34;_blank&#34;&gt;mon propre composant d&amp;rsquo;upload&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le composant est une classe résident dans &lt;code&gt;/src/Controller/Component/&lt;/code&gt; dont le nom doit se terminer par le suffixe &lt;code&gt;Component&lt;/code&gt;. Si la méthode &lt;code&gt;initialize()&lt;/code&gt; du composant attend des paramètres (comme c&amp;rsquo;est le cas pour mon &lt;code&gt;FileUploadComponent&lt;/code&gt; dont hérite &lt;code&gt;ImageUploadComponent&lt;/code&gt;) :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class FileUploadComponent extends Component
{
    public function initialize(array $config)
    {
        $this-&amp;gt;upload_dir = $this-&amp;gt;_getSystemPath($config[&#39;upload_dir&#39;]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les contrôleurs utilisant le composant fourniront ces paramètres lors du chargement de ce dernier. Exemple dans mon &lt;code&gt;AccountParametersController&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class AccountParametersController extends AppController
{
    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;loadComponent(&#39;ImageUpload&#39;, [
            &#39;upload_dir&#39; =&amp;gt; &#39;webroot/img/avatars&#39;
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;la-couche-model&#34;&gt;La couche Model&lt;/h2&gt;

&lt;h3 id=&#34;les-tables-repositories&#34;&gt;Les tables (repositories)&lt;/h3&gt;

&lt;h4 id=&#34;extraire-des-données&#34;&gt;Extraire des données&lt;/h4&gt;

&lt;p&gt;Utiliser l&amp;rsquo;ORM pour extraire les informations de la base de données est facile et ne requiert la création d&amp;rsquo;aucune classe personnalisée.
A l&amp;rsquo;intérieur de &lt;code&gt;TweetsController&lt;/code&gt;, l&amp;rsquo;instruction ci-dessous permet d&amp;rsquo;extraire l&amp;rsquo;ensemble des lignes de la table &lt;code&gt;tweets&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$tweets = $this-&amp;gt;Tweets-&amp;gt;find(&#39;all&#39;)-&amp;gt;toArray();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encore une fois, CakePHP 3 repose sur des conventions pour faire fonctionner cette instruction :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Par soucis de performance (je suppose), les données des tweets ne sont chargées automatiquement que dans le &lt;code&gt;TweetsController&lt;/code&gt;. Le chargement de ce modèle de données devra &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.Datasource.ModelAwareTrait.html#_loadModel&#34; target=&#34;_blank&#34;&gt;être fait manuellement&lt;/a&gt; s&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;un autre contrôleur.&lt;/li&gt;
&lt;li&gt;Le nom de la table dans la base de données doit correspondre au nom du contrôleur transformé en lower-case + underscores - soit pour cet exemple : &lt;code&gt;tweets&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CakePHP 3 matérialise l&amp;rsquo;interface entre l&amp;rsquo;application et une table de la base de données par la création d&amp;rsquo;un objet de type &lt;code&gt;\Cake\ORM\Table&lt;/code&gt;. Sorti des conventions listées plus haut,  pour créer des règles de validation ou encore pour exploiter des relations avec d&amp;rsquo;autres tables, vous aurez besoin de créer une classe spécialisée pour matérialiser cette interface.&lt;/p&gt;

&lt;p&gt;La classe &lt;code&gt;TweetsTable&lt;/code&gt; qui étend &lt;code&gt;\Cake\ORM\Table&lt;/code&gt; dans le fichier &lt;code&gt;/src/Model/Table/TweetsTable.php&lt;/code&gt; sert justement ce rôle. Le hook &lt;code&gt;initialize()&lt;/code&gt; est utilisé pour définir les relations avec les autres tables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function initialize(array $config)
{
    $this-&amp;gt;belongsTo(&#39;Users&#39;);
    $this-&amp;gt;belongsToMany(&#39;Hashtags&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La documentation officielle fournit les informations nécessaires pour &lt;a href=&#34;http://book.cakephp.org/3.0/fr/orm/associations.html&#34; target=&#34;_blank&#34;&gt;utiliser les relations entre les tables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il est intéressant de noter que cet appel : &lt;code&gt;$this-&amp;gt;Tweets-&amp;gt;find(&#39;all&#39;);&lt;/code&gt; va - de manière transparente - exécuter la méthode &lt;code&gt;\Cake\ORM\Table::findAll()&lt;/code&gt;. Il est donc possible de modifier le comportement de cette méthode en la redéfinissant à l&amp;rsquo;intérieur de &lt;code&gt;TweetsTable&lt;/code&gt;. Voici comment demander à l&amp;rsquo;ORM de charger les données des modèles associés, et de trier les résultats du plus récent au plus ancien :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function findAll(Query $query, array $options)
{
    $query-&amp;gt;contain([&#39;Users&#39;, &#39;Users.AccountParameters&#39;]);
    $query-&amp;gt;order([&#39;Tweets.created&#39; =&amp;gt; &#39;DESC&#39;]);
    return $query;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette technique permet de garder les classes de contrôleur DRY tout en continuant d&amp;rsquo;exploiter toute la puissance de l&amp;rsquo;ORM. De la même manière il est possible de définir d&amp;rsquo;autres &lt;strong&gt;finders&lt;/strong&gt;. Cette méthode est utilisée afin d&amp;rsquo;extraire les tweets pour un hashtag donné :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Dans la classe TweetsTable
public function findTagged(Query $query, array $options)
{
    $query-&amp;gt;contain([&#39;Users&#39;, &#39;Users.AccountParameters&#39;, &#39;Hashtags&#39;]);
    $query-&amp;gt;matching(&#39;Hashtags&#39;, function ($q) use ($options) {
        return $q-&amp;gt;where([&#39;Hashtags.name&#39; =&amp;gt; $options[&#39;tag_name&#39;]]);
    });
    $query-&amp;gt;order([&#39;Tweets.created&#39; =&amp;gt; &#39;DESC&#39;]);
    return $query;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Dans la classe HashtagsController
$this-&amp;gt;Tweets-&amp;gt;find(&#39;tagged&#39;, [
    &#39;tag_name&#39; =&amp;gt; $tag_name
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;insérer-de-nouvelles-lignes&#34;&gt;Insérer de nouvelles lignes&lt;/h4&gt;

&lt;p&gt;Insérer de nouvelles lignes dans la base de données ne pose pas de problème particulier.
Pour l&amp;rsquo;exemple, mon application requiert de pouvoir enregistrer de nouveaux utilisateurs. A chaque nouvel utilisateur, une nouvelle entrée dans la table &lt;code&gt;account_parameters&lt;/code&gt; doit également être ajoutée.
Le code ci-dessous permet d&amp;rsquo;accomplir cette tâche avec très peu de code :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersController extends AppController
{
    public function add()
    {
        ...
        $user = $this-&amp;gt;Users-&amp;gt;newEntity($user_data);
        $user-&amp;gt;set(&#39;account_parameter&#39;, $this-&amp;gt;AccountParameters-&amp;gt;newEntity());
        $this-&amp;gt;Users-&amp;gt;save($user);
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;valider-des-données&#34;&gt;Valider des données&lt;/h4&gt;

&lt;p&gt;CakePHP 3 propose une double approche pour permettre de valider les données d&amp;rsquo;une entité.
De lors que des données de requête sont converties en entité, CakePHP 3 effectue automatiquement une validation basée sur les règles configurées dans le hook &lt;code&gt;validationDefault()&lt;/code&gt;. Il est possible à ce niveau de s&amp;rsquo;assurer qu&amp;rsquo;une chaine de caractères respecte un format pré-défini ou encore de vérifier qu&amp;rsquo;un attribut reçoit bien une valeur en s&amp;rsquo;inspirant de ce code :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersTable extends Table
{
    public function validationDefault(Validator $validator)
    {
        return $validator
            -&amp;gt;notEmpty(&#39;username&#39;, __(&#39;Username must not be empty&#39;))
            -&amp;gt;notEmpty(&#39;password&#39;, __(&#39;Password must not be empty&#39;))
            -&amp;gt;notEmpty(&#39;email&#39;, __(&#39;E-mail must not be empty&#39;))
            -&amp;gt;add(&#39;email&#39;, &#39;validFormat&#39;, [
                &#39;rule&#39; =&amp;gt; &#39;email&#39;,
                &#39;message&#39; =&amp;gt; __(&#39;E-mail must be valid&#39;)
            ])
            -&amp;gt;notEmpty(&#39;first_name&#39;, __(&#39;First name must not be empty&#39;))
            -&amp;gt;notEmpty(&#39;last_name&#39;, __(&#39;Last name must not be empty&#39;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;D&amp;rsquo;autre part, lorsqu&amp;rsquo;une entité s&amp;rsquo;apprête à être persistée en base de données, CakePHP 3 s&amp;rsquo;assure que les données respectent les contraintes définies dans le hook &lt;code&gt;buildRules()&lt;/code&gt;. Il s&amp;rsquo;agit là de &lt;a href=&#34;http://book.cakephp.org/3.0/fr/orm/saving-data.html#appliquer-des-regles-pour-l-application&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;règles de domaine&lt;/strong&gt;&lt;/a&gt;, elles sont relatives à un besoin métier de l&amp;rsquo;application. Vous pourriez par exemple vous assurer que le statut de ce ticket l&amp;rsquo;autorise à recevoir un commentaire, ou bien que ce produit est toujours disponible avant de l&amp;rsquo;ajouter au panier. L&amp;rsquo;exemple ci-dessous est extrait de Twitthome et montre comment s&amp;rsquo;assurer de l&amp;rsquo;unicité des champs &lt;code&gt;username&lt;/code&gt; et &lt;code&gt;email&lt;/code&gt; de la table &lt;code&gt;users&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersTable extends Table
{
    public function buildRules(RulesChecker $rules)
    {
        $rules-&amp;gt;add($rules-&amp;gt;isUnique([&#39;username&#39;]));
        $rules-&amp;gt;add($rules-&amp;gt;isUnique([&#39;email&#39;]));
        return $rules;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-comportements-behaviors&#34;&gt;Les comportements (behaviors)&lt;/h3&gt;

&lt;p&gt;Tout comme les composants permettent de factoriser de la logique des contrôleurs, les comportements permettent de réutiliser de la logique de la couche Model. La &lt;a href=&#34;http://book.cakephp.org/3.0/fr/orm/behaviors.html&#34; target=&#34;_blank&#34;&gt;documentation officielle de CakePHP 3&lt;/a&gt; les présente comme étant &amp;ldquo;conceptuellement similaires aux traits&amp;rdquo;. Bien que n&amp;rsquo;ayant pas eu besoin de créer mes propres comportements, j&amp;rsquo;ai pu tirer parti de l&amp;rsquo;utilisation du &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.ORM.Behavior.TimestampBehavior.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;TimestampBehavior&lt;/code&gt;&lt;/a&gt; (défini dans le core du framework) pour mettre à jour automatiquement les champs &lt;code&gt;created&lt;/code&gt; et &lt;code&gt;modified&lt;/code&gt; des tables &lt;code&gt;tweets&lt;/code&gt; et &lt;code&gt;users&lt;/code&gt;. Voici comment utiliser un comportement dans une table :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersTable extends Table
{
    public function initialize(array $config)
    {
        $this-&amp;gt;addBehavior(&#39;Timestamp&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-entités&#34;&gt;Les entités&lt;/h3&gt;

&lt;p&gt;Les objets table manipulent des objets de type &lt;code&gt;\Cake\ORM\Entity&lt;/code&gt;. Chaque instance représente une ligne d&amp;rsquo;une table de la base de données. Comme pour les tables, il est possible de créer des classes spécialisées qui seront utilisées par l&amp;rsquo;ORM pour représenter les entités de l&amp;rsquo;application. Ces classes sont définies dans des fichiers à l&amp;rsquo;intérieur de &lt;code&gt;/src/Model/Entity/&lt;/code&gt; et leur nom (par convention) correspond au nom de la table ramené au singulier.&lt;/p&gt;

&lt;p&gt;Un intérêt d&amp;rsquo;utiliser des classes spécialisées réside dans la possibilité de surcharger les accesseurs et les mutateurs des différents attributs. Pratique notamment dans le cas de l&amp;rsquo;entité &lt;code&gt;User&lt;/code&gt; pour crypter le mot de passe de manière transparente :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User extends Entity
{
    protected function _setPassword($password)
    {
        return (new DefaultPasswordHasher)-&amp;gt;hash($password);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J&amp;rsquo;ai utilisé cette même technique afin &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3/blob/master/src/Model/Entity/Tweet.php&#34; target=&#34;_blank&#34;&gt;d&amp;rsquo;extraire des informations du contenu d&amp;rsquo;un tweet&lt;/a&gt;, comme les hashtags ou les liens externes.&lt;/p&gt;

&lt;h2 id=&#34;la-couche-view&#34;&gt;La couche View&lt;/h2&gt;

&lt;h3 id=&#34;les-templates&#34;&gt;Les templates&lt;/h3&gt;

&lt;p&gt;Les templates sont des fichiers contenant essentiellement du code HTML. Ils sont situés dans &lt;code&gt;/src/Templates/&lt;/code&gt; et portent l&amp;rsquo;extension &lt;code&gt;.ctp&lt;/code&gt;. Le répertoire contient les templates responsables du rendu d&amp;rsquo;une action spécifique d&amp;rsquo;un contrôleur, mais également des fichiers responsables du rendu des &lt;a href=&#34;http://book.cakephp.org/3.0/fr/views.html#elements&#34; target=&#34;_blank&#34;&gt;éléments&lt;/a&gt;, des &lt;strong&gt;cellules&lt;/strong&gt; (vu un peu après), ou encore des &lt;strong&gt;layouts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Par défaut, le rendu des actions des contrôleurs est encapsulé à l&amp;rsquo;intérieur du fichier &lt;code&gt;/src/Template/Layout/default.ctp&lt;/code&gt;. C&amp;rsquo;est dans ce fichier que doit être inséré le code commun à tous les templates. Pour mieux comprendre, partons du principe que le layout par défaut devrait contenir au minimum le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;title&amp;gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;title&#39;) ?&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
	&amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;affichage généré par le contrôleur sera rendu à l&amp;rsquo;emplacement de  &lt;code&gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;&lt;/code&gt;.  Pour fonctionner, les templates doivent être nommés en corrélation avec le nom des méthodes des contrôleurs. Ainsi la méthode &lt;code&gt;TweetsController::index()&lt;/code&gt; cherchera par default le fichier &lt;code&gt;/src/Template/Tweets/index.ctp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Le fonctionnement des layouts est basé sur la possibilité de travailler avec des &lt;a href=&#34;http://book.cakephp.org/3.0/fr/views.html#utiliser-les-blocks-de-vues&#34; target=&#34;_blank&#34;&gt;blocks de vue&lt;/a&gt; à l&amp;rsquo;intérieur de vues étendues. Comme vu précédemment, le rendu de l&amp;rsquo;action sera positionné dans le block &lt;code&gt;content&lt;/code&gt;, mais il est possible de définir d&amp;rsquo;autres blocks de façon arbitraire.&lt;/p&gt;

&lt;p&gt;Pour l&amp;rsquo;application Twitthome, je m&amp;rsquo;étais donné à faire une sidebar dont le contenu serait susceptible de changer d&amp;rsquo;une page à l&amp;rsquo;autre. Un cas typique d&amp;rsquo;utilisation des blocks de vue. J&amp;rsquo;ai donc modifié mon layout &lt;code&gt;default.ctp&lt;/code&gt; afin qu&amp;rsquo;il se rapproche de quelque chose comme ça :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;...
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;aside class=&amp;quot;col-md-4&amp;quot;&amp;gt;
        &amp;lt;?= $this-&amp;gt;fetch(&#39;sidebar&#39;) ?&amp;gt;
    &amp;lt;/aside&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-8&amp;quot;&amp;gt;
        &amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le contenu du block &lt;code&gt;sidebar&lt;/code&gt; peut maintenant être défini dans un autre template, dans  &lt;code&gt;/src/Template/Tweets/index.ctp&lt;/code&gt; par exemple :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php $this-&amp;gt;start(&#39;sidebar&#39;); ?&amp;gt;
&amp;lt;p&amp;gt;Contenu de la sidebar !&amp;lt;/p&amp;gt;
&amp;lt;?php $this-&amp;gt;end(); ?&amp;gt;

&amp;lt;?php foreach($tweets as $tweet): ?&amp;gt;
    ...
&amp;lt;?php endforeach; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans cet exemple, la variable &lt;code&gt;$tweets&lt;/code&gt; est issue de l&amp;rsquo;appel à la méthode &lt;code&gt;\Cake\View\ViewVarsTrait::set()&lt;/code&gt; dans le contrôleur (cf. partie sur les classes de contrôleur).&lt;/p&gt;

&lt;h3 id=&#34;les-helpers&#34;&gt;Les helpers&lt;/h3&gt;

&lt;p&gt;Les helpers sont ce qui facilite la création des templates et ce qui la rend plus ludique. A l&amp;rsquo;image des composants pour les contrôleurs ou des comportements pour les tables, les helpers permettent de ré-utiliser de la logique de vue. Le core de CakePHP 3 embarque une dizaine de classes helpers chargées par défaut dans les vues et qui permettent entre autres :&lt;/p&gt;

&lt;p&gt;De générer des urls :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;a href=&amp;quot;&amp;lt;?= $this-&amp;gt;Url-&amp;gt;build([&#39;_name&#39; =&amp;gt; &#39;login&#39;]) ?&amp;gt;&amp;quot;&amp;gt;&amp;lt;?= __(&#39;Sign in&#39;) ?&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;D&amp;rsquo;afficher des formulaires :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?= $this-&amp;gt;Form-&amp;gt;create(new Tweet()); ?&amp;gt;
&amp;lt;?= $this-&amp;gt;Form-&amp;gt;input(&#39;content&#39;, [
    &#39;label&#39; =&amp;gt; false,
    &#39;class&#39; =&amp;gt; &#39;form-control&#39;,
    &#39;placeholder&#39; =&amp;gt; __(&#39;What\&#39;s up ?&#39;)
]); ?&amp;gt;
&amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Tweeter&#39;)); ?&amp;gt;
&amp;lt;?= $this-&amp;gt;Form-&amp;gt;end(); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ou encore d&amp;rsquo;insérer une feuille de style :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?= $this-&amp;gt;Html-&amp;gt;css(&#39;app.min.css&#39;) ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Des classes helpers personnalisées peuvent être ajoutées dans &lt;code&gt;/src/View/Helper&lt;/code&gt;, leur nom doit se terminer par le suffixe &lt;code&gt;Helper&lt;/code&gt;.  L&amp;rsquo;exemple ci-dessous est utilisé dans l&amp;rsquo;application Twitthome pour générer le code HTML correspondant à l&amp;rsquo;avatar d&amp;rsquo;un utilisateur.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class AvatarHelper extends Helper
{
    public $helpers = [&#39;Html&#39;];

    public function render($avatar_file_name)
    {
        $avatar_path = $avatar_file_name ?
            &#39;avatars/&#39; . h($avatar_file_name) : &#39;no-avatar.jpg&#39;;

        return $this-&amp;gt;Html-&amp;gt;image($avatar_path, [
            &#39;alt&#39; =&amp;gt; &#39;Avatar&#39;,
            &#39;class&#39; =&amp;gt; &#39;img-responsive thumbnail&#39;
        ]);
    }
}

// Dans un template ...
...
&amp;lt;?= $this-&amp;gt;Avatar-&amp;gt;render($avatar_file_name) ?&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comme le montre cet exemple, un helper peut dépendre d&amp;rsquo;autres helpers. Les classes d&amp;rsquo;helper correspondant aux éléments du tableau &lt;code&gt;public $helpers&lt;/code&gt; seront automatiquement instanciées et ajoutées comme attributs.&lt;/p&gt;

&lt;p&gt;Si vous souhaitez charger vos helpers pour les rendre utilisables à l&amp;rsquo;échelle de votre application, vous pouvez demander à CakePHP 3 de les instancier dans &lt;code&gt;AppView&lt;/code&gt;  via le hook &lt;code&gt;\Cake\View\View::initialize()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class AppView extends View
{
    public function initialize()
    {
        $this-&amp;gt;loadHelper(&#39;Avatar&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-cellules-cells&#34;&gt;Les cellules (cells)&lt;/h3&gt;

&lt;p&gt;Il arrive que des fragments de page HTML dépendent de données qui n&amp;rsquo;ont pas de lien direct avec le contenu principale de la page. Par exemple : un nuage de tags, un feed Instagram ou une remontée des posts les plus récents d&amp;rsquo;un blog. Si ces fragments apparaissent dans plusieurs templates, cela implique que les données doivent être rassemblées et passées à la vue dans chaque action de contrôleur correspondant. En adoptant cette approche, le code des contrôleurs risque d&amp;rsquo;être rapidement pollué. Utiliser des cellules est une solution plus pratique pour répondre à ce genre de problématiques.&lt;/p&gt;

&lt;p&gt;La &lt;a href=&#34;http://book.cakephp.org/3.0/fr/views/cells.html&#34; target=&#34;_blank&#34;&gt;documentation officielle du framework&lt;/a&gt; définit les cellules comme &amp;ldquo;des mini-controllers qui peuvent invoquer de la logique de vue et afficher les templates&amp;rdquo;. Dans le cadre de Twitthome, j&amp;rsquo;ai utilisé une cellule pour afficher le bloc &amp;ldquo;Tendances&amp;rdquo;. La cellule existe au travers de deux fichiers. Le premier est une classe définie dans &lt;code&gt;/src/View/Cell/PopularHashtagsCell.php&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class PopularHashtagsCell extends Cell
{
    public function display()
    {
        $this-&amp;gt;loadModel(&#39;Hashtags&#39;);
        $hashtags = $this-&amp;gt;Hashtags-&amp;gt;find(&#39;popular&#39;)-&amp;gt;toArray();
        $this-&amp;gt;set(&#39;hashtags&#39;, $hashtags);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le comportement de cette classe est similaire à celui d&amp;rsquo;un contrôleur. Celle-ci est capable de charger un modèle, dans le but d&amp;rsquo;extraire les informations nécessaires de la base de données. Le second fichier est le template responsable du rendu de la cellule. Ce template est définit dans &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3/blob/master/src/Template/Cell/PopularHashtags/display.ctp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;/src/Template/Cell/PopularHashtags/display.ctp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enfin la dernière étape consiste à afficher la cellule à l&amp;rsquo;intérieur d&amp;rsquo;un template. Une &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.View.CellTrait.html#_cell&#34; target=&#34;_blank&#34;&gt;méthode&lt;/a&gt; est justement prévue pour tenir ce rôle.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?= $this-&amp;gt;cell(&#39;PopularHashtags&#39;); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;le-mot-de-la-fin&#34;&gt;Le mot de la fin&lt;/h2&gt;

&lt;p&gt;Il reste évidemment de nombreux points à aborder. Certains sur lesquels je me suis penchés sont volontairement passés sous silence (comme notamment la partie sur l&amp;rsquo;internationalisation) afin de ne pas trop alourdir la lecture de cet article. D&amp;rsquo;autres sujets mériteraient une attention particulière, comme l&amp;rsquo;outil en ligne de commande, la gestion du cache, les logs ou encore l&amp;rsquo;intégration des tests.&lt;/p&gt;

&lt;p&gt;Ceci étant dit, si cet article ne peut pas prétendre couvrir (même de loin) tous les aspects de CakePHP 3, j&amp;rsquo;ai bon espoir qu&amp;rsquo;il aide à se forger un premier avis sur le framework et puisse éventuellement servir de support pour le démarrage d&amp;rsquo;un projet.
Pour aller plus loin, la &lt;a href=&#34;http://book.cakephp.org/3.0/fr/contents.html&#34; target=&#34;_blank&#34;&gt;documentation officielle&lt;/a&gt; est plutôt bien fournie. Elle contient des exemples d&amp;rsquo;applications, un cookbook complet et une documentation soignée de l&amp;rsquo;API.&lt;/p&gt;

&lt;p&gt;Si le coeur vous en dit, je vous encourage à commenter si vous pensez pouvoir souligner certains axes d&amp;rsquo;amélioration, autant sur le support (Twitthome) que sur la forme.
Je vous remercie pour la lecture et happy coding à tous !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>La pagination avec Doctrine : la bonne méthode</title>
      <link>http://www.aubm.net/blog/la-pagination-avec-doctrine-la-bonne-methode/</link>
      <pubDate>Mon, 06 Oct 2014 19:45:13 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/la-pagination-avec-doctrine-la-bonne-methode/</guid>
      <description>

&lt;p&gt;Cet article a pour but de venir compléter la documentation de Doctrine, et plus particulièrement &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/tutorials/pagination.html&#34; target=&#34;_blank&#34;&gt;la section abordant la pagination&lt;/a&gt;, en y apportant quelques précisions, et surtout quelques exemples. En espérant que d&amp;rsquo;autres y trouveront une utilité, ayant moi-même déjà été confronté à quelques petites incompréhensions quant à l&amp;rsquo;utilisation du &lt;a href=&#34;http://www.doctrine-project.org/api/orm/2.4/class-Doctrine.ORM.Tools.Pagination.Paginator.html&#34; target=&#34;_blank&#34;&gt;Paginator de Doctrine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Les exemples de code sont extraits d&amp;rsquo;une application blog exemple réalisée à l&amp;rsquo;aide du framework Symfony 2. Cette application comporte une entité Post.&lt;/p&gt;

&lt;h2 id=&#34;pagination-simple&#34;&gt;Pagination simple&lt;/h2&gt;

&lt;p&gt;Le but est d&amp;rsquo;afficher un maximum de 20 posts par page, ainsi que le nombre total de posts. Doctrine nous propose d&amp;rsquo;utiliser la classe &lt;code&gt;Doctrine\ORM\Tools\Pagination\Paginator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Voici comment utiliser cette classe :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class PostRepository extends EntityRepository
{
    public function getPosts($first_result, $max_results = 20)
    {
        $qb = $this-&amp;gt;createQueryBuilder(&#39;post&#39;);
        $qb
            -&amp;gt;select(&#39;post&#39;)
            -&amp;gt;setFirstResult($first_result)
            -&amp;gt;setMaxResults($max_results);

        $pag = new Paginator($qb);
        return $pag;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le constructeur prend en premier paramètre une instance de &lt;code&gt;Doctrine\ORM\Query&lt;/code&gt; ou de &lt;code&gt;Doctrine\ORM\QueryBuilder&lt;/code&gt;. Paginator implémente les interfaces Countable et IteratorAggregate, si bien qu&amp;rsquo;obtenir le total d&amp;rsquo;enregistrements en base de données est aussi simple que ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;count($pag);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lister les 20 premiers posts peut se faire de la façon suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$posts = $post_repository-&amp;gt;getPosts(0);
foreach ($posts as $post) {
    echo $post-&amp;gt;getTitle() . &#39;&amp;amp;lt;br /&amp;amp;gt;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En bonus : le code du template (twig) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% block body %}
    &amp;lt;ul&amp;gt;
        {% for post in posts %}
            &amp;lt;li&amp;gt;{{ post.title }}&amp;lt;/li&amp;gt;
        {% endfor %}
    &amp;lt;/ul&amp;gt;
    &amp;lt;p&amp;gt;Total : {{ posts.count }}&amp;lt;/p&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pagination-avec-jointure-one-to-many-ou-many-to-many&#34;&gt;Pagination avec jointure one-to-many ou many-to-many&lt;/h2&gt;

&lt;p&gt;Dans certains cas, Doctrine peut utiliser le langage natif du moteur de base de données pour limiter le nombre de résultats et obtenir le total d&amp;rsquo;enregistrements. Dans d&amp;rsquo;autres cas, il n&amp;rsquo;est pas possible de procéder ainsi, et notamment lorsque la requête contient des jointures sur des tables comportant des relations one-to-many ou many-to-many.&lt;/p&gt;

&lt;p&gt;Dans ces cas de figure, Doctrine va procéder différemment. Cette procédure, tout à fait transparente, est expliquée &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/tutorials/pagination.html&#34; target=&#34;_blank&#34;&gt;dans la documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ajoutons une nouvelle entité Tag qui pourra appartenir à plusieurs Post.&lt;/p&gt;

&lt;p&gt;La méthode de la classe repository ressemble maintenant à ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function getPosts($first_result, $max_results = 20)
{
    $qb = $this-&amp;gt;createQueryBuilder(&#39;post&#39;);
    $qb
        -&amp;gt;select(&#39;post&#39;)
        -&amp;gt;addSelect(&#39;tag&#39;)
        -&amp;gt;leftJoin(&#39;post.tags&#39;, &#39;tag&#39;)
        -&amp;gt;setFirstResult($first_result)
        -&amp;gt;setMaxResults($max_results);

    $pag = new Paginator($qb);
    return $pag;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et le template mis à jour :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% block body %}
    &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;Post&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Tags&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
        {% for post in posts %}
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;{{ post.title }}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    {% for tag in post.tags %}
                        {{ tag.name }}
                    {% endfor %}
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        {% endfor %}
        &amp;lt;/tbody&amp;gt;
        &amp;lt;tfooter&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;Total : {{ posts|length }}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tfooter&amp;gt;
    &amp;lt;/table&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La raison d&amp;rsquo;être de cet article est en réalité le point que je vais aborder maintenant. Il s&amp;rsquo;agit d&amp;rsquo;un piège dans lequel je suis tombé lors de mes premiers essais avec la classe Paginator.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;objet Paginator permet d&amp;rsquo;accéder à notre objet Query passé en paramètre du constructeur. Si bien que l&amp;rsquo;on peut être tenté de l&amp;rsquo;exploiter directement dans notre template, boycottant ainsi l&amp;rsquo;utilisation du Paginator. Considérez le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$pag = $post_repository-&amp;gt;getPosts(0);
$posts = $pag-&amp;gt;getQuery()-&amp;gt;getResult();
foreach ($posts as $post) {
    echo $post-&amp;gt;getTitle() . &#39;&amp;lt;br /&amp;gt;&#39;;
}
echo &#39;Total : &#39; . $pag-&amp;gt;count();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si la requête ne comporte pas de jointure, le résultat affiché sera le même. Les suprises arriveront lorsque la requête comportera des jointures. Des anomalies pourraient se produire en raison du fait que l&amp;rsquo;hydratation d&amp;rsquo;un objet pourrait nécessiter la lecture de plusieurs lignes.&lt;/p&gt;

&lt;p&gt;Un bon moyen d&amp;rsquo;obtenir le tableau des 20 premiers Post est le suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$posts = $pag-&amp;gt;getIterator()-&amp;gt;getArrayCopy();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merci pour la lecture et n&amp;rsquo;hésitez pas à partager :)&lt;/p&gt;

&lt;p&gt;Code de l&amp;rsquo;application exemple : &lt;a href=&#34;https://github.com/aubm/tuto-doctrine-pagination&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/aubm/tuto-doctrine-pagination&#34;&gt;https://github.com/aubm/tuto-doctrine-pagination&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aurélien.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retour d&#39;expérience sur Joomla, point de vue d&#39;un développeur</title>
      <link>http://www.aubm.net/blog/retour-dexperience-sur-joomla-point-de-vue-dun-developpeur/</link>
      <pubDate>Wed, 01 Oct 2014 00:07:05 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/retour-dexperience-sur-joomla-point-de-vue-dun-developpeur/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Joomla - à l&amp;rsquo;instar de Wordpress et Drupal -  est un CMS permettant à des utilisateurs non-développeurs d&amp;rsquo;installer et de configurer un site internet. Le CMS s&amp;rsquo;adresse également aux développeurs, en leur proposant une API leur permettant d&amp;rsquo;étendre ses fonctionnalités. D&amp;rsquo;aucuns sont alors tentés de choisir Joomla pour démarrer un projet impliquant du développement spécifique. Sur le papier l&amp;rsquo;argumentaire est imparable : pourquoi ne pas utiliser le CMS comme base pour ce projet, pour lequel Joomla sorti de la boite couvre 80% des besoins du client ? C&amp;rsquo;est autant de temps de gagner.&lt;/p&gt;

&lt;p&gt;Pendant presque deux ans, j&amp;rsquo;ai eu l&amp;rsquo;occasion de prendre part à de nombreux développements sur Joomla. Cette expérience m&amp;rsquo;a conduit à penser que dans certains cas, cette logique est applicable. En effet, pour un budget moyen et dans le cas d&amp;rsquo;un projet de site web répondant aux caractéristiques classiques d&amp;rsquo;un blog, d&amp;rsquo;une vitrine ou éventuellement d&amp;rsquo;un e-commerce, cette hypothèse semble se vérifier. Il est cependant de nombreux cas où le besoin métier du client représentant les 20% de développement restant représentent en réalité bien plus que 20% du temps de développement global. Pour ce type de projets, mieux vaut s&amp;rsquo;assurer de choisir un bon environnement de développement pour travailler.&lt;/p&gt;

&lt;p&gt;Alors Joomla est-il un bon terrain de jeu ? Sur le sujet ma position est claire : non. Dans cet article je vais tâcher de défendre ce point de vue.
Sans vouloir tomber dans du troll, certains points de vue restent personnels et donc discutables. Il pourrait être intéressant de les confronter à des visions différentes.&lt;/p&gt;

&lt;h2 id=&#34;modulaire-mais-pas-extensible&#34;&gt;Modulaire mais pas extensible&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;argumentaire &amp;ldquo;commercial&amp;rdquo; de Joomla repose sur sa modularité. L&amp;rsquo;architecture du CMS permet effectivement de développer des extensions afin d&amp;rsquo;ajouter des fonctionnalités sans altérer le core du logiciel. Vous pouvez donc envisager de développer un forum, un composant de petites annonces, ou encore une solution permettant d&amp;rsquo;exporter des données vers un CRM ; le tout en cohabitation avec la gestion du blog et des utilisateurs fournie par le CMS.&lt;/p&gt;

&lt;p&gt;Bien, je souhaite maintenant étendre le composant de gestion des contenus du site afin d&amp;rsquo;y ajouter la possibilité de renseigner un champ supplémentaire. La désillusion commence ici, car à problème simple, solution &amp;hellip; pas simple. Malheureusement le CMS ne permet pas d&amp;rsquo;étendre les fonctionnalités des composants natifs. Pour un besoin comme celui-ci il faudra passer par le développement d&amp;rsquo;un composant à part entière afin d&amp;rsquo;ajouter les fonctionnalités manquantes (ou éventuellement l&amp;rsquo;utilisation d&amp;rsquo;un composant tiers, mais cela pourrait apporter de nouvelles contraintes).&lt;/p&gt;

&lt;p&gt;On serait tenté de dire qu&amp;rsquo;il s&amp;rsquo;agit là d&amp;rsquo;un exemple isolé et que ces problématiques ne sont pas récurrentes. J&amp;rsquo;ai pourtant été confronté à des cas similaires de nombreuses fois. La raison pour laquelle cela est réellement gênant est que ces problèmes trahissent en vérité des erreurs importantes de conception. Dans le meilleur des mondes, Joomla mettrait à disposition un composant d&amp;rsquo;injection de dépendances couplé à une stratégie d&amp;rsquo;abstraction sur les classes utilisées dans les composants du core. Ainsi une hypothétique classe concrète &lt;code&gt;Content&lt;/code&gt; pourrait être remplacée par une classe &lt;code&gt;MyCustomContent&lt;/code&gt;, quelques détails à régler, un petit script de migration pour modifier la structure de la base de données et le tour est joué. On est très loin de ça.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;aborde là des notions relatives au design objet, le but n&amp;rsquo;est pas de m&amp;rsquo;égarer dans des idées trop éloignées du sujet. Je suis conscient que l&amp;rsquo;utilisation de certaines techniques pourrait sembler surévaluée et en ça il s&amp;rsquo;agit là d&amp;rsquo;un point de vue discutable. Ceci étant dit, s&amp;rsquo;il est question de choisir un environnement pour développer une application relativement complexe, alors s&amp;rsquo;orienter vers une solution plus ouverte me semble plus judicieux. Car si le problème mis en évidence ici est relatif à la couche fonctionnelle du CMS, des erreurs similaires existent au niveau du framework.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/saquedeneu.png&#34; alt=&#34;Saquedeneu&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Force est de constater que les contributeurs de Joomla fournissent un travail important pour améliorer la qualité du code. Je précise au passage que certains aspects sont intéressants (comme notamment le fonctionnement des plugins). Cependant Joomla (à l&amp;rsquo;origine fork de Mambo) est construit de manière empirique et à ce stade du projet, la tâche est herculéenne. Conscients des faiblesses de Drupal 7, les développeurs de Drupal 8 ont choisi de reprendre le projet à zéro.&lt;/p&gt;

&lt;h2 id=&#34;joomla-le-vilain-petit-canard&#34;&gt;Joomla le vilain petit canard&lt;/h2&gt;

&lt;h3 id=&#34;psr-quoi&#34;&gt;PSR quoi ?&lt;/h3&gt;

&lt;p&gt;A l&amp;rsquo;heure où j&amp;rsquo;écris, une partie du framework est réécrite avec dans l&amp;rsquo;optique d&amp;rsquo;embrasser des techniques de codage plus au goût de ce qui se fait aujourd&amp;rsquo;hui dans le monde de PHP. Bien que pour le développeur d&amp;rsquo;extensions cela relève plus de l&amp;rsquo;anecdote qu&amp;rsquo;autre chose, c&amp;rsquo;est plutôt une bonne nouvelle. Car si Joomla 3.4 requiert au minimum PHP 5.3, l&amp;rsquo;utilisation des namespaces dans le code des extensions suscitera éventuellement de timides &amp;ldquo;pourquoi pas ?&amp;rdquo; mais toujours pas d&amp;rsquo;applaudissements. On attend avec impatience le jour où l&amp;rsquo;auto-chargement des classes conforme PSR-0 ou PSR-4 sera géré par le CMS. En attendant vous pouvez continuer à le configurer manuellement pour chacune de vos classes.&lt;/p&gt;

&lt;h3 id=&#34;un-router-pour-le-moins-original&#34;&gt;Un router pour le moins original&lt;/h3&gt;

&lt;p&gt;Les composants du CMS doivent respecter une structure pour fonctionner. Des contrôleurs sont définis pour isoler la logique de l&amp;rsquo;application. En réalité cette responsabilité est partagée entre les contrôleurs et les vues. C&amp;rsquo;est un peu différent de ce qu&amp;rsquo;on peut trouver dans d&amp;rsquo;autres frameworks mais pourquoi pas.&lt;/p&gt;

&lt;p&gt;Ce qui me laisse un peu perplexe en revanche c&amp;rsquo;est le fonctionnement du router. Le contrôleur et l&amp;rsquo;action qui prendront en charge la requête sont définis par des variables de requête. Si bien que cette requête &lt;code&gt;index.php?option=com_forum&amp;amp;task=message.save&lt;/code&gt; sera prise en charge par la méthode &lt;code&gt;save()&lt;/code&gt; du contrôleur &lt;code&gt;Message&lt;/code&gt; du composant &lt;code&gt;Forum&lt;/code&gt;. Le flow d&amp;rsquo;exécution de la requête est donc sous le contrôle partiel de l&amp;rsquo;utilisateur du site. Il est possible de la même façon de déterminer le fichier de vue et le template à utiliser en forçant une valeur pour les variables &lt;code&gt;view&lt;/code&gt; et &lt;code&gt;tmpl&lt;/code&gt;. Pour info, si une combinaison de valeurs ne fonctionne pas, &lt;a href=&#34;http://www.joomla.org/index.php?option=com_content&amp;task=john.doe&#34; target=&#34;_blank&#34;&gt;l&amp;rsquo;application renverra une 500&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pour utiliser des urls plus &amp;ldquo;SEO friendly&amp;rdquo;, il faudra donc mettre en place un fichier &lt;code&gt;router.php&lt;/code&gt; à l&amp;rsquo;intérieur du composant, fichier dans lequel la réécriture des urls est définie programmatiquement. Pas franchement simple donc, à titre d&amp;rsquo;exemple, le fichier router du composant de gestion de contenu embarqué dans le CMS &lt;a href=&#34;https://github.com/joomla/joomla-cms/blob/staging/components/com_content/router.php&#34; target=&#34;_blank&#34;&gt;compte pas loin de 500 lignes&lt;/a&gt;, quid des performances ? Sans compter qu&amp;rsquo;il est impossible de personnaliser les routes des composants natifs de Joomla.&lt;/p&gt;

&lt;p&gt;A noter qu&amp;rsquo;activer la réécriture des urls n&amp;rsquo;empêchera pas les utilisateurs de la boycotter et d&amp;rsquo;accéder à &lt;code&gt;index.php?option=com_....&lt;/code&gt;. Cela ne les empêchera pas non plus d&amp;rsquo;accéder aux autres fichiers du site d&amp;rsquo;ailleurs, étant donné que le point d&amp;rsquo;entrée (supposé) de l&amp;rsquo;application est situé à un niveau d&amp;rsquo;arborescence supérieur aux fichiers des composants. Forçant ainsi à vérifier la déclaration de la constante &lt;code&gt;_JEXEC&lt;/code&gt; au début de chaque fichier (pas très élégant &amp;hellip;), et accessoirement de placer un &lt;code&gt;index.html&lt;/code&gt; vide dans chaque sous répertoire.&lt;/p&gt;

&lt;h3 id=&#34;a-propos-d-élégance&#34;&gt;A propos d&amp;rsquo;élégance&lt;/h3&gt;

&lt;p&gt;A propos d&amp;rsquo;élégance (ou plus exactement de praticité), il y a un certain nombre de points qui méritent d&amp;rsquo;être soulignés.&lt;/p&gt;

&lt;p&gt;Par exemple, si une mise à jour d&amp;rsquo;un composant du site implique des modifications dans la structure de la base de données, il est préférable d&amp;rsquo;ajouter un fichier de migration afin de faciliter la mise à jour de ce composant sur le serveur de production. Un peu dommage que ces fichiers contiennent des requêtes SQL qu&amp;rsquo;il faut écrire à la main. Doctrine ou Eloquent (à titre d&amp;rsquo;exemples) peuvent tous deux générer des scripts équivalents via un CLI avec en bonus des possibilités de rollback (ce qui n&amp;rsquo;est pas le cas ici je précise).&lt;/p&gt;

&lt;p&gt;En parlant d&amp;rsquo;ORM, à noter que Joomla n&amp;rsquo;embarque pas d&amp;rsquo;ORM. Il faudra se contenter d&amp;rsquo;un composant d&amp;rsquo;abstraction sur la base de données (une petite sur-couche à PDO) présentant au moins l&amp;rsquo;avantage de pouvoir construire des requêtes SQL plus facilement en manipulant des objets. C&amp;rsquo;est regrettable, surtout quand il s&amp;rsquo;agit d&amp;rsquo;extraire des données de plusieurs tables, l&amp;rsquo;utilisation d&amp;rsquo;un ORM peut faire gagner un temps précieux.&lt;/p&gt;

&lt;p&gt;Parmi les éléments qui me viennent à l&amp;rsquo;esprit, j&amp;rsquo;évoquerai aussi la définition des formulaires dans des fichiers XML. L&amp;rsquo;idée est bonne sur la papier dans la mesure où cela vise à faciliter des tâches fastidieuses comme la validation des données ou la génération de templates. Dans la pratique il est des cas où cette approche apporte plus de contraintes qu&amp;rsquo;autre chose. Quid des formulaires dynamiques par exemple ?&lt;/p&gt;

&lt;p&gt;Rien de bien grave dans tout ça me direz-vous et c&amp;rsquo;est sans doute vrai. Rien de véritablement bloquant pour achever le développement du site, mais je rappelle qu&amp;rsquo;il est question de choisir un environnement de développement confortable permettant de travailler efficacement (et donc plus rapidement). Sur les points cités plus haut comme sur de nombreux autres, Joomla n&amp;rsquo;est clairement pas au niveau de ce que proposent des frameworks concurrents.&lt;/p&gt;

&lt;h3 id=&#34;une-maturité-discutable&#34;&gt;Une maturité discutable&lt;/h3&gt;

&lt;p&gt;Si il semble qu&amp;rsquo;aujourd&amp;rsquo;hui, la culture du test commence à rentrer dans les moeurs, ce n&amp;rsquo;était pas le cas il y a encore relativement peu de temps. La communauté semble effectivement avoir &lt;a href=&#34;http://developer.joomla.org/news/597-release-postmortem.html&#34; target=&#34;_blank&#34;&gt;appris de ses erreurs&lt;/a&gt; et une grande partie du code est aujourd&amp;rsquo;hui (enfin) couverte par des tests. Ces tests ne garantissent évidemment pas le fonctionnement de l&amp;rsquo;application mais permettent au moins de contrôler un certain nombre de régressions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/iron_man.gif&#34; alt=&#34;Iron man&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Cela reste un avis très personnel mais je ne peux m&amp;rsquo;empêcher de penser qu&amp;rsquo;une prise de conscience aussi tardive pourrait témoigner d&amp;rsquo;un certain manque de maturité du logiciel, ce qui est assez paradoxal étant donné son ancienneté.&lt;/p&gt;

&lt;p&gt;On pourrait en dire autant sur la documentation officielle pour les développeurs, qui aujourd&amp;rsquo;hui encore paraît assez maigre (notamment en terme d&amp;rsquo;exemples) à côté de la quantité de ressources que l&amp;rsquo;on peut trouver sur les sites respectifs de Laravel ou de Symfony (pour ne citer qu&amp;rsquo;eux).
Encore un paradoxe d&amp;rsquo;ailleurs, étant donné que ce n&amp;rsquo;est pourtant pas le contenu qui manque entre &lt;a class=&#34;http://dev.joomla.fr/&#34; target=&#34;_blank&#34;&gt;dev.joomla.fr&lt;/a&gt;, &lt;a href=&#34;http://developer.joomla.org/&#34; target=&#34;_blank&#34;&gt;developper.joomla.org&lt;/a&gt; ou encore &lt;a href=&#34;https://docs.joomla.org/Portal:Developers&#34; target=&#34;_blank&#34;&gt;docs.joomla.org/Portal:Developers&lt;/a&gt; &amp;hellip; J&amp;rsquo;y mets peut-être un peu de mauvaise volonté mais quelqu&amp;rsquo;un pourrait me dire par où commencer ?&lt;/p&gt;

&lt;h2 id=&#34;performance-scalabilité-et-maintenance&#34;&gt;Performance, scalabilité et maintenance&lt;/h2&gt;

&lt;p&gt;La performance c&amp;rsquo;est souvent la bête noire des CMS. En tout cas pour ceux orientés &amp;ldquo;end-user&amp;rdquo;, étant donné que beaucoup font le choix de stocker un (trop) grand nombre d&amp;rsquo;informations en base de données et que les accès I/O sont généralement les opérations les plus couteuses.&lt;/p&gt;

&lt;p&gt;Joomla peine à déroger à la règle, c&amp;rsquo;est effectivement délicat quand le choix est fait de stocker en base de données, des données relatives au paramétrage des composants par exemple. &lt;a href=&#34;http://www.chronoengine.com/downloads/chronoforms.html&#34; target=&#34;_blank&#34;&gt;Certains composants&lt;/a&gt; poussent le vice assez loin en allant jusqu&amp;rsquo;à stocker en base de données des fragments de code destinés à être exécutés.&lt;/p&gt;

&lt;p&gt;La complexification des requêtes SQL peut également être une conséquence indirecte de la nature modulaire mais peu extensible du CMS (cf. début de l&amp;rsquo;article). En effet si ajouter une information sur le numéro de téléphone des utilisateurs ne peut être fait en modifiant directement la table des utilisateurs, un composant tiers n&amp;rsquo;aura alors d&amp;rsquo;autre choix que d&amp;rsquo;ajouter une table &lt;code&gt;users_extra_data&lt;/code&gt; comportant une clé étrangère vers la table &lt;code&gt;users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Une mauvaise optimisation de la base de données ne représente pas un problème majeur au départ. On peut toujours investir 200 euros de plus par an pour que l&amp;rsquo;application s&amp;rsquo;exécute convenablement. C&amp;rsquo;est sur le moyen/long terme que ces problèmes peuvent devenir gênants, alors que le traffic augmente sur le site, la besoin en resources augmentera de manière exponentielle.&lt;/p&gt;

&lt;p&gt;A noter également qu&amp;rsquo;en terme de maintenance, qu&amp;rsquo;il s&amp;rsquo;agisse de versionner le projet ou de configurer un environnement de test, cette mauvaise utilisation de la base de données ne facilitera pas la tâche.&lt;/p&gt;

&lt;h2 id=&#34;le-mot-de-la-fin&#34;&gt;Le mot de la fin&lt;/h2&gt;

&lt;p&gt;Le tour n&amp;rsquo;est pas encore complet et il y aurait évidemment encore beaucoup à dire (en bon comme en mauvais). Je pense cependant avoir donné suffisamment d&amp;rsquo;éléments pour défendre mon point de vue.&lt;/p&gt;

&lt;p&gt;N&amp;rsquo;hésitez pas à commenter pour donner votre retour, et merci pour la lecture !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webservice Restful avec Symfony2 : gérer les champs de type Datetime</title>
      <link>http://www.aubm.net/blog/webservice-restful-avec-symfony2-gerer-les-champs-de-type-datetime/</link>
      <pubDate>Thu, 03 Jul 2014 19:24:23 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/webservice-restful-avec-symfony2-gerer-les-champs-de-type-datetime/</guid>
      <description>&lt;p&gt;Si vous choisissez Symfony pour construire une application de webservice, il est un détail à relever à propos des champs de type Datetime dans le cas d&amp;rsquo;utilisation des objets formulaires.&lt;/p&gt;

&lt;p&gt;Prenons par exemple ce code qui génère un formulaire à partir des champs d&amp;rsquo;une entité Post fictive :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$builder
    -&amp;gt;add(&#39;title&#39;)
    -&amp;gt;add(&#39;content&#39;)
    -&amp;gt;add(&#39;published&#39;)
     ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans cet exemple, le champ published est de type Datetime. Si on utilise ce formulaire pour générer du code HTML, Symfony générera pour le champ published le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;label class=&amp;quot;required&amp;quot;&amp;gt;Published&amp;lt;/label&amp;gt;
    &amp;lt;div id=&amp;quot;acme_demobundle_post_published&amp;quot;&amp;gt;
        &amp;lt;div id=&amp;quot;acme_demobundle_post_published_date&amp;quot;&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_date_year&amp;quot; name=&amp;quot;acme_demobundle_post[published][date][year]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;2009&amp;quot;&amp;gt;2009&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2010&amp;quot;&amp;gt;2010&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_date_month&amp;quot; name=&amp;quot;acme_demobundle_post[published][date][month]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;Jan&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;Feb&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_date_day&amp;quot; name=&amp;quot;acme_demobundle_post[published][date][day]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;1&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;2&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&amp;quot;acme_demobundle_post_published_time&amp;quot;&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_time_hour&amp;quot; name=&amp;quot;acme_demobundle_post[published][time][hour]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;0&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;02&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_time_minute&amp;quot; name=&amp;quot;acme_demobundle_post[published][time][minute]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;0&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;02&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A noter que la valeur du champs est construite dans un tableau rassemblant les différents informations year, month, day, etc &amp;hellip;&lt;/p&gt;

&lt;p&gt;Si on utilise ce formulaire pour mettre à jour les informations d&amp;rsquo;un objet Post via une route &lt;code&gt;PUT /posts/{postId}&lt;/code&gt; par exemple, le client devra construire la valeur de l&amp;rsquo;attribut published de la même façon que dans ce formulaire. Soit quelque chose comme ça :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;published[date][year] = 2000
published[date][month] = 12
published[date][day] = 15
published[time][hour] = 12
published[time][minute] = 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voilà qui pourrait convenir, cependant pour une question de simplicité pour le client, nous souhaitons que celui-ci nous envoie l&amp;rsquo;information published de cette façon :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;published = 2000-12-15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour ce faire, la solution est très simple, il suffit de changer la valeur par défaut de certaines options de l&amp;rsquo;entrée published de la classe du formulaire.&lt;/p&gt;

&lt;p&gt;Voici le code du formulaire, modifié de façon à ce qu&amp;rsquo;il se comporte comme nous le souhaitons :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$builder
    -&amp;gt;add(&#39;title&#39;)
    -&amp;gt;add(&#39;content&#39;)
    -&amp;gt;add(&#39;published&#39;, null, array(
        &amp;quot;widget&amp;quot; =&amp;gt; &amp;quot;single_text&amp;quot;,
        &amp;quot;format&amp;quot; =&amp;gt; &amp;quot;yyyy-MM-dd&amp;quot;,
     ))
     ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons défini deux options. L&amp;rsquo;option widget est définie à single_text de manière à ce que le formulaire attende la valeur du champ dans une seule variable. L&amp;rsquo;option format quant à elle permet de définir le format qui est attendu pour la date.&lt;/p&gt;

&lt;p&gt;N&amp;rsquo;hésitez pas à consulter la &lt;a href=&#34;http://symfony.com/fr/doc/current/reference/forms/types/date.html&#34; target=&#34;_blank&#34;&gt;documentation de Symfony&lt;/a&gt; pour en savoir plus sur ces options ainsi que sur les autres options disponibles pour le type champ Date.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Astuce : le serveur de développement embarqué de PHP</title>
      <link>http://www.aubm.net/blog/astuce-le-serveur-de-developpement-embarque-de-php/</link>
      <pubDate>Thu, 22 May 2014 02:15:15 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/astuce-le-serveur-de-developpement-embarque-de-php/</guid>
      <description>

&lt;p&gt;Bonjour, ce petit article pour partager une de mes découvertes récentes. Il s&amp;rsquo;agit du serveur web interne de PHP, intégré depuis la version 5.4. La lecture de cette article ne vous apprendra surement pas grand chose si vous avez déjà connaissance de cette fonctionnalité.&lt;/p&gt;

&lt;p&gt;Pour en savoir plus, rendez vous directement sur la &lt;a href=&#34;http://php.net/manual/fr/features.commandline.webserver.php&#34; target=&#34;_blank&#34;&gt;documentation officielle de PHP&lt;/a&gt;. La documentation explique comment utiliser de façon très simple ce service. A noter que celui n&amp;rsquo;est pas pensé pour être utilisé dans un environnement de production, mais est destiné à servir dans un environnement de développement. Il n&amp;rsquo;est, par conséquent, plus nécessaire de configurer une nouvelle vhost sur votre serveur http (typiquement apache ou nginx), et d&amp;rsquo;ajouter une entrée dans le fichier hosts. Démarrez votre application à l&amp;rsquo;aide d&amp;rsquo;une simple commande dans votre terminal, et testez directement votre application !&lt;/p&gt;

&lt;h2 id=&#34;encore-mieux&#34;&gt;Encore mieux&lt;/h2&gt;

&lt;p&gt;De nombreux framework de développement PHP, dont Symfony ou encore Laravel facillitent encore plus l&amp;rsquo;utilisation de ce service. Pour l&amp;rsquo;exemple, si vous utilisez Symfony2 pour développer votre application, tapez directement dans votre terminal la commande suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php app/console server:run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La console vous affichera un message comme :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Server running on http://localhost:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ouvrez votre navigateur et rendez vous à l&amp;rsquo;adresse &lt;code&gt;http:/localhost:8000&lt;/code&gt; pour utiliser votre application. Note : la commande lance l&amp;rsquo;application dans l&amp;rsquo;environnement de développement, vous n&amp;rsquo;avez donc pas besoin de faire précéder toutes vos route par &lt;code&gt;app_dev.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pour finir un petit coup d&amp;rsquo;oeil sur les informations que nous fournit la commande suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php app/console server:run --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enfin, pour en savoir plus, rendez-vous directement sur la &lt;a href=&#34;http://symfony.com/doc/current/cookbook/web_server/built_in.html&#34; target=&#34;_blank&#34;&gt;documentation officelle de Symfony&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Et voilà, have fun :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Utiliser les Event Subscriber avec FosRestBundle et JMSSerializerBundle</title>
      <link>http://www.aubm.net/blog/utiliser-les-event-subscriber-avec-fosrestbundle-et-jmsserializerbundle/</link>
      <pubDate>Tue, 20 May 2014 20:26:49 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/utiliser-les-event-subscriber-avec-fosrestbundle-et-jmsserializerbundle/</guid>
      <description>

&lt;h2 id=&#34;présentation-de-la-problèmatique&#34;&gt;Présentation de la problèmatique&lt;/h2&gt;

&lt;p&gt;J&amp;rsquo;écris cet article car j&amp;rsquo;ai été confronté à une problématique lors d&amp;rsquo;un projet que j&amp;rsquo;ai réalisé il y a peu. Le projet impliquait la création d&amp;rsquo;un webservice au standard Rest dans une application Symfony2. J&amp;rsquo;ai fait le choix d&amp;rsquo;utiliser FosRestBundle et JMSSerializerBundle. Pour en apprendre plus sur l&amp;rsquo;utilisation de ces bundles, je vous invite à consulter &lt;a href=&#34;http://obtao.com/blog/2013/12/creer-une-api-rest-dans-une-application-symfony/&#34; target=&#34;_blank&#34;&gt;cet article&lt;/a&gt; du blog de obtao.com. Le problème auquel j&amp;rsquo;ai été confronté était le suivant.&lt;/p&gt;

&lt;p&gt;Une méthode du webservice devait retourner une collection d&amp;rsquo;objets de la classe File suivante (j&amp;rsquo;épure volontairement le code) :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class File
{
    private $id;
    private $originalClientName;
    private $filename;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le nom du fichier original qui a été uploadé est conservé dans l&amp;rsquo;attribut $originalClientName. Potentiellement, cet attribut contient des valeurs comme &amp;ldquo;chat.jpg&amp;rdquo; ou &amp;ldquo;photos.zip&amp;rdquo; L&amp;rsquo;attribut $filename quant à lui contient le nom du fichier tel qu&amp;rsquo;il est stocké sur le serveur, il s&amp;rsquo;agit d&amp;rsquo;une chaîne de caractères aléatoire générée lors de l&amp;rsquo;enregistrement de l&amp;rsquo;entité dans la base de données.&lt;/p&gt;

&lt;p&gt;La représentation json retournée par le webservice pour chaque entité File devait être de la forme suivante.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;id&amp;quot; : 34,
    &amp;quot;originalClientName&amp;quot; : &amp;quot;chat.jpg&amp;quot;,
    &amp;quot;downloadUrl&amp;quot; : &amp;quot;http://mon-serveur.com/download/z3r4gez775gd2dczzdf261gr0y66e&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comme on peut le voir, l&amp;rsquo;attribut $filename (supposé contenir la string &lt;code&gt;&amp;quot;z3r4gez775gd2dczzdf261gr0y66e&amp;quot;&lt;/code&gt; dans cet exemple), n&amp;rsquo;est pas directement retourné dans le flux. Il s&amp;rsquo;agit en fait d&amp;rsquo;une uri facilement exploitable pour le client, pointant directement vers la  resource. Ayant parcouru la document du JMSSerializerBundle j&amp;rsquo;ai pensé à utiliser l&amp;rsquo;annotion &lt;code&gt;@VirtualProperty&lt;/code&gt; sur une méthode de mon entité File qui ressemblerait à ceci.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class File
{
    private $id;
    private $originalClientName;
    private $filename;

    /**
    * @VirtualProperty
    */
    public function getDownloadUrl()
    {
        return &amp;quot;http://mon-serveur.com/download/&amp;quot; . $this-&amp;gt;filename;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je n&amp;rsquo;aimais qu&amp;rsquo;à moitié cette solution car elle m&amp;rsquo;imposait d&amp;rsquo;écrire mon uri &amp;ldquo;en dur&amp;rdquo; dans le code source de mon entité. Cela pouvait poser problème si pendant le développement je voulais changer de hostname et tout simplement passer d&amp;rsquo;un environnement à un autre (dev -&amp;gt; prod ou l&amp;rsquo;inverse).&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;ai donc voulu utiliser le service &amp;ldquo;router&amp;rdquo; de Symfony pour générer l&amp;rsquo;uri dynamiquement. Sauf que manque de chance, utiliser un service dans une entité, ce n&amp;rsquo;est pas si simple à faire. Et ce pour la bonne raison que c&amp;rsquo;est une mauvaise pratique, l&amp;rsquo;entité devant pouvoir exister de façon indépendante à tout service externe.&lt;/p&gt;

&lt;p&gt;Epluchant les documentations et les forums, je ne trouvais pas de solution simple ou suffisamment &amp;ldquo;good practice&amp;rdquo; à mon goût pour régler le problème. J&amp;rsquo;avais d&amp;rsquo;abord réfléchi à une solution qui me permettrait d&amp;rsquo;injecter un service dans une classe abtraite, ce qui me permettrait d&amp;rsquo;appeler une méthode statique sur cette classe. Mais ça me paraissait bien compliqué à réaliser, voire même tout simplement impossible.&lt;/p&gt;

&lt;p&gt;Je suis finalement tombé sur un forum, dans lequel une personne rencontrant une problématique semblable à la mienne se voyait soumettre un début de solution qui a pu m&amp;rsquo;aider à me dépatouiller.&lt;/p&gt;

&lt;h2 id=&#34;ma-solution&#34;&gt;Ma solution&lt;/h2&gt;

&lt;p&gt;La solution que j&amp;rsquo;ai choisie pour répondre à cette problématique consistait à utiliser la &lt;a href=&#34;http://jmsyst.com/libs/serializer/master/event_system&#34; target=&#34;_blank&#34;&gt;gestion des évènements du serializer&lt;/a&gt;. Concrétement, voici comment j&amp;rsquo;ai exploité cette fonctionnalité dans mon webservice. Dans la configuration de mes services (au niveau de mon WebServiceBundle), j&amp;rsquo;ai ajouté le service défini de la façon suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parameters:
    aubm_web_service.serialize_handler_file.class: Aubm\WebServiceBundle\SerializeEventHandler\FileHandler
services:
    aubm_web_service.serialize_handler_file:
    class: %aubm_web_service.serialize_handler_file.class%
    tags:
        - { name: jms_serializer.event_subscriber }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;astuce ici est d&amp;rsquo;ajouter le tag &lt;code&gt;jms_serializer.event_subscriber&lt;/code&gt; au service. Si vous n&amp;rsquo;avez jamais travaillé avec les services taggés, n&amp;rsquo;hésitez pas à parcourir rapidement la &lt;a href=&#34;http://symfony.com/fr/doc/current/components/dependency_injection/tags.html&#34; target=&#34;_blank&#34;&gt;documentation officielle du framework&lt;/a&gt; afin de mieux comprendre leur utilité. Le tag &lt;code&gt;jms_serializer.event_subscriber&lt;/code&gt; va indiquer au serializer qu&amp;rsquo;il doit effectuer un certains nombre d&amp;rsquo;actions sur ce service lors de certaines étapes de la serialisation des objets. Le &amp;ldquo;quoi effectuer&amp;rdquo; et &amp;ldquo;quand l&amp;rsquo;effectuer&amp;rdquo; sont définis dans le service lui même. Ce service doit implémenter l&amp;rsquo;interface &lt;code&gt;\JMS\Serializer\EventDispatcher\EventSubscriberInterface&lt;/code&gt; et doit donc implémenter la méthode statique &lt;code&gt;getSubscribedEvents&lt;/code&gt;. Voici le code de la classe du service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class FileHandler implements EventSubscriberInterface
{
    /**
    * {@inheritdoc}
    */
    public static function getSubscribedEvents()
    {
        return array(
            array(&#39;event&#39; =&amp;gt; &#39;serializer.pre_serialize&#39;, &#39;method&#39; =&amp;gt; &#39;onPreSerialize&#39;, &#39;class&#39; =&amp;gt; &#39;Aubm\WebServiceBundle\Entity\File&#39;),
        );
    }

    public function onPreSerialize(PreSerializeEvent $event)
    {
        $file = $event-&amp;gt;getObject();
        // effectuer des manipulation sur l&#39;objet avant sa serialisation ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans la méthode onPreSerialize, je peux manipuler mon entité File comme je souhaite avant sa sérialisation. Par ailleurs, ma classe FileHandler est définie en tant que service dans ma configuration, je peux donc y injecter toutes les dépendances dont j&amp;rsquo;ai besoin. Pour la suite, le code parle de lui-même &amp;hellip;&lt;/p&gt;

&lt;p&gt;Dans mon entité File &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class File
{
    ...

    private $downloadUrl;

    public function setDownloadUrl($downloadUrl)
    {
        $this-&amp;gt;downloadUrl = $downloadUrl;
    }

    public function getDownloadUrl()
    {
        return $this-&amp;gt;downloadUrl;
    }

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans mon services.yml &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parameters:
    aubm_web_service.serialize_handler_file.class: Aubm\WebServiceBundle\SerializeEventHandler\FileHandler
services:
    aubm_web_service.serialize_handler_file:
    class: %aubm_web_service.serialize_handler_file.class%
    arguments:
        router: &amp;quot;@router&amp;quot;
    tags:
        - { name: jms_serializer.event_subscriber }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enfin, dans ma classe de service FileHandler &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function onPreSerialize(PreSerializeEvent $event)
{
    $file = $event-&amp;gt;getObject();
    $file-&amp;gt;setDownloadUrl(
        $this-&amp;gt;router-&amp;gt;generate(&amp;quot;aubm_download_file&amp;quot;, array(
            &amp;quot;filename&amp;quot; =&amp;gt; $file-&amp;gt;getFilename()
        ));
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En espérant que cet article pourra aider des personnes à la recherche d&amp;rsquo;une solution pour un problème similaire, merci de m&amp;rsquo;avoir lu et n&amp;rsquo;hésitez pas à backlinker :)&lt;/p&gt;

&lt;p&gt;Aurélien.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>