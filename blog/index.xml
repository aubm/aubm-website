<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Aubm</title>
    <link>http://www.aubm.net/blog/index.xml</link>
    <description>Recent content in Blogs on Aubm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <lastBuildDate>Thu, 08 Dec 2016 22:01:52 +0100</lastBuildDate>
    <atom:link href="http://www.aubm.net/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pourquoi Big O est important ?</title>
      <link>http://www.aubm.net/blog/pourquoi-big-o-est-important/</link>
      <pubDate>Thu, 08 Dec 2016 22:01:52 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/pourquoi-big-o-est-important/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Récemment je parcourais différentes ressources sur le sujet des algorithmes.
En examinant les exemples de runtimes exprimés en fonctions mathématiques avec Big O, je me suis dit:
&amp;ldquo;Tout cela est très intéressant mais mérite d&amp;rsquo;être vérifié !&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Après tout ce n&amp;rsquo;est pas parce que tous les bouquins sur le sujet nous enseignent que cet algorithme de détection des puissances de 2 dans une liste de taille N a un runtime de O(log(N)) que je dois les croire sur parole n&amp;rsquo;est-ce pas ?&lt;/p&gt;

&lt;h2 id=&#34;ce-que-big-o-nous-enseigne&#34;&gt;Ce que Big O nous enseigne&lt;/h2&gt;

&lt;p&gt;La notation Big O permet d&amp;rsquo;exprimer sous forme mathématique la complexité en temps d&amp;rsquo;exécution et en occupation mémoire d&amp;rsquo;un algorithme en fonction des variables qu&amp;rsquo;il utilise.&lt;/p&gt;

&lt;p&gt;A titre d&amp;rsquo;exemple, la fonction ci-dessous a un runtime &lt;code&gt;O(n)&lt;/code&gt;, où &lt;code&gt;n&lt;/code&gt; représente la taille de &lt;code&gt;myList&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func printEachElementsInTheList(myList []string) {
    for _, v := range myList {
        fmt.Println(v)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pourquoi ? Car le nombre d&amp;rsquo;opérations exécutées dans la fonction dépend de &lt;code&gt;n&lt;/code&gt;, si &lt;code&gt;n&lt;/code&gt; vaut 1, &lt;code&gt;fmt.Println(v)&lt;/code&gt; sera exécutée 1 fois.
Si &lt;code&gt;n&lt;/code&gt; vaut 2, l&amp;rsquo;opération sera exécutée 2 fois, et ainsi de suite.&lt;/p&gt;

&lt;p&gt;Sur une machine donnée, si &lt;code&gt;fmt.Println(v)&lt;/code&gt; prend en moyenne &lt;code&gt;5ns&lt;/code&gt; pour être exécutée, on peut estimer le temps total d&amp;rsquo;exécution
de la fonction en fonction de &lt;code&gt;n&lt;/code&gt; de cette façon : &lt;code&gt;T(ns) = 5n&lt;/code&gt;.
A noter que la notation Big O n&amp;rsquo;est utilisée que pour une évaluation de l&amp;rsquo;asymptote lorsque &lt;code&gt;n&lt;/code&gt; tend vers l&amp;rsquo;infini.
Autrement dit, à quelle allure &lt;code&gt;T(ns)&lt;/code&gt; change lorsque &lt;code&gt;n&lt;/code&gt; change.
C&amp;rsquo;est pour cette raison que les constantes (comme le facteur 5 dans l&amp;rsquo;exemple) sont ignorées.
Mathématiquement parlant, quelque soit la valeur de &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;F(a * n)&lt;/code&gt; aura la même allure.&lt;/p&gt;

&lt;p&gt;Dans cet exemple, le runtime est linéaire, mais il existe d&amp;rsquo;autres runtimes, &lt;code&gt;O(log(n))&lt;/code&gt;, &lt;code&gt;O(n^2)&lt;/code&gt;, &amp;hellip;
Ou encore avec plusieurs variables &lt;code&gt;O(n + m)&lt;/code&gt;, &lt;code&gt;O(n * m)&lt;/code&gt;, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Le principe est simple, mais le sujet est vaste et certains problèmes sont piquants.
Pour creuser le sujet, il existe de nombreuses ressources, en voici quelques unes que j&amp;rsquo;ai utilisées :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codility.com&#34;&gt;https://codility.com&lt;/a&gt; : site internet comportant des exercices et des challenges pour monter en compétences sur plusieurs sujets de programmation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.fr/Cracking-Coding-Interview-6th-Programming/dp/0984782850/ref=dp_ob_image_bk&#34;&gt;Cracking the coding interview&lt;/a&gt; de Gayle Laakmann Mcdowell : le livre est écrit dans le but de préparer le codeur à des entretiens d&amp;rsquo;embauche high level, mais comporte en introduction un chapitre détaillé sur la notation Big O, très bien écrit et parfait pour démarrer sur le sujet.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/9332518645/ref=oh_aui_detailpage_o01_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;Algorithm design&lt;/a&gt; de Jon Kleinberg et Eva Tardos : pour continuer de façon plus poussée sur le sujet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comment-s-en-convaincre&#34;&gt;Comment s&amp;rsquo;en convaincre&lt;/h2&gt;

&lt;p&gt;Bien, passons aux choses marrantes !&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;écris beaucoup de code en Go en ce moment, une chose intéressante avec Go est qu&amp;rsquo;il est très facile de réaliser des benchmarks,
un type de test particulier destiné à mesurer le temps d&amp;rsquo;exécution d&amp;rsquo;une fonction.&lt;/p&gt;

&lt;p&gt;Je me suis servi de cet outillage pour comparer l&amp;rsquo;allure du runtime avec des valeurs mesurées et l&amp;rsquo;allure du runtime théorique pour une sélection de fonctions.&lt;/p&gt;

&lt;h3 id=&#34;sumandproduct&#34;&gt;SumAndProduct&lt;/h3&gt;

&lt;p&gt;La fonction suivante a un runtime de &lt;code&gt;O(n)&lt;/code&gt; où &lt;code&gt;n&lt;/code&gt; représente la taille du tableau &lt;code&gt;array&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func SumAndProduct(array []int) {
    sum := 0
    product := 1
    for i := 0; i &amp;lt; len(array); i++ {
        sum += array[i]
    }
    for i := 0; i &amp;lt; len(array); i++ {
        product *= array[i]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ne vous laissez pas induire en erreur par la deuxième boucle for, il s&amp;rsquo;agit bien d&amp;rsquo;un runtime de &lt;code&gt;O(n)&lt;/code&gt;
La fonction comporte deux boucles sur &lt;code&gt;n&lt;/code&gt; éléments, le nombre total d&amp;rsquo;opérations dans les deux boucles est 2,
le nombre d&amp;rsquo;opérations exécutées par la fonction s&amp;rsquo;exprime par : &lt;code&gt;O(2 * n + 2)&lt;/code&gt; (la constante +2 à la fin correspond
aux deux opérations d&amp;rsquo;initialisation des variables &lt;code&gt;sum&lt;/code&gt; et &lt;code&gt;product&lt;/code&gt;).
Soit O(a * n + b) qui a la même allure linéaire que O(n).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/aubm/Big-O-matters/blob/master/sum_and_product_test.go&#34;&gt;Ce test&lt;/a&gt; permet de mesure le temps moyen d&amp;rsquo;exécution de la fonction pour des tableaux &lt;code&gt;array&lt;/code&gt; de tailles variables 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000 et 5000.&lt;/p&gt;

&lt;p&gt;Voilà le résultat d&amp;rsquo;un test :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkSumAndProduct10              100000000        16.9 ns/op
BenchmarkSumAndProduct20              50000000        35.2 ns/op
BenchmarkSumAndProduct30              30000000        45.7 ns/op
BenchmarkSumAndProduct40              20000000        59.9 ns/op
BenchmarkSumAndProduct50              20000000        88.5 ns/op
BenchmarkSumAndProduct60              20000000        98.8 ns/op
BenchmarkSumAndProduct70              20000000       108 ns/op
BenchmarkSumAndProduct80              100000000       114 ns/op
BenchmarkSumAndProduct90              100000000       127 ns/op
BenchmarkSumAndProduct100             100000000       133 ns/op
BenchmarkSumAndProduct200             100000000       220 ns/op
BenchmarkSumAndProduct300              50000000       310 ns/op
BenchmarkSumAndProduct400              30000000       392 ns/op
BenchmarkSumAndProduct500              30000000       475 ns/op
BenchmarkSumAndProduct600              30000000       590 ns/op
BenchmarkSumAndProduct700              20000000       716 ns/op
BenchmarkSumAndProduct800              20000000       774 ns/op
BenchmarkSumAndProduct900              20000000       856 ns/op
BenchmarkSumAndProduct1000             20000000       916 ns/op
BenchmarkSumAndProduct2000             100000000      1812 ns/op
BenchmarkSumAndProduct3000             100000000      2740 ns/op
BenchmarkSumAndProduct4000              50000000      3535 ns/op
BenchmarkSumAndProduct5000              30000000      4762 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La taille du tableau est renseignée dans le nom du test, et le temps moyen d&amp;rsquo;exécution de la fonction associé à cette valeur est exprimé
dans la colonne de droite en ns/op.&lt;/p&gt;

&lt;p&gt;Quelques sortilèges de magie noire plus tard, voici ces données représentées dans Excel sur la courbe de gauche, à côté de l&amp;rsquo;allure théorique représentée à droite :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/big-o/sum-and-product.png&#34; alt=&#34;SumAndProduct&#34; class=&#34;img-responsive&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;fibonacci&#34;&gt;Fibonacci&lt;/h3&gt;

&lt;p&gt;Voici une fonction donnant la valeur du n-ième membre de la &lt;a href=&#34;https://fr.wikipedia.org/wiki/Suite_de_Fibonacci&#34;&gt;suite de Fibonacci&lt;/a&gt;, le runtime de la fonction est &lt;code&gt;O(2^n)&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Fib(n int) int {
    if n &amp;lt;= 0 {
        return 0
    } else if n == 1 {
        return 1
    }
    return Fib(n-1) + Fib(n-2)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le résultat des tests :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkFib1     500000000         3.57 ns/op
BenchmarkFib2     100000000        12.3 ns/op
BenchmarkFib3     100000000        18.7 ns/op
BenchmarkFib4     500000000        33.6 ns/op
BenchmarkFib5     30000000        54.3 ns/op
BenchmarkFib6     20000000        87.5 ns/op
BenchmarkFib7     100000000       140 ns/op
BenchmarkFib8      500000000       233 ns/op
BenchmarkFib9      500000000       379 ns/op
BenchmarkFib10     20000000       609 ns/op
BenchmarkFib11     100000000      1006 ns/op
BenchmarkFib12     100000000      1645 ns/op
BenchmarkFib13     100000000      2575 ns/op
BenchmarkFib14      500000000      4185 ns/op
BenchmarkFib15      20000000      6870 ns/op
BenchmarkFib16      20000000     10919 ns/op
BenchmarkFib17      100000000     17856 ns/op
BenchmarkFib18       500000000     29713 ns/op
BenchmarkFib19       30000000     45921 ns/op
BenchmarkFib20       20000000     75167 ns/op
BenchmarkFib21       100000000    117280 ns/op
BenchmarkFib22       100000000    194432 ns/op
BenchmarkFib23        500000000    316511 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et la représentation graphique :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/big-o/fib.png&#34; alt=&#34;Fib&#34; class=&#34;img-responsive&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;powersof2&#34;&gt;PowersOf2&lt;/h3&gt;

&lt;p&gt;Une dernière pour la route, celle-ci affiche l&amp;rsquo;ensemble des puissances de 2 inférieures ou égales à &lt;code&gt;n&lt;/code&gt;, le runtime pour cette fonction est &lt;code&gt;O(log(n))&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func PowersOf2(n int) int {
    if n &amp;lt; 1 {
        return 0
    } else if n == 1 {
        print(1)
        return 1
    } else {
        prev := PowersOf2(n / 2)
        curr := prev * 2
        print(curr)
        return curr
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le résultat des tests :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkPowersOf2_1              100000000        16.3 ns/op
BenchmarkPowersOf2_2              500000000        33.6 ns/op
BenchmarkPowersOf2_3              30000000        34.2 ns/op
BenchmarkPowersOf2_4              30000000        49.2 ns/op
BenchmarkPowersOf2_5              30000000        49.6 ns/op
BenchmarkPowersOf2_6              30000000        47.3 ns/op
BenchmarkPowersOf2_7              30000000        49.9 ns/op
BenchmarkPowersOf2_8              20000000        66.7 ns/op
BenchmarkPowersOf2_9              20000000        68.9 ns/op
BenchmarkPowersOf2_10             20000000        72.1 ns/op
BenchmarkPowersOf2_20             20000000        84.9 ns/op
BenchmarkPowersOf2_30             20000000        84.8 ns/op
BenchmarkPowersOf2_40             20000000       112 ns/op
BenchmarkPowersOf2_50             20000000       121 ns/op
BenchmarkPowersOf2_60             100000000       128 ns/op
BenchmarkPowersOf2_70             100000000       127 ns/op
BenchmarkPowersOf2_80             100000000       124 ns/op
BenchmarkPowersOf2_90             100000000       137 ns/op
BenchmarkPowersOf2_100            100000000       119 ns/op
BenchmarkPowersOf2_200            100000000       141 ns/op
BenchmarkPowersOf2_300            100000000       155 ns/op
BenchmarkPowersOf2_400            100000000       164 ns/op
BenchmarkPowersOf2_500            100000000       160 ns/op
BenchmarkPowersOf2_600            100000000       177 ns/op
BenchmarkPowersOf2_700            100000000       179 ns/op
BenchmarkPowersOf2_800            100000000       179 ns/op
BenchmarkPowersOf2_900            100000000       176 ns/op
BenchmarkPowersOf2_1000           100000000       176 ns/op
BenchmarkPowersOf2_2000           100000000       194 ns/op
BenchmarkPowersOf2_3000           100000000       217 ns/op
BenchmarkPowersOf2_4000           100000000       217 ns/op
BenchmarkPowersOf2_5000           100000000       233 ns/op
BenchmarkPowersOf2_6000            500000000       228 ns/op
BenchmarkPowersOf2_7000            500000000       238 ns/op
BenchmarkPowersOf2_8000            500000000       236 ns/op
BenchmarkPowersOf2_9000            500000000       256 ns/op
BenchmarkPowersOf2_10000           500000000       257 ns/op
BenchmarkPowersOf2_20000           500000000       288 ns/op
BenchmarkPowersOf2_30000           500000000       286 ns/op
BenchmarkPowersOf2_40000           500000000       314 ns/op
BenchmarkPowersOf2_50000           500000000       311 ns/op
BenchmarkPowersOf2_60000           500000000       313 ns/op
BenchmarkPowersOf2_70000           500000000       339 ns/op
BenchmarkPowersOf2_80000           500000000       337 ns/op
BenchmarkPowersOf2_90000           500000000       339 ns/op
BenchmarkPowersOf2_100000          500000000       347 ns/op
BenchmarkPowersOf2_200000          500000000       375 ns/op
BenchmarkPowersOf2_300000          30000000       387 ns/op
BenchmarkPowersOf2_400000          30000000       382 ns/op
BenchmarkPowersOf2_500000          500000000       398 ns/op
BenchmarkPowersOf2_600000          30000000       426 ns/op
BenchmarkPowersOf2_700000          30000000       427 ns/op
BenchmarkPowersOf2_800000          30000000       436 ns/op
BenchmarkPowersOf2_900000          30000000       425 ns/op
BenchmarkPowersOf2_1000000         30000000       412 ns/op
BenchmarkPowersOf2_2000000         30000000       453 ns/op
BenchmarkPowersOf2_3000000         30000000       477 ns/op
BenchmarkPowersOf2_4000000         30000000       492 ns/op
BenchmarkPowersOf2_5000000         30000000       499 ns/op
BenchmarkPowersOf2_6000000         30000000       499 ns/op
BenchmarkPowersOf2_7000000         30000000       507 ns/op
BenchmarkPowersOf2_8000000         30000000       496 ns/op
BenchmarkPowersOf2_9000000         30000000       539 ns/op
BenchmarkPowersOf2_10000000        30000000       531 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et la représentation graphique :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/big-o/powers-of-2.png&#34; alt=&#34;PowersOf2&#34; class=&#34;img-responsive&#34;&gt;&lt;/p&gt;

&lt;p&gt;Un peu bancale cette dernière, mais l&amp;rsquo;intention est là.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comment vous faire une idée de l&#39;impact de la latence de votre téléviseur dans vos sessions de jeux vidéos</title>
      <link>http://www.aubm.net/blog/comment-vous-faire-une-idee-d-l-impact-de-la-latence-de-votre-televiseur-dans-vos-sessions-de-jeux-videos/</link>
      <pubDate>Fri, 11 Nov 2016 16:53:03 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/comment-vous-faire-une-idee-d-l-impact-de-la-latence-de-votre-televiseur-dans-vos-sessions-de-jeux-videos/</guid>
      <description>&lt;p&gt;A l&amp;rsquo;approche des fêtes de fin d&amp;rsquo;année j&amp;rsquo;envisage de profiter des soldes pour remplacer la télévision de mon salon.
Ce ne sont pas les choix qui manquent entre les LCD, OLED, rétroprojecteurs 4K, pas 4K, ou je ne sais quelle autre fantaisie &amp;hellip;&lt;/p&gt;

&lt;p&gt;Cette initiative étant principalement motivée par l&amp;rsquo;envie de profiter d&amp;rsquo;un support plus grand, nombre de joueurs
aguerris et autres grands manitous du gaming de mon entourage n&amp;rsquo;ont pas manqué de me mettre en garde :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tu ne feras point l&amp;rsquo;acquisition d&amp;rsquo;une dalle ne disposant pas d&amp;rsquo;une latence satisfaisante&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Soit &amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;50ms, cela représente une éternité sur un FPS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://www.reactiongifs.com/wp-content/uploads/2013/05/dr-evil-right.gif&#34; alt=&#34;Right ...&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bon, j&amp;rsquo;ai beau être de bonne foi, j&amp;rsquo;avoue avoir un peu de mal à me représenter comment un temps si court peut à ce point changer la donne.&lt;/p&gt;

&lt;p&gt;Pour m&amp;rsquo;en convaincre, je décide donc de construire un mini-jeu pour l&amp;rsquo;expérience.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;idée est de détruire des blocs en mouvement sur l&amp;rsquo;écran, en cliquant dessus avec la souris.
Lorsqu&amp;rsquo;un clic est déclenché sur la zone de jeu à un instant &lt;code&gt;t0&lt;/code&gt;, un traitement système va se déclencher à &lt;code&gt;t0 + n&lt;/code&gt;,
&lt;code&gt;n&lt;/code&gt; étant le nombre de milisecondes écoulées, soit la latence.
Ce traitement va inspecter la zone de jeu à l&amp;rsquo;emplacement du clic de l&amp;rsquo;utilisateur, et déterminer si un bloc doit être détruit à cet emplacement.&lt;/p&gt;

&lt;p&gt;Si l&amp;rsquo;utilisateur vise correctement et que la latence est nulle, alors le bloc sera détruit.
Si l&amp;rsquo;utilisateur vise correctement mais que la latence est suffisamment élevée pour que le bloc en mouvement se soit fait la malle avant que le système
n&amp;rsquo;ait pu réagir à temps, le jeu considérera alors que le joueur n&amp;rsquo;a tout simplement pas été assez rapide.
Voilà qui pourrait bien être des plus embêtant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/9i4cIY1wZMTDy/giphy.gif&#34; alt=&#34;Geek rage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Je me suis dit que cela pourrait être amusant de partager ce petit mini-jeu, je vous laisse donc vous faire votre propre impression à cette adresse : &lt;a href=&#34;https://aubm.github.io/lag-shooter/&#34;&gt;https://aubm.github.io/lag-shooter/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A titre d&amp;rsquo;information, la latence est paramétrable en bas à gauche, juste à côté du pourcentage de réussite des clics !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing d&#39;une app golang sur AppEngine : une manière de gérer l&#39;erreur NewContext passed an unknown http.Request</title>
      <link>http://www.aubm.net/blog/testing-d-une-app-golang-sur-appengine-une-maniere-de-gerer-l-erreur-newcontext-passed-an-unknown-http-request/</link>
      <pubDate>Thu, 13 Oct 2016 19:38:59 +0200</pubDate>
      
      <guid>http://www.aubm.net/blog/testing-d-une-app-golang-sur-appengine-une-maniere-de-gerer-l-erreur-newcontext-passed-an-unknown-http-request/</guid>
      <description>

&lt;h2 id=&#34;tldr&#34;&gt;TLDR;&lt;/h2&gt;

&lt;p&gt;La solution sur Github : &lt;a href=&#34;https://github.com/aubm/my-test-app&#34;&gt;https://github.com/aubm/my-test-app&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mise-en-évidence-du-problème&#34;&gt;Mise en évidence du problème&lt;/h2&gt;

&lt;p&gt;Déployer du go sur AppEngine, c&amp;rsquo;est cool, se retrouver perplexe lors de l&amp;rsquo;éxecution des tests face à cette erreur : &lt;code&gt;panic: appengine: NewContext passed an unknown http.Request&lt;/code&gt;, c&amp;rsquo;est moins cool.&lt;/p&gt;

&lt;p&gt;Trainer ces objets &lt;code&gt;context&lt;/code&gt; un peu partout dans les couches de l&amp;rsquo;application n&amp;rsquo;est pas un aspect très agréable du développement d&amp;rsquo;une appli web en go.
Sur AppEngine, c&amp;rsquo;est d&amp;rsquo;autant plus problématique que le contexte doit être créé à partir d&amp;rsquo;une requête dont AppEngine a connaissance.&lt;/p&gt;

&lt;p&gt;Dans le cas d&amp;rsquo;un test, une requête passée en paramètre d&amp;rsquo;un http handler est généralement créée programmatiquement à l&amp;rsquo;aide de quelque chose comme &lt;code&gt;req, _ := http.NewRequest(&amp;quot;GET&amp;quot;, &amp;quot;/&amp;quot;, nil)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Utilisez cette requête pour créer un contexte avec &lt;code&gt;ctx := appengine.NewContext(r)&lt;/code&gt; et votre application paniquera lamentablement.&lt;/p&gt;

&lt;p&gt;Juste pour illustrer, voici un exemple de code que nous voudrions tester :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package app

import (
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;net/http&amp;quot;

    &amp;quot;golang.org/x/net/context&amp;quot;
    &amp;quot;google.golang.org/appengine&amp;quot;
)

func init() {
    booksHandlers := &amp;amp;BooksHandlers{}

    http.HandleFunc(&amp;quot;/books&amp;quot;, booksHandlers.GetBooks)
}

type BooksHandlers struct {
    BooksService interface {
        FindAll(ctx context.Context) []Book
    }
}

func (h *BooksHandlers) GetBooks(w http.ResponseWriter, r *http.Request) {
    ctx := appengine.NewContext(r)

    books := h.BooksService.FindAll(ctx)

    w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
    if err := json.NewEncoder(w).Encode(books); err != nil {
        http.Error(w, &amp;quot;An error occured when encoding JSON&amp;quot;, 500)
    }
}

type Book struct {
    Title  string `json:&amp;quot;title&amp;quot;`
    Author string `json:&amp;quot;author&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le contenu du fichier de test :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package app

import (
    &amp;quot;net/http&amp;quot;
    &amp;quot;net/http/httptest&amp;quot;
    &amp;quot;testing&amp;quot;

    &amp;quot;golang.org/x/net/context&amp;quot;
)

func TestGetBooks(t *testing.T) {
    w := httptest.NewRecorder()
    r, _ := http.NewRequest(&amp;quot;GET&amp;quot;, &amp;quot;/&amp;quot;, nil)

    mockBooksService := &amp;amp;MockBooksService{}
    h := BooksHandlers{BooksService: mockBooksService}

    h.GetBooks(w, r)

    body := w.Body.String()
    expected := `[{&amp;quot;title&amp;quot;:&amp;quot;The Lord of the Rings&amp;quot;,&amp;quot;author&amp;quot;:&amp;quot;J.J.R. Tolkien&amp;quot;},{&amp;quot;title&amp;quot;:&amp;quot;Harry Potter&amp;quot;,&amp;quot;author&amp;quot;:&amp;quot;J.K. Rolling&amp;quot;}]
`

    if body != expected {
        t.Errorf(&amp;quot;Expected %v, got %v&amp;quot;, expected, body)
    }
}

type MockBooksService struct{}

func (m *MockBooksService) FindAll(ctx context.Context) []Book {
    return []Book{
        {Title: &amp;quot;The Lord of the Rings&amp;quot;, Author: &amp;quot;J.J.R. Tolkien&amp;quot;},
        {Title: &amp;quot;Harry Potter&amp;quot;, Author: &amp;quot;J.K. Rolling&amp;quot;},
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et un extrait de la sortie standard :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2016/10/13 20:05:10 appengine: NewContext passed an unknown http.Request
--- FAIL: TestGetBooks (0.00s)
panic: appengine: NewContext passed an unknown http.Request [recovered]
    panic: appengine: NewContext passed an unknown http.Request

goroutine 5 [running]:
panic(0x25f120, 0xc4201001b0)
    /usr/local/go/src/runtime/panic.go:500 +0x1a1
testing.tRunner.func1(0xc420090180)
    /usr/local/go/src/testing/testing.go:579 +0x25d
panic(0x25f120, 0xc4201001b0)
    /usr/local/go/src/runtime/panic.go:458 +0x243
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sur les forums, plusieurs solutions sont évoquées pour contourner le problème, ceci dit aucune ne m&amp;rsquo;a réellement séduit.
Je vous présente maintenant une solution que je trouve suffisamment élégante pour retrouver le sommeil.&lt;/p&gt;

&lt;h2 id=&#34;une-solution&#34;&gt;Une solution&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;idée est d&amp;rsquo;encapsuler la création du contexte dans un service, que l&amp;rsquo;on sera en capacité de remplacer par un mock pour les tests.&lt;/p&gt;

&lt;p&gt;La définition du type &lt;code&gt;BooksHandlers&lt;/code&gt; ressemble maintenant à ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type BooksHandlers struct {
    BooksService interface {
        FindAll(ctx context.Context) []Book
    }
    Context interface {
        Get(r *http.Request) context.Context
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans la méthode &lt;code&gt;GetBooks&lt;/code&gt;, le contexte est maintenant créé de façon :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ctx := h.Context.Get(r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;implémentation utilisée pour &lt;code&gt;Context&lt;/code&gt; est très simple :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type ContextProvider struct{}

func (p *ContextProvider) Get(r *http.Request) context.Context {
    return appengine.NewContext(r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et il en va de même pour sa cousine mockée :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type MockContextProvider struct{}

func (m *MockContextProvider) Get(r *http.Request) context.Context {
    return context.Background()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tous les voyants sont maintenant au vert.
Voici le lien vers le code sur Github : &lt;a href=&#34;https://github.com/aubm/my-test-app&#34;&gt;https://github.com/aubm/my-test-app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A la prochaine !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>L&#39;injection de dépendances à l&#39;esprit dans vos applications Golang</title>
      <link>http://www.aubm.net/blog/l-injection-de-dependances-a-l-esprit-dans-vos-applications-golang/</link>
      <pubDate>Mon, 09 May 2016 18:45:44 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/l-injection-de-dependances-a-l-esprit-dans-vos-applications-golang/</guid>
      <description>

&lt;p&gt;L&amp;rsquo;injection de dépendances est utilisée pour séparer les responsabilités entre les briques d&amp;rsquo;une application.
Ce pattern couplé à une stratégie d&amp;rsquo;abstraction utilisant efficacement des interfaces permet également
de simplifier l&amp;rsquo;écriture des tests unitaires. L&amp;rsquo;intérêt étant de pouvoir remplacer une implémentation par une autre, supprimant
ainsi les potentiels effets de bords (requête en base de données, écriture sur le disque, requête HTTP, etc &amp;hellip;).&lt;/p&gt;

&lt;p&gt;Dans cet article, je vais vous présenter une approche permettant d&amp;rsquo;appliquer ces principes à du code Go de façon simple et pratique.&lt;/p&gt;

&lt;h2 id=&#34;un-problème&#34;&gt;Un problème&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;apporche la plus directe pour récupérer une liste d&amp;rsquo;articles en base de données et les servir au format JSON est la suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;database/sql&amp;quot;
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;

    _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot;
)

type Post struct {
    Title   string `json:&amp;quot;title&amp;quot;`
    Content string `json:&amp;quot;content&amp;quot;`
}

func main() {
    http.HandleFunc(&amp;quot;/posts&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
        db, err := sql.Open(&amp;quot;mysql&amp;quot;, &amp;quot;root:root@/my_posts&amp;quot;)
        defer db.Close()
        rows, err := db.Query(&amp;quot;SELECT title, content FROM posts&amp;quot;)
        if err != nil {
            http.Error(w, &amp;quot;Internal server error&amp;quot;, 500)
            return
        }
        defer rows.Close()
        posts := []Post{}
        for rows.Next() {
            p := Post{}
            err := rows.Scan(&amp;amp;p.Title, &amp;amp;p.Content)
            if err != nil {
                http.Error(w, &amp;quot;Internal server error&amp;quot;, 500)
                return
            }
            posts = append(posts, p)
        }
        b, err := json.Marshal(posts)
        if err != nil {
            http.Error(w, &amp;quot;Internal server error&amp;quot;, 500)
            return
        }
        w.Write(b)
        w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
    })
    fmt.Println(&amp;quot;Application started on port 8080&amp;quot;)
    http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le code est facile à comprendre et tient en moins de 50 lignes, cependant mis à l&amp;rsquo;échelle d&amp;rsquo;une application du monde réel,
il présente des défauts évidents :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il est impossible de réutiliser la moindre portion de code&lt;/li&gt;
&lt;li&gt;les différents rôles sont étroitement liés, les effets de bord de potentielles modifications dans la récupération des données
sur la construction de la réponse HTTP sont difficiles à contrôler&lt;/li&gt;
&lt;li&gt;il ne permet pas d&amp;rsquo;écrire de tests unitaires efficacement&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;une-solution&#34;&gt;Une solution&lt;/h2&gt;

&lt;p&gt;Construire l&amp;rsquo;application avec l&amp;rsquo;injection de dépendances à l&amp;rsquo;esprit permet d&amp;rsquo;apporter une solution à ces différents problèmes.
Dans cette nouvelle approche, plusieurs structures sont identifiées.&lt;/p&gt;

&lt;h3 id=&#34;un-serializer-json&#34;&gt;Un serializer JSON&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;type DefaultEncoder struct{}

func (de *DefaultEncoder) ToJSON(w http.ResponseWriter, src interface{}) {
    b, err := json.Marshal(src)
    if err != nil {
        http.Error(w, &amp;quot;Internal server error&amp;quot;, 500)
        return
    }
    w.Write(b)
    w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette structure expose une méthode &lt;code&gt;ToJSON&lt;/code&gt; qui écrit la résultat sérialisé en JSON du second paramètre &lt;code&gt;src interface{}&lt;/code&gt;
dans le premier &lt;code&gt;w http.ResponseWriter&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;un-gestionnaire-contenant-le-code-métier-non-relatif-à-la-couche-http&#34;&gt;Un gestionnaire contenant le code métier non relatif à la couche HTTP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;type PostsManager struct {
    DB *sql.DB
}

func (pm *PostsManager) FindPosts() ([]Post, error) {
    rows, err := pm.DB.Query(&amp;quot;SELECT title, content FROM posts&amp;quot;)
    if err != nil {
        return nil, err
    }
    defer rows.Close()
    posts := []Post{}
    for rows.Next() {
        p := Post{}
        err := rows.Scan(&amp;amp;p.Title, &amp;amp;p.Content)
        if err != nil {
            return nil, err
        }
        posts = append(posts, p)
    }
    return posts, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette structure expose une méthode &lt;code&gt;FindPosts&lt;/code&gt; qui founit en retour une liste de posts.
Il est nécessaire de fournir un pointeur vers une instance de &lt;code&gt;sql.DB&lt;/code&gt; à la construction.
A noter que la construction de ce paramètre n&amp;rsquo;est pas directement pris en charge par &lt;code&gt;PostsManager&lt;/code&gt;, ce qui est offre
une certaine souplesse pour ce qui est de l&amp;rsquo;écriture des tests. En effet il ne sera pas nécessaire de déployer une instance
de MySQL, enregistrer &lt;a href=&#34;https://godoc.org/github.com/DATA-DOG/go-sqlmock&#34;&gt;un driver de mocks&lt;/a&gt; sera bien plus pratique.&lt;/p&gt;

&lt;h3 id=&#34;une-interface-http&#34;&gt;Une interface HTTP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;type PostsHandlers struct {
    Manager interface {
        FindPosts() ([]Post, error)
    }
    Encoder interface {
        ToJSON(w http.ResponseWriter, src interface{})
    }
}

func (ph *PostsHandlers) GetPosts(w http.ResponseWriter, r *http.Request) {
    posts, err := ph.Manager.FindPosts()
    if err != nil {
        http.Error(w, &amp;quot;internal server error&amp;quot;, 500)
        return
    }
    ph.Encoder.ToJSON(w, posts)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette structure expose une méthode &lt;code&gt;GetPosts&lt;/code&gt; capable de servir une liste de posts traduite en JSON via une interface HTTP.
Il est intéressant de noter que cette structure possède deux dépendances définies comme étant des interfaces.
Bien évidemment, &lt;code&gt;DefaultEncoder&lt;/code&gt; et &lt;code&gt;PostsManager&lt;/code&gt; sont conçues de façon à satisfaire ces interfaces.
Encore une fois, outre la valeur apportée au regard du découplage du code, cela permet également de simplifier l&amp;rsquo;écriture des tests
en &lt;a href=&#34;https://github.com/stretchr/testify#mock-package&#34;&gt;fournissant des mocks&lt;/a&gt; à &lt;code&gt;PostsHandlers&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;l-assemblage-simplifié-grâce-à-facebookgo-inject&#34;&gt;L&amp;rsquo;assemblage simplifié grâce à facebookgo/inject&lt;/h3&gt;

&lt;p&gt;La fonction &lt;code&gt;main&lt;/code&gt; est maintenant ramenée à :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
    db, err := sql.Open(&amp;quot;mysql&amp;quot;, &amp;quot;root:root@/my_posts&amp;quot;)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    postsManager := &amp;amp;PostsManager{DB: db}
    encoder := &amp;amp;DefaultEncoder{}
    postsHandlers := &amp;amp;PostsHandlers{Manager: postsManager, Encoder: encoder}

    http.HandleFunc(&amp;quot;/posts&amp;quot;, postsHandlers.GetPosts)

    fmt.Println(&amp;quot;Application started on port 8080&amp;quot;)
    http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il apparaît que si la construction de l&amp;rsquo;arbre des dépendances est relativement simple dans ce cas, elle n&amp;rsquo;en reste pas moins peu pratique.
Dans des cas plus complexes, il peut être intéressant de considérer l&amp;rsquo;utilisation de &lt;a href=&#34;https://github.com/facebookgo/inject&#34;&gt;facebookgo/inject&lt;/a&gt;.
Il s&amp;rsquo;agit d&amp;rsquo;une librarie capable de résoudre automatiquement les dépendances d&amp;rsquo;une liste d&amp;rsquo;objets incomplets, au runtime et sans génération de code.&lt;/p&gt;

&lt;p&gt;La définition des structures, et la construction des objets ressemblent maintenant à ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type PostsHandlers struct {
    Manager interface {
        FindPosts() ([]Post, error)
    } `inject:&amp;quot;&amp;quot;`
    Encoder interface {
        ToJSON(w http.ResponseWriter, src interface{})
    } `inject:&amp;quot;&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;type PostsManager struct {
    DB *sql.DB `inject:&amp;quot;&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;type DefaultEncoder struct{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A noter : le tag &lt;code&gt;inject:&amp;quot;&amp;quot;&lt;/code&gt; sur les champs qu&amp;rsquo;&lt;code&gt;inject&lt;/code&gt; devra prendre en charge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var postsManager PostsManager
var encoder DefaultEncoder
var postsHandlers PostsHandlers

if err := inject.Populate(db, &amp;amp;postsHandlers, &amp;amp;encoder, &amp;amp;postsManager); err != nil {
    fmt.Fprintln(os.Stderr, err)
    os.Exit(1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le code complet &lt;a href=&#34;https://github.com/aubm/dependency-injection-by-example&#34;&gt;est disponible ici&lt;/a&gt; :).&lt;/p&gt;

&lt;p&gt;Et vous, quelle(s) solution(s) utilisez-vous pour découpler efficacement votre code Go ? :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aller plus loin avec Postman</title>
      <link>http://www.aubm.net/blog/aller-plus-loin-avec-postman/</link>
      <pubDate>Fri, 19 Feb 2016 21:47:28 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/aller-plus-loin-avec-postman/</guid>
      <description>

&lt;h2 id=&#34;présentation-rapide-de-postman&#34;&gt;Présentation rapide de Postman&lt;/h2&gt;

&lt;p&gt;Postman est &lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&#34;&gt;téléchargeable dans la magasin d&amp;rsquo;applications de Google Chrome&lt;/a&gt;.
Dans son utilisation la plus basique, il s&amp;rsquo;agit d&amp;rsquo;un outil permettant d&amp;rsquo;éxecuter des appels HTTP à un serveur pour en interpréter
la réponse en dehors de tout contexte métier.&lt;/p&gt;

&lt;p&gt;Pour commencer à comprendre la valeur ajoutée par rapport à Curl (au délà du côté user-friendly),
il faut s&amp;rsquo;attarder sur la sauvegarde des requêtes et des &lt;a href=&#34;https://www.getpostman.com/docs/responses&#34;&gt;snapshots de réponses&lt;/a&gt;
&lt;a href=&#34;https://www.getpostman.com/docs/collections&#34;&gt;dans des collections&lt;/a&gt;.
Il n&amp;rsquo;y a maintenant plus qu&amp;rsquo;à vous connecter avec votre compte Google et voilà l&amp;rsquo;ensemble de vos collections synchronisées entre tous vos postes.&lt;/p&gt;

&lt;p&gt;Postman est mon fidèle compagnon pour le développement d&amp;rsquo;API HTTP. Récemment, je me suis intéressé à plusieurs fonctionnalités spécifiques fournies par l&amp;rsquo;outil.
Dans cet article, je vais tâcher de présenter comment en tirer parti et jusqu&amp;rsquo;où Postman est capable de s&amp;rsquo;intégrer à votre workflow de développement.&lt;/p&gt;

&lt;h2 id=&#34;utiliser-des-variables&#34;&gt;Utiliser des variables&lt;/h2&gt;

&lt;p&gt;Imaginons une API permettant de CRUDer des chats (essentiel), arrive un point où la sauvegarde de &lt;code&gt;GET http://localhost:8080/api/cats&lt;/code&gt; s&amp;rsquo;impose.
Il faut cependant noter que cet appel ne pourra se jouer que dans un environnement local.
En ce qui concerne le jour où les chats partiront en production (probable), il sera alors nécessaire de modifier la requête avant de pouvoir la jouer,
probablement en quelque chose de la forme, &lt;code&gt;GET http://www.cats.com/api/cats&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Il est intéressant de noter que seul le host varie.
Le cas présenté ici introduit la nécessité de &lt;a href=&#34;https://www.getpostman.com/docs/environments&#34;&gt;configurer des environnements&lt;/a&gt;.
Un environnement contient un ensemble de clés/valeurs qui lui est propre.
Les clés sont définies de façon arbitraire, et il est possible de passer d&amp;rsquo;un environnement à un autre d&amp;rsquo;un simple clic.
Si bien que &lt;code&gt;GET http://{{domain}}/api/cats&lt;/code&gt; appelera &lt;code&gt;GET http://localhost:8080/api/cats&lt;/code&gt; en environnement local, et &lt;code&gt;GET http://www.cats.com/api/cats&lt;/code&gt; en production.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/postman_environnements.gif&#34; alt=&#34;Environnements Postman&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;automatiser-les-tests-sur-les-endpoints&#34;&gt;Automatiser les tests sur les endpoints&lt;/h2&gt;

&lt;p&gt;Dans le développement d&amp;rsquo;un site ou d&amp;rsquo;une appli web, le navigateur occupe un rôle central. Il apporte son ensemble d&amp;rsquo;outils de développement,
et est également l&amp;rsquo;environnement cible.
C&amp;rsquo;est pourquoi le développeur soumet régulièrement son application à des tests navigateur (automatisés ou non)
afin de vérifier qu&amp;rsquo;une fonctionnalité se comporte comme attendu.&lt;/p&gt;

&lt;p&gt;Dans le cas d&amp;rsquo;une API Rest, typiquement HTTP/JSON, un outil comme Postman permet plus facilement de valider le retour des différents endpoints.
Les choses commencent à devenir plus intéressantes lorsque l&amp;rsquo;on cherche à automatiser ces validations.
Dans le détail d&amp;rsquo;une requête, il est possible de fournir des fragments de code javascript à Postman. Le code ci-dessous s&amp;rsquo;insère dans l&amp;rsquo;onglet &amp;ldquo;Tests&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var jsonData = JSON.parse(responseBody);

tests[&amp;quot;Status code is 200&amp;quot;] = responseCode.code === 200;
tests[&amp;quot;Has 1 entry&amp;quot;] = jsonData.length === 1;
tests[&amp;quot;Assert name&amp;quot;] = jsonData[0].name === &amp;quot;Doctor Frankeinstein&amp;quot;;
tests[&amp;quot;Assert color&amp;quot;] = jsonData[0].color === &amp;quot;brown&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lancer l&amp;rsquo;appel après avoir enregistré ces lignes, Postman sera en mesure d&amp;rsquo;afficher le nombre d&amp;rsquo;assertions qui ont été validées.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/postman_tests_validation.png&#34; alt=&#34;Validation des assertions au lancement de la requête&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Le principe est simple : chaque nouvelle entrée du tableau &lt;code&gt;tests&lt;/code&gt; ajoute un nouveau test à la suite, la valeur associée à la clé doit être l&amp;rsquo;expression
d&amp;rsquo;un booléen.
Cette approche a l&amp;rsquo;avantage d&amp;rsquo;être très flexible, à souligner que des expressions plus élaborées sont permises.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(function() {
    var jsonData = JSON.parse(responseBody);
    var pass = jsonData.constructor.name === &#39;Array&#39; &amp;amp;&amp;amp; jsonData.length === 1 &amp;amp;&amp;amp;
        typeof(jsonData[0]) === &#39;object&#39;;
    var msg = pass ? &#39;Body is an array of one entry&#39; : &#39;Expect body to be an array of one entry, body = &#39; + responseBody;
    tests[msg] = pass;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette &lt;a href=&#34;http://blog.getpostman.com/2015/09/29/writing-a-behaviour-driven-api-testing-environment-within-postman/&#34;&gt;article&lt;/a&gt; décrit une solution
permettant d&amp;rsquo;écrire un environnement de BDD, avec une écriture des tests à la Jasmine, dans Postman.&lt;/p&gt;

&lt;p&gt;Il est possible de déclencher l&amp;rsquo;ensemble des requêtes HTTP enregistrées dans une collection,
et d&amp;rsquo;obtenir un rapport sur les tests qui ont été lancés pour chacune d&amp;rsquo;entre elles.
Il faut pour cela ouvrir le lanceur de tests en accédant au bouton Run du détail d&amp;rsquo;une collection, cf. l&amp;rsquo;image ci-dessous.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/postman-run-tests-button.jpg&#34; alt=&#34;Ouverture du lanceur de tests&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Le lanceur de tests s&amp;rsquo;ouvre, reste qu&amp;rsquo;à choisir une collection et démarrer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/postman_tests_suite.gif&#34; alt=&#34;Lancement d&#39;une suite de tests avec Postman&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;exécuter-les-tests-dans-un-build-travis-ci&#34;&gt;Exécuter les tests dans un build Travis CI&lt;/h2&gt;

&lt;p&gt;Conserver une fenêtre Postman ouverte pendant le développement de l&amp;rsquo;API peut être une solution, cependant
&lt;a href=&#34;http://blog.getpostman.com/2014/05/12/meet-newman-a-command-line-companion-for-postman/&#34;&gt;l&amp;rsquo;outil newman&lt;/a&gt; permet de lancer les tests depuis la ligne
de commande.&lt;/p&gt;

&lt;p&gt;Newman s&amp;rsquo;installe avec npm, NodeJS doit donc être installé sur la machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ new i -g newman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En fonction de la version de NodeJS et de l&amp;rsquo;environnement, il se peut que d&amp;rsquo;autres dépendances soient nécessaires pour l&amp;rsquo;installer.
Ces informations peuvent trouvées sur &lt;a href=&#34;https://github.com/postmanlabs/newman&#34;&gt;la page Github du projet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Postman permet d&amp;rsquo;exporter des collections et des environnements au format JSON. Ces fichiers sont nécessaires pour que newman ait connaissance
des tests à lancer.&lt;/p&gt;

&lt;p&gt;Cf. l&amp;rsquo;image ci-dessous pour savoir comment télécharger le fichier d&amp;rsquo;export d&amp;rsquo;une collection &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/export_postman_collection.jpg&#34; alt=&#34;Exporter une collection&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip; et d&amp;rsquo;un environnement &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/export_postman_environnement.jpg&#34; alt=&#34;Exporter un environnement&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Une fois la collection et l&amp;rsquo;environnement que l&amp;rsquo;on souhaite y attacher téléchargés (je les place habituellement dans le répertoire
du projet de façon à pouvoir les versionner à côté des sources), reste plus qu&amp;rsquo;à les référencer avec les options -c et -e de la commande newman.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/newman_output.png&#34; alt=&#34;STDOUT de la commande newman&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Passer par newman ouvre des portes, comme la possibilité d&amp;rsquo;intégrer l&amp;rsquo;exécution des tests dans un build &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;De nombreuses resources apportent des détails pour démarrer facilement avec Travis CI. L&amp;rsquo;utilise basique est simple, je suggère de commencer par
la lecture de &lt;a href=&#34;https://docs.travis-ci.com/user/getting-started/&#34;&gt;cette page de la documentation officielle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le projet exemple que j&amp;rsquo;évoque depuis le début de l&amp;rsquo;article est &lt;a href=&#34;https://github.com/aubm/Cats-API&#34;&gt;accessible sur Github&lt;/a&gt;, les logs du dernier
build &lt;a href=&#34;https://travis-ci.org/aubm/Cats-API&#34;&gt;Travis CI sont disponibles ici&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;utilisation de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; est ici anecdotique dans la mesure où Travis est cappable de fournir un environnement
comprenant une instance de MongoDB. Cela reste néanmoins intéressant dans la mesure où l&amp;rsquo;exécution des tests côté Travis CI se déroule
dans le même environnement que mon poste local.&lt;/p&gt;

&lt;p&gt;Voici le contenu du fichier &lt;code&gt;.travis.yml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo: required

language: go

services:
    - docker

go:
    - 1.5

env:
    - TRAVIS_NODE_VERSION=&amp;quot;0.12&amp;quot;

before_install:
    - rm -rf ~/.nvm &amp;amp;&amp;amp; git clone https://github.com/creationix/nvm.git ~/.nvm &amp;amp;&amp;amp; (cd ~/.nvm &amp;amp;&amp;amp; git checkout `git describe --abbrev=0 --tags`) &amp;amp;&amp;amp; source ~/.nvm/nvm.sh &amp;amp;&amp;amp; nvm install $TRAVIS_NODE_VERSION
    - npm i -g newman@1.3.0

script:
    - ./run-tests.sh

addons:
    hosts:
        - dockerhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parmi les points intéressants à relever :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Les commandes executées au &lt;code&gt;before_install&lt;/code&gt; permettent de dérouler le script principal dans un environnement où la version de NodeJS est maîtrisée.
Ceci est nécessaire pour garantir que la version 1.3.0 de newman installée juste après fonctionnera correctement. Plus de détails sur le gestionnaire
de versions de NodeJS utilisé peuvent être trouvés sur la &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;page Github du projet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Comme les tests vont être executés avec un environnement faisant référence à un domaine &lt;code&gt;dockerhost&lt;/code&gt;, lui même attaché
(dans le contexte du build Travis) à l&amp;rsquo;IP locale &lt;code&gt;127.0.0.1&lt;/code&gt;, la dernière partie du fichier ajoute l&amp;rsquo;entrée correspondante dans &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Enfin, les étapes du build sont contenues dans &lt;code&gt;run-tests.sh&lt;/code&gt; ci-dessous.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

docker build -t kendo5731/cats-api .
docker-compose up -d --force-recreate
docker ps -a
go test ./...
newman -c cats_api.json.postman_collection -e cats_api.postman_environment -x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce script va lancer les tests associés au packages Go de l&amp;rsquo;application (Go restant également anecdotique ici), puis jouer la suite de tests
Postman sur l&amp;rsquo;environnement Docker monté au préalable.&lt;/p&gt;

&lt;p&gt;Il est important de renseigner l&amp;rsquo;option &lt;code&gt;-x&lt;/code&gt; dans ce contexte. Cette option indique à newman de sortir avec un code différent de 0 en cas d&amp;rsquo;échec.
Si cette option est manquante, Travis CI ne marquera jamais le build comme ayant échoué, même en cas d&amp;rsquo;assertions non vérifiées.&lt;/p&gt;

&lt;h2 id=&#34;générer-de-la-documentation&#34;&gt;Générer de la documentation&lt;/h2&gt;

&lt;p&gt;Mettre à disposition une documentation détaillée pour une API est une tâche fastidieuse car il est nécessaire de garder cette
documentation synchronisée avec le code.&lt;/p&gt;

&lt;p&gt;S&amp;rsquo;il existe de nombreux outils capables de générer de la documentation à partir de commentaires formattés dans le code source, j&amp;rsquo;ai également songé
à utiliser mes collections Postman comme source.
Pratiquement tous les types d&amp;rsquo;item dans Postman (collections, dossiers, requêtes) peuvent être enrichis d&amp;rsquo;un nom et d&amp;rsquo;une description (dont le
contenu écrit en markdown est d&amp;rsquo;ailleurs directement parsé puis affiché dans l&amp;rsquo;interface de Postman).
Ces données étant accessibles dans le fichier JSON exporté, pourquoi ne pas les utiliser pour présenter une documentation mise en forme à la main ?
Libre à celui qui se chargera de la documentation, d&amp;rsquo;utiliser le moteur de template qui lui plaira.&lt;/p&gt;

&lt;p&gt;Pour ma part, j&amp;rsquo;ai choisi Go et mis à disposition un projet très récent permettant de générer la documentation via un outil en ligne de commande.
Cet outil est &lt;a href=&#34;https://github.com/aubm/postmanerator&#34;&gt;disponible sur mon compte Github&lt;/a&gt; et le projet est ouvert aux contributions :)&lt;/p&gt;

&lt;p&gt;Avant cela, mes recherches m&amp;rsquo;avaient rapidement &lt;a href=&#34;http://docman.launchrock.com/&#34;&gt;amené à cet outil&lt;/a&gt; qui semble plus mature à l&amp;rsquo;heure actuelle.&lt;/p&gt;

&lt;p&gt;En espérant que cet article sera utile, à la prochaine !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Du neuf sous le capot</title>
      <link>http://www.aubm.net/blog/du-neuf-sous-le-capot/</link>
      <pubDate>Tue, 03 Nov 2015 08:00:00 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/du-neuf-sous-le-capot/</guid>
      <description>&lt;p&gt;De retour sur mon blog après quelques mois de silence. Je n&amp;rsquo;ai cependant pas été inactif, ayant notamment pris du temps pour monter en compétence sur un certain nombre d&amp;rsquo;outils et langages.&lt;/p&gt;

&lt;p&gt;Golang est un de mes derniers investissements, si je n&amp;rsquo;ai pas encore de vrai retour, j&amp;rsquo;apprends, je passe du bon temps, et j&amp;rsquo;espère pouvoir en prendre prochainement pour pondre quelques articles sur le sujet.&lt;/p&gt;

&lt;p&gt;Plus récemment j&amp;rsquo;ai eu vent de &lt;a href=&#34;http://googlewebmastercentral.blogspot.fr/2015/10/deprecating-our-ajax-crawling-scheme.html&#34;&gt;l&amp;rsquo;abandon officiellement annoncé par Google de sa proposition sur le crowling de contenus AJAX&lt;/a&gt;.
Cette petite révolution m&amp;rsquo;a conduit à repenser entièrement le code de mon blog (celui là même). J&amp;rsquo;ai fait le choix d&amp;rsquo;utiliser AngularJS 1.x pour constuire la quasi-totalité des contenus, remisant au passage les quelques lignes de PHP qui servaient à fournir le contenu. Celui-ci n&amp;rsquo;a donc, Javascript mis à part, aucune valeur d&amp;rsquo;un point de vue SEO.&lt;/p&gt;

&lt;p&gt;Je l&amp;rsquo;avoue, cet article n&amp;rsquo;a quant à lui de valeur à mes yeux qu&amp;rsquo;en étant un prétexte pour constater le comportement de Google face à du nouveau contenu à indexer &amp;hellip; :) Je laisse cependant &lt;a href=&#34;https://github.com/aubm/aubm-website&#34;&gt;le lien vers les sources&lt;/a&gt;, si jamais votre coeur vous pousse à formuler quelques suggestions. A titre d&amp;rsquo;information, j&amp;rsquo;ai pris la liberté de baser le développement &lt;a href=&#34;https://github.com/davinkevin/angularjs-jspm-seed&#34;&gt;sur cette seed&lt;/a&gt; à laquelle j&amp;rsquo;ai l&amp;rsquo;opportunité de contribuer. Je vous invite à y jeter un oeil :)&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est tout pour moi, à très vite !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gardez le code explicite, court et modulaire</title>
      <link>http://www.aubm.net/blog/gardez-le-code-explicite-court-et-modulaire/</link>
      <pubDate>Wed, 20 May 2015 10:39:44 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/gardez-le-code-explicite-court-et-modulaire/</guid>
      <description>&lt;p&gt;Les contenus proposés sur la plateforme &lt;a href=&#34;http://www.lynda.com&#34; target=&#34;_blank&#34;&gt;Lynda.com&lt;/a&gt; par l&amp;rsquo;excellent &lt;a href=&#34;https://twitter.com/allardice&#34; target=&#34;_blank&#34;&gt;Simon Allardice&lt;/a&gt; sont peut-être les meilleurs que j&amp;rsquo;ai eu l&amp;rsquo;occasion de consulter.&lt;/p&gt;

&lt;p&gt;La pédagogie et la qualité des cours qu&amp;rsquo;il propose sont exemplaires, il s&amp;rsquo;agit pour moi d&amp;rsquo;une source d&amp;rsquo;inspiration. Beaucoup de notions et de valeurs qu&amp;rsquo;il s&amp;rsquo;efforce de transmettre représentent des aspects du métier de développeur auxquels je suis particulièrement attaché dans mon travail au quotidien.&lt;/p&gt;

&lt;p&gt;Un certain nombre de ces valeurs se retrouvent dans cette phrase. En partie inspirée par d&amp;rsquo;autres citations - je tenais à partager cette petite pensée du jour, avec toute la modestie bien sûr, et en anglais parce que ça passe plutôt bien ! :)&lt;/p&gt;

&lt;blockquote&gt;
Keep your code explicit, brief, and modular. Simplicity, pragmatism, and laziness are virtues, humility is a pre-requisite. Anyone who randomly picks up a file you wrote, should be able to understand what it does just by reading its name and the API it exposes.
&lt;/blockquote&gt;

&lt;p&gt;Merci à mon ami &lt;a href=&#34;https://twitter.com/MatMatVdg&#34; target=&#34;_blank&#34;&gt;Mathieu&lt;/a&gt; pour la relecture de mon english.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contrainte d&#39;unicité dans Symfony 2 avec Doctrine</title>
      <link>http://www.aubm.net/blog/contrainte-dunicite-dans-symfony-2-avec-doctrine/</link>
      <pubDate>Sun, 22 Mar 2015 15:55:31 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/contrainte-dunicite-dans-symfony-2-avec-doctrine/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Le &lt;a href=&#34;http://symfony.com/doc/current/book/validation.html&#34; target=&#34;_blank&#34;&gt;composant de validation de Symfony&lt;/a&gt; embarque des contraintes pré-définies (outre la possibilité de créer des contraintes personnalisées évidemment). Par ailleurs, l&amp;rsquo;intégration de Doctrine dans le framework full-stack fournit une autre contrainte prête à l&amp;rsquo;emploi : &lt;code&gt;UniqueEntity&lt;/code&gt;, qui permet de valider l&amp;rsquo;unicité dans une table de la base de données d&amp;rsquo;un ou plusieurs champs d&amp;rsquo;une entité.&lt;/p&gt;

&lt;p&gt;Cette contrainte est référencée dans la &lt;a href=&#34;http://symfony.com/doc/current/reference/constraints/UniqueEntity.html&#34; target=&#34;_blank&#34;&gt;documentation officielle de Symfony&lt;/a&gt;. Cet article se propose d&amp;rsquo;apporter quelques exemples et explications en complément de cette documentation. J&amp;rsquo;ajoute qu&amp;rsquo;à l&amp;rsquo;heure où j&amp;rsquo;écris, la version en français de la documentation ne semble pas être à jour. Elle est en effet incomplète en comparaison avec la version anglaise qui recense un plus grand nombre d&amp;rsquo;options.&lt;/p&gt;

&lt;h2 id=&#34;contexte&#34;&gt;Contexte&lt;/h2&gt;

&lt;p&gt;Les extraits de code de cet article sont issus de l&amp;rsquo;application exemple &lt;a href=&#34;https://github.com/aubm/Doctrine-Unique-Entity-Example-App&#34; target=&#34;_blank&#34;&gt;dont le code est disponible sur Github&lt;/a&gt;. Il s&amp;rsquo;agit d&amp;rsquo;une application réalisée à l&amp;rsquo;aide de Symfony 2.6 Standard Edition. La procédure à suivre pour installer l&amp;rsquo;application en local (si jamais vous souhaitez tester) est la suivante :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installer les pré-requis nécessaires : Git, PHP &amp;gt; 5.3, Composer, MySQL (ou un autre système de base de données compatible).&lt;/li&gt;
&lt;li&gt;Cloner le repo &lt;code&gt;git clone https://github.com/aubm/Doctrine-Unique-Entity-Example-App.git&lt;/code&gt; et se déplacer dans le répertoire du projet &lt;code&gt;cd Doctrine-Unique-Entity-Example-App/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Installer les dépendances avec Composer &lt;code&gt;composer install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modifier au besoin le nom et les paramètres de connexion à la base de données dans &lt;code&gt;app/config/parameters.yml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Créer la base de données, vous pouvez le faire avec l&amp;rsquo;outil cli &lt;code&gt;php app/console doctrine:database:create&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Générer le schéma &lt;code&gt;php app/console doctrine:schema:update --dump-sql --force&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Servir l&amp;rsquo;app &lt;code&gt;php app/console server:run&lt;/code&gt; (CTLR + C pour arrêter).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cette application est un système fictif de votes. Il est possible de lui adresser une requête HTTP qui ajoutera une entrée dans la table des votes. Un vote peut être positif ou négatif, cet état est représenté par la colonne &lt;code&gt;positive&lt;/code&gt; supposée recevoir une valeur &lt;code&gt;1&lt;/code&gt; ou &lt;code&gt;0&lt;/code&gt;. Afin d&amp;rsquo;illustrer l&amp;rsquo;utilisation de la contrainte &lt;code&gt;UniqueEntity&lt;/code&gt;, nous souhaitons ajouter une règle d&amp;rsquo;unicité sur l&amp;rsquo;IP entrante, afin de ne permettre à un client de n&amp;rsquo;enregistrer qu&amp;rsquo;un seul vote.&lt;/p&gt;

&lt;p&gt;Si vous avez installé l&amp;rsquo;application, vous pouvez lui adresser cette requête :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /votes
positive=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A défaut d&amp;rsquo;autre chose, &lt;a href=&#34;https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt; est un outil très pratique pour construire des requêtes HTTP et les envoyer via une interface web.&lt;/p&gt;

&lt;h2 id=&#34;utiliser-la-contrainte-uniqueentity&#34;&gt;Utiliser la contrainte UniqueEntity&lt;/h2&gt;

&lt;p&gt;Ce code est extrait du contrôleur responsable de l&amp;rsquo;enregistrement des votes :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function createAction(Request $request)
{
    $votes_manager = $this-&amp;gt;container-&amp;gt;get(&#39;ab.voting_system.votes_manager&#39;);
    $vote = $votes_manager-&amp;gt;newEntity([
            &#39;remote_addr&#39; =&amp;gt; $request-&amp;gt;server-&amp;gt;get(&#39;REMOTE_ADDR&#39;)
        ] + $request-&amp;gt;request-&amp;gt;all());
    $validation_errors = $votes_manager-&amp;gt;validateEntity($vote);
    if (count($validation_errors) == 0) {
        $votes_manager-&amp;gt;saveEntity($vote);
        return new JsonResponse(null, 201);
    } else {
        return new JsonResponse(null, 400);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;entité &lt;code&gt;Vote&lt;/code&gt; est une simple classe contenant les attributs suivants :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Vote
{
    private $id;
    private $positive;
    private $remote_addr;

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le mapping des attributs pour Doctrine est défini dans &lt;a href=&#34;https://github.com/aubm/Doctrine-Unique-Entity-Example-App/blob/master/src/AB/VotingSystemBundle/Resources/config/doctrine/Vote.orm.yml&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;src/AB/VotingSystemBundle/Resources/config/doctrine/Vote.orm.yml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il est possible de réduire légèrement le contrôleur en passant par une classe de formulaire. Pour cette exemple, j&amp;rsquo;ai fait le choix de valider manuellement l&amp;rsquo;entité afin de faciliter la compréhension du code (notamment pour des lecteurs moins familiers avec le framework).
L&amp;rsquo;ajout de la contrainte d&amp;rsquo;unicité sur &lt;code&gt;remote_addr&lt;/code&gt; peut être fait en yaml comme ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# src/AB/VotingSystem/Resources/config/validation.yml
AB\VotingSystemBundle\Entity\Vote:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
            fields: remote_addr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A ce niveau le contrôleur n&amp;rsquo;autorisera pas l&amp;rsquo;enregistrement d&amp;rsquo;une nouvelle ligne si la valeur contenue dans &lt;code&gt;remote_addr&lt;/code&gt; existe déjà dans la table. A noter que si notre application est servie derrière un proxy, il se peut qu&amp;rsquo;elle ne se comporte pas comme nous le souhaitons. Auquel cas il serait judicieux d&amp;rsquo;enregistrer également la valeur de l&amp;rsquo;en-tête &lt;code&gt;HTTP_X_FORWARDED_FOR&lt;/code&gt; afin de s&amp;rsquo;assurer de l&amp;rsquo;unicité de la paire &lt;code&gt;remote_addr&lt;/code&gt; + &lt;code&gt;http_x_forwarded_for&lt;/code&gt; dans la table.&lt;/p&gt;

&lt;p&gt;Commençons par mettre à jour l&amp;rsquo;entité &lt;code&gt;Vote&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Vote
{
    ...
    private $http_x_forwarded_for;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis le fichier de configuration des contraintes de validation :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# src/AB/VotingSystem/Resources/config/validation.yml
AB\VotingSystemBundle\Entity\Vote:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
            fields: [remote_addr, http_x_forwarded_for]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fields&lt;/code&gt; prend maintenant un tableau de champs à vérifier. Il faut préciser que Symfony s&amp;rsquo;assurera de l&amp;rsquo;unicité &lt;em&gt;du groupe de champs&lt;/em&gt; et non des deux champs de manière isolée.&lt;/p&gt;

&lt;h2 id=&#34;contrainte-uniqueentity-et-champ-nullable&#34;&gt;Contrainte UniqueEntity et champ nullable&lt;/h2&gt;

&lt;p&gt;Un comportement par défaut de la contrainte &lt;code&gt;UniqueEntity&lt;/code&gt; dont il faut être conscient est que celle-ci n&amp;rsquo;enregistrera aucune erreur si un ou plusieurs champs ont une valeur nulle (autrement dit, la contrainte sera ignorée). Dans l&amp;rsquo;état, il est donc possible dans la table en base de données d&amp;rsquo;avoir ces valeurs enregistrées :&lt;/p&gt;

&lt;table class=&#34;table table-condensed&#34;&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;positive&lt;/th&gt;
        &lt;th&gt;remote_addr&lt;/th&gt;
        &lt;th&gt;http_x_forwarded_for&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;0&lt;/td&gt;
        &lt;td&gt;80.13.81.94&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td class=&#34;text-danger&#34;&gt;213.80.109.42&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td class=&#34;text-danger&#34;&gt;213.80.109.42&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td class=&#34;text-danger&#34;&gt;213.80.109.42&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Dans le cas de cette application, ce comportement n&amp;rsquo;est pas celui attendu. Il est donc nécessaire de définir une autre valeur pour l&amp;rsquo;option &lt;code&gt;ignoreNull&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# src/AB/VotingSystem/Resources/config/validation.yml
AB\VotingSystemBundle\Entity\Vote:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
            fields: [remote_addr, http_x_forwarded_for]
            ignoreNull: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette fois tout devrait être bon :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mes premiers pas avec CakePHP 3</title>
      <link>http://www.aubm.net/blog/mes-premiers-pas-avec-cakephp-3/</link>
      <pubDate>Fri, 13 Mar 2015 16:22:40 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/mes-premiers-pas-avec-cakephp-3/</guid>
      <description>

&lt;h2 id=&#34;avant-propos&#34;&gt;Avant propos&lt;/h2&gt;

&lt;p&gt;Profitant d&amp;rsquo;un peu de temps libre j&amp;rsquo;ai décidé de m&amp;rsquo;essayer à la dernière version en date de CakePHP, à savoir CakePHP 3. Je suis donc parti dans l&amp;rsquo;idée de pondre un Twitter-like en version allégée (très allégée).&lt;/p&gt;

&lt;p&gt;Après avoir posé le contexte en présentant mon Twitter fait maison, je développerai cet article en apportant des précisions sur le code et les différentes fonctionnalités de CakePHP 3 que j&amp;rsquo;ai utilisées pour construire le site. A noter que l&amp;rsquo;objectif premier est de se concentrer sur les spécificités de CakePHP 3. Je suggère - afin de tirer meilleur parti de cette lecture - de bénéficier en amont d&amp;rsquo;une certaine expérience autour d&amp;rsquo;outils comme Composer, d&amp;rsquo;être à l&amp;rsquo;aise avec le modèle MVC, ou encore de savoir ce qu&amp;rsquo;est un ORM.&lt;/p&gt;

&lt;p&gt;Au départ, mes objectifs étaient de comprendre comment un projet CakePHP 3 est structuré et de découvrir les fonctionnalités offertes par le framework. C&amp;rsquo;est dans cet esprit que je vais écrire, tâchant de rester dans une simple description. Le but n&amp;rsquo;est donc pas de comparer CakePHP 3 à d&amp;rsquo;autres frameworks, ni de répondre directement à des questions comme &amp;ldquo;Cake est-il adapté pour tel type d&amp;rsquo;application ?&amp;rdquo;. D&amp;rsquo;autant que la forme ne s&amp;rsquo;y prête pas dans la mesure où un projet comme celui-ci ne permet pas de couvrir tous ses aspects.&lt;/p&gt;

&lt;p&gt;Cet article est un bilan sur les quelques journées que j&amp;rsquo;ai passées à jongler entre mon IDE et la documentation officielle de CakePHP 3. Je l&amp;rsquo;écris avant tout pour moi, afin qu&amp;rsquo;il puisse éventuellement me servir de point de départ si j&amp;rsquo;ai un jour besoin de travailler avec ce framework. Ceci étant dit, comme il semble qu&amp;rsquo;il n&amp;rsquo;existe encore (du moins à l&amp;rsquo;heure où j&amp;rsquo;écris) que relativement peu de ressources sur le sujet (en dehors de la documentation officielle et en français du moins), je serais content d&amp;rsquo;apprendre qu&amp;rsquo;il a pu servir à d&amp;rsquo;autres développeurs.&lt;/p&gt;

&lt;h2 id=&#34;contexte&#34;&gt;Contexte&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;application que j&amp;rsquo;ai réalisée s&amp;rsquo;inspire ouvertement du fonctionnement de Twitter. Voilà le contenu de ma check-list en début de projet :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Les utilisateurs enregistrés peuvent poster des messages (des tweets) de moins de 140 caractères&lt;/li&gt;
&lt;li&gt;Tous les tweets apparaissent en page d&amp;rsquo;accueil dans l&amp;rsquo;ordre du plus récent au plus ancien&lt;/li&gt;
&lt;li&gt;La page d&amp;rsquo;un utilisateur affiche les détails de son profil et la liste de ses tweets&lt;/li&gt;
&lt;li&gt;Possibilité d&amp;rsquo;ajouter des #hashtags dans les tweets, cliquer sur un hashtag affiche la liste de tous les tweets qui le mentionnent&lt;/li&gt;
&lt;li&gt;Pas de pagination pour les tweets, charger les tweets suivants au défilement de la page&lt;/li&gt;
&lt;li&gt;Les utilisateurs peuvent modifier les détails de leur profil et télécharger une image pour personnaliser leur avatar&lt;/li&gt;
&lt;li&gt;Afficher un bloc listant les hashtags les plus populaires&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;N&amp;rsquo;ayant pas souhaité déployer sur un serveur, j&amp;rsquo;ai pris la peine de réaliser cette vidéo de présentation au cas où vous souhaiteriez voir l&amp;rsquo;application tourner.&lt;/p&gt;

&lt;div class=&#34;video-wrapper&#34;&gt;
&lt;iframe width=&#34;1280&#34; height=&#34;750&#34; src=&#34;https://www.youtube.com/embed/_-UvsRoXZeM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Les sources sont disponibles sur &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;. Je suggère de conserver l&amp;rsquo;onglet Github ouvert pendant la lecture afin de pouvoir facilement faire des parallèles entre les notions abordées et le code de l&amp;rsquo;application.&lt;/p&gt;

&lt;p&gt;Le fichier &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3/blob/master/database.sql&#34; target=&#34;_blank&#34;&gt;database.sql&lt;/a&gt; contient les requêtes à exécuter pour ajouter les tables dans une base de données MySQL.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&#34;http://www.aubm.net/img/twitthome_schema.png&#34; alt=&#34;Schéma base de données Twitthome&#34;  class=&#34;img-responsive&#34;/&gt;
&lt;figcaption&gt;Une représentation graphique du schéma de la base de données.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;généralités-et-organisation-du-code&#34;&gt;Généralités et organisation du code&lt;/h2&gt;

&lt;p&gt;A supposer que vous souhaitiez démarrer un projet CakePHP 3, la seule chose à faire après avoir installé les pré-requis nécessaires (PHP 5.3 et Composer) est de lancer cette commande :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer create-project --prefer-dist -s dev cakephp/app my_app_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Composer téléchargera CakePHP 3 et ses dépendances dans un nouveau dossier &lt;code&gt;my_app_name&lt;/code&gt;. Le script d&amp;rsquo;installation est lancé automatiquement et propose de configurer les droits des répertoires pour vous. Vous pourrez alors commencer à travailler sur le site en utilisant le serveur HTTP embarqué :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/cake server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comme pour beaucoup de frameworks web, CakePHP 3 propose une implémentation du pattern composite MVC pour la gestion du cycle de vie des requêtes HTTP. Le code de l&amp;rsquo;application va donc être segmenté en trois couches, chacune pouvant tirer parti d&amp;rsquo;un certain nombre d&amp;rsquo;éléments : composants, comportements, helpers, etc &amp;hellip; Il s&amp;rsquo;agit là de termes propres à CakePHP que je développerai plus tard.&lt;/p&gt;

&lt;p&gt;Le fichier d&amp;rsquo;entrée de l&amp;rsquo;application est  &lt;code&gt;/webroot/index.php&lt;/code&gt;. Son rôle est de déclencher le processus de démarrage de l&amp;rsquo;application, puis d&amp;rsquo;instancier le &lt;strong&gt;dispatcher&lt;/strong&gt; qui se chargera de déléguer la requête au bon contrôleur. &lt;code&gt;/webroot/&lt;/code&gt; est le répertoire auquel doit être configuré le &lt;strong&gt;document root&lt;/strong&gt;.&lt;code&gt;index.php&lt;/code&gt; devrait y être le seul fichier PHP aux côtés d&amp;rsquo;autres ressources web comme des images, des fichiers CSS ou Javascript.&lt;/p&gt;

&lt;p&gt;Si vous avez besoin d&amp;rsquo;intervenir sur des étapes du démarrage de l&amp;rsquo;application, vous aurez alors besoin d&amp;rsquo;éditer un peu de code dans &lt;code&gt;/config/&lt;/code&gt;. Dans &lt;code&gt;/config/app.php&lt;/code&gt; sont notamment définis les paramètres de connexion à la base de données, le niveau de debug ou encore la gestion des sessions. Les routes sont définies programmatiquement dans &lt;code&gt;/config/routes.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pour le reste, le répertoire &lt;code&gt;/src/&lt;/code&gt; se chargera d&amp;rsquo;héberger les sources de l&amp;rsquo;application. Les contrôleurs, les modèles ou encore les templates sont situés dans des sous-répertoires de &lt;code&gt;/src/&lt;/code&gt;. Cette même structure est reprise au travers &lt;a href=&#34;http://book.cakephp.org/3.0/fr/plugins.html&#34; target=&#34;_blank&#34;&gt;des plugins&lt;/a&gt;. Pratique pour packager une application dans le but de la réutiliser dans une autre (conceptuellement proche des bundles de Symfony 2).&lt;/p&gt;

&lt;h2 id=&#34;les-routes&#34;&gt;Les routes&lt;/h2&gt;

&lt;h3 id=&#34;déclarer-des-routes&#34;&gt;Déclarer des routes&lt;/h3&gt;

&lt;p&gt;Les routes sont définies dans &lt;code&gt;/config/routes.php&lt;/code&gt; à l&amp;rsquo;intérieur de &lt;strong&gt;scopes&lt;/strong&gt;. Un scope permet - entre autres - de factoriser plusieurs routes afin de leur attribuer un préfix.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Router::scope(&#39;/api/&#39;, function ($routes) {
    $routes-&amp;gt;connect(&#39;/tweets&#39;, [
        &#39;controller&#39; =&amp;gt; &#39;Tweets&#39;,
        &#39;action&#39; =&amp;gt; &#39;index&#39;
    ], [
        &#39;_name&#39; =&amp;gt; &#39;tweets_index&#39;
    ]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le code ci-dessus connecte la route &lt;code&gt;/api/tweets&lt;/code&gt; au dispatcher. Le dispatcher se chargera de passer la requête à la méthode &lt;code&gt;TweetsController::index()&lt;/code&gt;. Le tableau d&amp;rsquo;options en troisième paramètre de la méthode &lt;code&gt;connect()&lt;/code&gt; est facultatif. Définir l&amp;rsquo;option &lt;code&gt;_name&lt;/code&gt; permet de générer les urls plus facilement depuis les templates (vu plus tard).&lt;/p&gt;

&lt;h3 id=&#34;déclarer-des-ressources-restful&#34;&gt;Déclarer des ressources restful&lt;/h3&gt;

&lt;p&gt;Supposons maintenant qu&amp;rsquo;il s&amp;rsquo;agisse de mettre en place une API restful. CakePHP 3 offre la possibilité de s&amp;rsquo;affranchir de portions de code répétitives en tirant parti de quelques conventions sur lesquelles reposent des comportements par défaut du framework. Cette philosophie - sans doute héritée de Ruby on Rails - est omniprésente. Qu&amp;rsquo;il s&amp;rsquo;agisse de travailler avec les routes ou encore avec l&amp;rsquo;ORM, elle peut faire gagner un temps précieux.&lt;/p&gt;

&lt;p&gt;Pour l&amp;rsquo;exemple, jetons un oeil sur ce tableau :&lt;/p&gt;

&lt;table class=&#34;table table-condensed&#34;&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt; &lt;td&gt;/api/tweets.:format&lt;/td&gt; &lt;td&gt;TweetsController::index()&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt; &lt;td&gt;/api/tweets/:tweet_id.:format&lt;/td&gt; &lt;td&gt;TweetsController::view($tweet_id)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;POST&lt;/td&gt; &lt;td&gt;/api/tweets.:format&lt;/td&gt; &lt;td&gt;TweetsController::add()&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PUT&lt;/td&gt; &lt;td&gt;/api/tweets/:tweet_id.:format&lt;/td&gt; &lt;td&gt;TweetsController::edit($tweet_id)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PATCH&lt;/td&gt; &lt;td&gt;/api/tweets/:tweet_id.:format&lt;/td&gt; &lt;td&gt;TweetsController::edit($tweet_id)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DELETE&lt;/td&gt; &lt;td&gt;/api/tweets/:tweet_id.:format&lt;/td&gt; &lt;td&gt;TweetsController::delete($tweet_id)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Ces routes peuvent être configurées automatiquement avec ce seul extrait de code :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Router::scope(&#39;/api/&#39;, function ($routes) {
    $routes-&amp;gt;extensions([&#39;xml&#39;, &#39;json&#39;]);
    $routes-&amp;gt;resources(&#39;tweets&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-routes-auto-déclarées&#34;&gt;Les routes auto-déclarées&lt;/h3&gt;

&lt;p&gt;Une chose à savoir à propos de CakePHP 3 est qu&amp;rsquo;il connecte automatiquement une route au dispatcher pour chaque nouvelle action de contrôleur. Le nom de ces routes est défini en fonction du nom du contrôleur et de la méthode.
Si bien que le code si dessous :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class TweetsController
{
    function index()
    {
        ...
    }

    function add()
    {
        ...
    }

    function load()
    {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connectera automatiquement les routes &lt;code&gt;/tweets&lt;/code&gt;, &lt;code&gt;/tweets/add&lt;/code&gt; et &lt;code&gt;/tweets/load&lt;/code&gt;. Ce comportement est induit par cette instruction du fichier &lt;code&gt;/config/routes.php&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$routes-&amp;gt;fallbacks(&#39;InflectedRoute&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Naturellement, supprimer cette instruction supprimera ce comportement.&lt;/p&gt;

&lt;h2 id=&#34;la-couche-controller&#34;&gt;La couche Controller&lt;/h2&gt;

&lt;h3 id=&#34;les-classes-de-contrôleur&#34;&gt;Les classes de contrôleur&lt;/h3&gt;

&lt;p&gt;Les classes de contrôleur sont situées dans &lt;code&gt;/src/Controller/&lt;/code&gt;. Elles doivent étendre la classe &lt;code&gt;\Cake\Controller\Controller&lt;/code&gt; et leur nom doit - par convention - se terminer par le suffixe &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;application Twitthome utilise quatre classes de contrôleur : &lt;code&gt;TweetsController&lt;/code&gt;, &lt;code&gt;HashtagsController&lt;/code&gt;, &lt;code&gt;UsersController&lt;/code&gt; et &lt;code&gt;AccountParametersController&lt;/code&gt;. Comme suggéré dans la documentation officielle, ces classes étendent &lt;code&gt;AppController&lt;/code&gt;. Cette pratique est un moyen simple de définir des comportements globaux pour l&amp;rsquo;application, comme par exemple des règles liées à l&amp;rsquo;authentification.
L&amp;rsquo;instruction ci-dessous extraite de la classe &lt;code&gt;AppController&lt;/code&gt; autorise les accès non-authentifiés aux actions (i.e. aux méthodes) &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt; et &lt;code&gt;display&lt;/code&gt; pour tous les contrôleurs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$this-&amp;gt;Auth-&amp;gt;allow([&#39;index&#39;, &#39;view&#39;, &#39;display&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le router mis à part, le contrôleur est le point d&amp;rsquo;entrée de l&amp;rsquo;application. Depuis le contrôleur, CakePHP 3 permet de manipuler la requête et la réponse HTTP au moyen des attributs &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.Network.Request.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; et &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.Network.Response.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;. Les paramètres des routes sont quant à eux injectés en tant que paramètres des méthodes (des actions).&lt;/p&gt;

&lt;p&gt;Le contrôleur délègue la génération du contenu de la réponse à une vue. La méthode &lt;code&gt;\Cake\Controller\Controller::render()&lt;/code&gt; est automatiquement appelée et se charge d&amp;rsquo;invoquer le template correspondant à l&amp;rsquo;action (vu plus tard). Le contrôleur peut passer des données au template au moyen de &lt;code&gt;\Cake\View\ViewVarsTrait::set()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$this-&amp;gt;set([
    &#39;tweets&#39; =&amp;gt; $tweets,
    &#39;hashtag_name&#39; =&amp;gt; $name
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-composants-components&#34;&gt;Les composants (components)&lt;/h3&gt;

&lt;p&gt;Les composants sont des objets qui peuvent être invoqués par un contrôleur dans le but de remplir une tâche spécifique. Le core de CakePHP 3 embarque des composants pour l&amp;rsquo;authentification, la manipulation des cookies ou encore l&amp;rsquo;utilisation de messages flash.&lt;/p&gt;

&lt;p&gt;Charger des composants dans un contrôleur peut se faire à l&amp;rsquo;intérieur du hook &lt;code&gt;initialize()&lt;/code&gt; du contrôleur.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function initialize()
{
    $this-&amp;gt;loadComponent(&#39;Flash&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une fois fait, le composant est accessible en tant que variable d&amp;rsquo;instance du contrôleur :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersController extends Controller
{
    public function add()
    {
        ...
        $this-&amp;gt;Flash-&amp;gt;success(__(&#39;Your account has been created.&#39;));
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Créer ses propres composants est une solution simple et ludique permettant d&amp;rsquo;isoler de la logique dans des classes utilisables à l&amp;rsquo;intérieur d&amp;rsquo;un ou plusieurs contrôleurs. &amp;ldquo;Où placer la logique ?&amp;rdquo; est une des premières questions que je me suis posées. Un cas pratique d&amp;rsquo;utilisation était la possibilité de télécharger une photo de profil pour les utilisateurs. Le téléchargement d&amp;rsquo;une image représente une portion de code susceptible de vouloir être ré-utilisée à différents emplacements de l&amp;rsquo;application.
Comme CakePHP 3 ne semble pas embarquer de composant d&amp;rsquo;injection de dépendances qui permettrait de travailler avec des classes de service (à l&amp;rsquo;instar de Symfony 2 par exemple) et qu&amp;rsquo;avoir recours à l&amp;rsquo;héritage n&amp;rsquo;est pas toujours approprié, je me suis lancé de la construction de &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3/blob/master/src/Controller/Component/ImageUploadComponent.php&#34; target=&#34;_blank&#34;&gt;mon propre composant d&amp;rsquo;upload&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le composant est une classe résident dans &lt;code&gt;/src/Controller/Component/&lt;/code&gt; dont le nom doit se terminer par le suffixe &lt;code&gt;Component&lt;/code&gt;. Si la méthode &lt;code&gt;initialize()&lt;/code&gt; du composant attend des paramètres (comme c&amp;rsquo;est le cas pour mon &lt;code&gt;FileUploadComponent&lt;/code&gt; dont hérite &lt;code&gt;ImageUploadComponent&lt;/code&gt;) :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class FileUploadComponent extends Component
{
    public function initialize(array $config)
    {
        $this-&amp;gt;upload_dir = $this-&amp;gt;_getSystemPath($config[&#39;upload_dir&#39;]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les contrôleurs utilisant le composant fourniront ces paramètres lors du chargement de ce dernier. Exemple dans mon &lt;code&gt;AccountParametersController&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class AccountParametersController extends AppController
{
    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;loadComponent(&#39;ImageUpload&#39;, [
            &#39;upload_dir&#39; =&amp;gt; &#39;webroot/img/avatars&#39;
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;la-couche-model&#34;&gt;La couche Model&lt;/h2&gt;

&lt;h3 id=&#34;les-tables-repositories&#34;&gt;Les tables (repositories)&lt;/h3&gt;

&lt;h4 id=&#34;extraire-des-données&#34;&gt;Extraire des données&lt;/h4&gt;

&lt;p&gt;Utiliser l&amp;rsquo;ORM pour extraire les informations de la base de données est facile et ne requiert la création d&amp;rsquo;aucune classe personnalisée.
A l&amp;rsquo;intérieur de &lt;code&gt;TweetsController&lt;/code&gt;, l&amp;rsquo;instruction ci-dessous permet d&amp;rsquo;extraire l&amp;rsquo;ensemble des lignes de la table &lt;code&gt;tweets&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$tweets = $this-&amp;gt;Tweets-&amp;gt;find(&#39;all&#39;)-&amp;gt;toArray();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encore une fois, CakePHP 3 repose sur des conventions pour faire fonctionner cette instruction :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Par soucis de performance (je suppose), les données des tweets ne sont chargées automatiquement que dans le &lt;code&gt;TweetsController&lt;/code&gt;. Le chargement de ce modèle de données devra &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.Datasource.ModelAwareTrait.html#_loadModel&#34; target=&#34;_blank&#34;&gt;être fait manuellement&lt;/a&gt; s&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;un autre contrôleur.&lt;/li&gt;
&lt;li&gt;Le nom de la table dans la base de données doit correspondre au nom du contrôleur transformé en lower-case + underscores - soit pour cet exemple : &lt;code&gt;tweets&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CakePHP 3 matérialise l&amp;rsquo;interface entre l&amp;rsquo;application et une table de la base de données par la création d&amp;rsquo;un objet de type &lt;code&gt;\Cake\ORM\Table&lt;/code&gt;. Sorti des conventions listées plus haut,  pour créer des règles de validation ou encore pour exploiter des relations avec d&amp;rsquo;autres tables, vous aurez besoin de créer une classe spécialisée pour matérialiser cette interface.&lt;/p&gt;

&lt;p&gt;La classe &lt;code&gt;TweetsTable&lt;/code&gt; qui étend &lt;code&gt;\Cake\ORM\Table&lt;/code&gt; dans le fichier &lt;code&gt;/src/Model/Table/TweetsTable.php&lt;/code&gt; sert justement ce rôle. Le hook &lt;code&gt;initialize()&lt;/code&gt; est utilisé pour définir les relations avec les autres tables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function initialize(array $config)
{
    $this-&amp;gt;belongsTo(&#39;Users&#39;);
    $this-&amp;gt;belongsToMany(&#39;Hashtags&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La documentation officielle fournit les informations nécessaires pour &lt;a href=&#34;http://book.cakephp.org/3.0/fr/orm/associations.html&#34; target=&#34;_blank&#34;&gt;utiliser les relations entre les tables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il est intéressant de noter que cet appel : &lt;code&gt;$this-&amp;gt;Tweets-&amp;gt;find(&#39;all&#39;);&lt;/code&gt; va - de manière transparente - exécuter la méthode &lt;code&gt;\Cake\ORM\Table::findAll()&lt;/code&gt;. Il est donc possible de modifier le comportement de cette méthode en la redéfinissant à l&amp;rsquo;intérieur de &lt;code&gt;TweetsTable&lt;/code&gt;. Voici comment demander à l&amp;rsquo;ORM de charger les données des modèles associés, et de trier les résultats du plus récent au plus ancien :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function findAll(Query $query, array $options)
{
    $query-&amp;gt;contain([&#39;Users&#39;, &#39;Users.AccountParameters&#39;]);
    $query-&amp;gt;order([&#39;Tweets.created&#39; =&amp;gt; &#39;DESC&#39;]);
    return $query;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette technique permet de garder les classes de contrôleur DRY tout en continuant d&amp;rsquo;exploiter toute la puissance de l&amp;rsquo;ORM. De la même manière il est possible de définir d&amp;rsquo;autres &lt;strong&gt;finders&lt;/strong&gt;. Cette méthode est utilisée afin d&amp;rsquo;extraire les tweets pour un hashtag donné :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Dans la classe TweetsTable
public function findTagged(Query $query, array $options)
{
    $query-&amp;gt;contain([&#39;Users&#39;, &#39;Users.AccountParameters&#39;, &#39;Hashtags&#39;]);
    $query-&amp;gt;matching(&#39;Hashtags&#39;, function ($q) use ($options) {
        return $q-&amp;gt;where([&#39;Hashtags.name&#39; =&amp;gt; $options[&#39;tag_name&#39;]]);
    });
    $query-&amp;gt;order([&#39;Tweets.created&#39; =&amp;gt; &#39;DESC&#39;]);
    return $query;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Dans la classe HashtagsController
$this-&amp;gt;Tweets-&amp;gt;find(&#39;tagged&#39;, [
    &#39;tag_name&#39; =&amp;gt; $tag_name
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;insérer-de-nouvelles-lignes&#34;&gt;Insérer de nouvelles lignes&lt;/h4&gt;

&lt;p&gt;Insérer de nouvelles lignes dans la base de données ne pose pas de problème particulier.
Pour l&amp;rsquo;exemple, mon application requiert de pouvoir enregistrer de nouveaux utilisateurs. A chaque nouvel utilisateur, une nouvelle entrée dans la table &lt;code&gt;account_parameters&lt;/code&gt; doit également être ajoutée.
Le code ci-dessous permet d&amp;rsquo;accomplir cette tâche avec très peu de code :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersController extends AppController
{
    public function add()
    {
        ...
        $user = $this-&amp;gt;Users-&amp;gt;newEntity($user_data);
        $user-&amp;gt;set(&#39;account_parameter&#39;, $this-&amp;gt;AccountParameters-&amp;gt;newEntity());
        $this-&amp;gt;Users-&amp;gt;save($user);
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;valider-des-données&#34;&gt;Valider des données&lt;/h4&gt;

&lt;p&gt;CakePHP 3 propose une double approche pour permettre de valider les données d&amp;rsquo;une entité.
De lors que des données de requête sont converties en entité, CakePHP 3 effectue automatiquement une validation basée sur les règles configurées dans le hook &lt;code&gt;validationDefault()&lt;/code&gt;. Il est possible à ce niveau de s&amp;rsquo;assurer qu&amp;rsquo;une chaine de caractères respecte un format pré-défini ou encore de vérifier qu&amp;rsquo;un attribut reçoit bien une valeur en s&amp;rsquo;inspirant de ce code :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersTable extends Table
{
    public function validationDefault(Validator $validator)
    {
        return $validator
            -&amp;gt;notEmpty(&#39;username&#39;, __(&#39;Username must not be empty&#39;))
            -&amp;gt;notEmpty(&#39;password&#39;, __(&#39;Password must not be empty&#39;))
            -&amp;gt;notEmpty(&#39;email&#39;, __(&#39;E-mail must not be empty&#39;))
            -&amp;gt;add(&#39;email&#39;, &#39;validFormat&#39;, [
                &#39;rule&#39; =&amp;gt; &#39;email&#39;,
                &#39;message&#39; =&amp;gt; __(&#39;E-mail must be valid&#39;)
            ])
            -&amp;gt;notEmpty(&#39;first_name&#39;, __(&#39;First name must not be empty&#39;))
            -&amp;gt;notEmpty(&#39;last_name&#39;, __(&#39;Last name must not be empty&#39;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;D&amp;rsquo;autre part, lorsqu&amp;rsquo;une entité s&amp;rsquo;apprête à être persistée en base de données, CakePHP 3 s&amp;rsquo;assure que les données respectent les contraintes définies dans le hook &lt;code&gt;buildRules()&lt;/code&gt;. Il s&amp;rsquo;agit là de &lt;a href=&#34;http://book.cakephp.org/3.0/fr/orm/saving-data.html#appliquer-des-regles-pour-l-application&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;règles de domaine&lt;/strong&gt;&lt;/a&gt;, elles sont relatives à un besoin métier de l&amp;rsquo;application. Vous pourriez par exemple vous assurer que le statut de ce ticket l&amp;rsquo;autorise à recevoir un commentaire, ou bien que ce produit est toujours disponible avant de l&amp;rsquo;ajouter au panier. L&amp;rsquo;exemple ci-dessous est extrait de Twitthome et montre comment s&amp;rsquo;assurer de l&amp;rsquo;unicité des champs &lt;code&gt;username&lt;/code&gt; et &lt;code&gt;email&lt;/code&gt; de la table &lt;code&gt;users&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersTable extends Table
{
    public function buildRules(RulesChecker $rules)
    {
        $rules-&amp;gt;add($rules-&amp;gt;isUnique([&#39;username&#39;]));
        $rules-&amp;gt;add($rules-&amp;gt;isUnique([&#39;email&#39;]));
        return $rules;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-comportements-behaviors&#34;&gt;Les comportements (behaviors)&lt;/h3&gt;

&lt;p&gt;Tout comme les composants permettent de factoriser de la logique des contrôleurs, les comportements permettent de réutiliser de la logique de la couche Model. La &lt;a href=&#34;http://book.cakephp.org/3.0/fr/orm/behaviors.html&#34; target=&#34;_blank&#34;&gt;documentation officielle de CakePHP 3&lt;/a&gt; les présente comme étant &amp;ldquo;conceptuellement similaires aux traits&amp;rdquo;. Bien que n&amp;rsquo;ayant pas eu besoin de créer mes propres comportements, j&amp;rsquo;ai pu tirer parti de l&amp;rsquo;utilisation du &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.ORM.Behavior.TimestampBehavior.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;TimestampBehavior&lt;/code&gt;&lt;/a&gt; (défini dans le core du framework) pour mettre à jour automatiquement les champs &lt;code&gt;created&lt;/code&gt; et &lt;code&gt;modified&lt;/code&gt; des tables &lt;code&gt;tweets&lt;/code&gt; et &lt;code&gt;users&lt;/code&gt;. Voici comment utiliser un comportement dans une table :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UsersTable extends Table
{
    public function initialize(array $config)
    {
        $this-&amp;gt;addBehavior(&#39;Timestamp&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-entités&#34;&gt;Les entités&lt;/h3&gt;

&lt;p&gt;Les objets table manipulent des objets de type &lt;code&gt;\Cake\ORM\Entity&lt;/code&gt;. Chaque instance représente une ligne d&amp;rsquo;une table de la base de données. Comme pour les tables, il est possible de créer des classes spécialisées qui seront utilisées par l&amp;rsquo;ORM pour représenter les entités de l&amp;rsquo;application. Ces classes sont définies dans des fichiers à l&amp;rsquo;intérieur de &lt;code&gt;/src/Model/Entity/&lt;/code&gt; et leur nom (par convention) correspond au nom de la table ramené au singulier.&lt;/p&gt;

&lt;p&gt;Un intérêt d&amp;rsquo;utiliser des classes spécialisées réside dans la possibilité de surcharger les accesseurs et les mutateurs des différents attributs. Pratique notamment dans le cas de l&amp;rsquo;entité &lt;code&gt;User&lt;/code&gt; pour crypter le mot de passe de manière transparente :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User extends Entity
{
    protected function _setPassword($password)
    {
        return (new DefaultPasswordHasher)-&amp;gt;hash($password);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J&amp;rsquo;ai utilisé cette même technique afin &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3/blob/master/src/Model/Entity/Tweet.php&#34; target=&#34;_blank&#34;&gt;d&amp;rsquo;extraire des informations du contenu d&amp;rsquo;un tweet&lt;/a&gt;, comme les hashtags ou les liens externes.&lt;/p&gt;

&lt;h2 id=&#34;la-couche-view&#34;&gt;La couche View&lt;/h2&gt;

&lt;h3 id=&#34;les-templates&#34;&gt;Les templates&lt;/h3&gt;

&lt;p&gt;Les templates sont des fichiers contenant essentiellement du code HTML. Ils sont situés dans &lt;code&gt;/src/Templates/&lt;/code&gt; et portent l&amp;rsquo;extension &lt;code&gt;.ctp&lt;/code&gt;. Le répertoire contient les templates responsables du rendu d&amp;rsquo;une action spécifique d&amp;rsquo;un contrôleur, mais également des fichiers responsables du rendu des &lt;a href=&#34;http://book.cakephp.org/3.0/fr/views.html#elements&#34; target=&#34;_blank&#34;&gt;éléments&lt;/a&gt;, des &lt;strong&gt;cellules&lt;/strong&gt; (vu un peu après), ou encore des &lt;strong&gt;layouts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Par défaut, le rendu des actions des contrôleurs est encapsulé à l&amp;rsquo;intérieur du fichier &lt;code&gt;/src/Template/Layout/default.ctp&lt;/code&gt;. C&amp;rsquo;est dans ce fichier que doit être inséré le code commun à tous les templates. Pour mieux comprendre, partons du principe que le layout par défaut devrait contenir au minimum le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;title&amp;gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;title&#39;) ?&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
	&amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;affichage généré par le contrôleur sera rendu à l&amp;rsquo;emplacement de  &lt;code&gt;&amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;&lt;/code&gt;.  Pour fonctionner, les templates doivent être nommés en corrélation avec le nom des méthodes des contrôleurs. Ainsi la méthode &lt;code&gt;TweetsController::index()&lt;/code&gt; cherchera par default le fichier &lt;code&gt;/src/Template/Tweets/index.ctp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Le fonctionnement des layouts est basé sur la possibilité de travailler avec des &lt;a href=&#34;http://book.cakephp.org/3.0/fr/views.html#utiliser-les-blocks-de-vues&#34; target=&#34;_blank&#34;&gt;blocks de vue&lt;/a&gt; à l&amp;rsquo;intérieur de vues étendues. Comme vu précédemment, le rendu de l&amp;rsquo;action sera positionné dans le block &lt;code&gt;content&lt;/code&gt;, mais il est possible de définir d&amp;rsquo;autres blocks de façon arbitraire.&lt;/p&gt;

&lt;p&gt;Pour l&amp;rsquo;application Twitthome, je m&amp;rsquo;étais donné à faire une sidebar dont le contenu serait susceptible de changer d&amp;rsquo;une page à l&amp;rsquo;autre. Un cas typique d&amp;rsquo;utilisation des blocks de vue. J&amp;rsquo;ai donc modifié mon layout &lt;code&gt;default.ctp&lt;/code&gt; afin qu&amp;rsquo;il se rapproche de quelque chose comme ça :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;...
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;aside class=&amp;quot;col-md-4&amp;quot;&amp;gt;
        &amp;lt;?= $this-&amp;gt;fetch(&#39;sidebar&#39;) ?&amp;gt;
    &amp;lt;/aside&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-8&amp;quot;&amp;gt;
        &amp;lt;?= $this-&amp;gt;fetch(&#39;content&#39;) ?&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le contenu du block &lt;code&gt;sidebar&lt;/code&gt; peut maintenant être défini dans un autre template, dans  &lt;code&gt;/src/Template/Tweets/index.ctp&lt;/code&gt; par exemple :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php $this-&amp;gt;start(&#39;sidebar&#39;); ?&amp;gt;
&amp;lt;p&amp;gt;Contenu de la sidebar !&amp;lt;/p&amp;gt;
&amp;lt;?php $this-&amp;gt;end(); ?&amp;gt;

&amp;lt;?php foreach($tweets as $tweet): ?&amp;gt;
    ...
&amp;lt;?php endforeach; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans cet exemple, la variable &lt;code&gt;$tweets&lt;/code&gt; est issue de l&amp;rsquo;appel à la méthode &lt;code&gt;\Cake\View\ViewVarsTrait::set()&lt;/code&gt; dans le contrôleur (cf. partie sur les classes de contrôleur).&lt;/p&gt;

&lt;h3 id=&#34;les-helpers&#34;&gt;Les helpers&lt;/h3&gt;

&lt;p&gt;Les helpers sont ce qui facilite la création des templates et ce qui la rend plus ludique. A l&amp;rsquo;image des composants pour les contrôleurs ou des comportements pour les tables, les helpers permettent de ré-utiliser de la logique de vue. Le core de CakePHP 3 embarque une dizaine de classes helpers chargées par défaut dans les vues et qui permettent entre autres :&lt;/p&gt;

&lt;p&gt;De générer des urls :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;a href=&amp;quot;&amp;lt;?= $this-&amp;gt;Url-&amp;gt;build([&#39;_name&#39; =&amp;gt; &#39;login&#39;]) ?&amp;gt;&amp;quot;&amp;gt;&amp;lt;?= __(&#39;Sign in&#39;) ?&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;D&amp;rsquo;afficher des formulaires :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?= $this-&amp;gt;Form-&amp;gt;create(new Tweet()); ?&amp;gt;
&amp;lt;?= $this-&amp;gt;Form-&amp;gt;input(&#39;content&#39;, [
    &#39;label&#39; =&amp;gt; false,
    &#39;class&#39; =&amp;gt; &#39;form-control&#39;,
    &#39;placeholder&#39; =&amp;gt; __(&#39;What\&#39;s up ?&#39;)
]); ?&amp;gt;
&amp;lt;?= $this-&amp;gt;Form-&amp;gt;button(__(&#39;Tweeter&#39;)); ?&amp;gt;
&amp;lt;?= $this-&amp;gt;Form-&amp;gt;end(); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ou encore d&amp;rsquo;insérer une feuille de style :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?= $this-&amp;gt;Html-&amp;gt;css(&#39;app.min.css&#39;) ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Des classes helpers personnalisées peuvent être ajoutées dans &lt;code&gt;/src/View/Helper&lt;/code&gt;, leur nom doit se terminer par le suffixe &lt;code&gt;Helper&lt;/code&gt;.  L&amp;rsquo;exemple ci-dessous est utilisé dans l&amp;rsquo;application Twitthome pour générer le code HTML correspondant à l&amp;rsquo;avatar d&amp;rsquo;un utilisateur.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class AvatarHelper extends Helper
{
    public $helpers = [&#39;Html&#39;];

    public function render($avatar_file_name)
    {
        $avatar_path = $avatar_file_name ?
            &#39;avatars/&#39; . h($avatar_file_name) : &#39;no-avatar.jpg&#39;;

        return $this-&amp;gt;Html-&amp;gt;image($avatar_path, [
            &#39;alt&#39; =&amp;gt; &#39;Avatar&#39;,
            &#39;class&#39; =&amp;gt; &#39;img-responsive thumbnail&#39;
        ]);
    }
}

// Dans un template ...
...
&amp;lt;?= $this-&amp;gt;Avatar-&amp;gt;render($avatar_file_name) ?&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comme le montre cet exemple, un helper peut dépendre d&amp;rsquo;autres helpers. Les classes d&amp;rsquo;helper correspondant aux éléments du tableau &lt;code&gt;public $helpers&lt;/code&gt; seront automatiquement instanciées et ajoutées comme attributs.&lt;/p&gt;

&lt;p&gt;Si vous souhaitez charger vos helpers pour les rendre utilisables à l&amp;rsquo;échelle de votre application, vous pouvez demander à CakePHP 3 de les instancier dans &lt;code&gt;AppView&lt;/code&gt;  via le hook &lt;code&gt;\Cake\View\View::initialize()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class AppView extends View
{
    public function initialize()
    {
        $this-&amp;gt;loadHelper(&#39;Avatar&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;les-cellules-cells&#34;&gt;Les cellules (cells)&lt;/h3&gt;

&lt;p&gt;Il arrive que des fragments de page HTML dépendent de données qui n&amp;rsquo;ont pas de lien direct avec le contenu principale de la page. Par exemple : un nuage de tags, un feed Instagram ou une remontée des posts les plus récents d&amp;rsquo;un blog. Si ces fragments apparaissent dans plusieurs templates, cela implique que les données doivent être rassemblées et passées à la vue dans chaque action de contrôleur correspondant. En adoptant cette approche, le code des contrôleurs risque d&amp;rsquo;être rapidement pollué. Utiliser des cellules est une solution plus pratique pour répondre à ce genre de problématiques.&lt;/p&gt;

&lt;p&gt;La &lt;a href=&#34;http://book.cakephp.org/3.0/fr/views/cells.html&#34; target=&#34;_blank&#34;&gt;documentation officielle du framework&lt;/a&gt; définit les cellules comme &amp;ldquo;des mini-controllers qui peuvent invoquer de la logique de vue et afficher les templates&amp;rdquo;. Dans le cadre de Twitthome, j&amp;rsquo;ai utilisé une cellule pour afficher le bloc &amp;ldquo;Tendances&amp;rdquo;. La cellule existe au travers de deux fichiers. Le premier est une classe définie dans &lt;code&gt;/src/View/Cell/PopularHashtagsCell.php&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class PopularHashtagsCell extends Cell
{
    public function display()
    {
        $this-&amp;gt;loadModel(&#39;Hashtags&#39;);
        $hashtags = $this-&amp;gt;Hashtags-&amp;gt;find(&#39;popular&#39;)-&amp;gt;toArray();
        $this-&amp;gt;set(&#39;hashtags&#39;, $hashtags);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le comportement de cette classe est similaire à celui d&amp;rsquo;un contrôleur. Celle-ci est capable de charger un modèle, dans le but d&amp;rsquo;extraire les informations nécessaires de la base de données. Le second fichier est le template responsable du rendu de la cellule. Ce template est définit dans &lt;a href=&#34;https://github.com/aubm/Twitthome-CakePHP3/blob/master/src/Template/Cell/PopularHashtags/display.ctp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;/src/Template/Cell/PopularHashtags/display.ctp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enfin la dernière étape consiste à afficher la cellule à l&amp;rsquo;intérieur d&amp;rsquo;un template. Une &lt;a href=&#34;http://api.cakephp.org/3.0/class-Cake.View.CellTrait.html#_cell&#34; target=&#34;_blank&#34;&gt;méthode&lt;/a&gt; est justement prévue pour tenir ce rôle.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?= $this-&amp;gt;cell(&#39;PopularHashtags&#39;); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;le-mot-de-la-fin&#34;&gt;Le mot de la fin&lt;/h2&gt;

&lt;p&gt;Il reste évidemment de nombreux points à aborder. Certains sur lesquels je me suis penchés sont volontairement passés sous silence (comme notamment la partie sur l&amp;rsquo;internationalisation) afin de ne pas trop alourdir la lecture de cet article. D&amp;rsquo;autres sujets mériteraient une attention particulière, comme l&amp;rsquo;outil en ligne de commande, la gestion du cache, les logs ou encore l&amp;rsquo;intégration des tests.&lt;/p&gt;

&lt;p&gt;Ceci étant dit, si cet article ne peut pas prétendre couvrir (même de loin) tous les aspects de CakePHP 3, j&amp;rsquo;ai bon espoir qu&amp;rsquo;il aide à se forger un premier avis sur le framework et puisse éventuellement servir de support pour le démarrage d&amp;rsquo;un projet.
Pour aller plus loin, la &lt;a href=&#34;http://book.cakephp.org/3.0/fr/contents.html&#34; target=&#34;_blank&#34;&gt;documentation officielle&lt;/a&gt; est plutôt bien fournie. Elle contient des exemples d&amp;rsquo;applications, un cookbook complet et une documentation soignée de l&amp;rsquo;API.&lt;/p&gt;

&lt;p&gt;Si le coeur vous en dit, je vous encourage à commenter si vous pensez pouvoir souligner certains axes d&amp;rsquo;amélioration, autant sur le support (Twitthome) que sur la forme.
Je vous remercie pour la lecture et happy coding à tous !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation et utilisation de Sentry</title>
      <link>http://www.aubm.net/blog/installation-et-utilisation-de-sentry/</link>
      <pubDate>Sat, 24 Jan 2015 19:33:05 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/installation-et-utilisation-de-sentry/</guid>
      <description>

&lt;h2 id=&#34;qu-est-ce-que-sentry&#34;&gt;Qu&amp;rsquo;est ce que Sentry ?&lt;/h2&gt;

&lt;p&gt;Sentry est une application web open-source que vous pouvez utiliser pour logger les erreurs de vos applications.&lt;/p&gt;

&lt;p&gt;Le fonctionnement de Sentry repose sur l&amp;rsquo;exploitation de son API accessible par HTTP. Des librairies existent pour de nombreux langages et framework afin de faciliter son implémentation.&lt;/p&gt;

&lt;p&gt;Rendez vous sur le &lt;a href=&#34;https://github.com/getsentry/sentry&#34; target=&#34;_blank&#34;&gt;github du projet&lt;/a&gt; pour en apprendre plus sur les fonctionnalités.&lt;/p&gt;

&lt;h2 id=&#34;a-propos-de-cet-article&#34;&gt;A propos de cet article&lt;/h2&gt;

&lt;p&gt;Cet article comporte deux parties. La première détaille la procédure d&amp;rsquo;installation de la dernière version de Sentry (7.1.4 à l&amp;rsquo;heure où je rédige) sur une machine virtuelle Ubuntu server 64 bits. La seconde contient des morceaux de code commentés, issus de deux applications exemple : une en PHP brut, l&amp;rsquo;autre réalisée à l&amp;rsquo;aide du framework Symfony2 full-stack. Le but est d&amp;rsquo;apporter quelques exemples d&amp;rsquo;utilisation &lt;a href=&#34;https://github.com/getsentry/raven-php&#34; target=&#34;_blank&#34;&gt;de la librairie PHP&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation-et-configuration-de-sentry&#34;&gt;Installation et configuration de Sentry&lt;/h2&gt;

&lt;h3 id=&#34;pré-requis&#34;&gt;Pré-requis&lt;/h3&gt;

&lt;p&gt;Pour préparer cet article, j&amp;rsquo;ai monté une machine virtuelle Ubuntu server 64 bits afin de pouvoir travailler en local. Sentry peut cependant s&amp;rsquo;installer sur n&amp;rsquo;importe quel système Unix.&lt;/p&gt;

&lt;p&gt;Sentry est codé en langage python, il nous faudra donc l&amp;rsquo;avoir installé ainsi que quelques outils de développement.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo su
apt-get update
apt-get upgrade
apt-get install python-setuptools python-pip python-dev libxslt1-dev libxml2-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons besoin d&amp;rsquo;une base de données, le guide d&amp;rsquo;installation officiel recommande PostgreSQL, &lt;a href=&#34;http://redis.io/&#34; target=&#34;_blank&#34;&gt;Redis&lt;/a&gt; est également requis. Vous pouvez aussi installer Postfix pour supporter l&amp;rsquo;envoi des notifications par mail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install postgresql postgresql-server-dev-all
apt-get install redis-server
apt-get install postfix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enfin un serveur HTTP est requis, Apache pourra convenir si vous l&amp;rsquo;avez déjà installé. Étant donné qu&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;une nouvelle installation, je fais le choix d&amp;rsquo;installer Nginx.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;préparation-de-la-base-de-données&#34;&gt;Préparation de la base de données&lt;/h3&gt;

&lt;p&gt;Les commandes suivantes créent un nouvel utilisateur &lt;code&gt;sentry&lt;/code&gt; avec le mot de passe &lt;code&gt;sentry&lt;/code&gt;, à qui nous allons accorder tous les privilèges sur une nouvelle base de données également nommée &lt;code&gt;sentry&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su postgres
psql
CREATE USER sentry WITH PASSWORD &#39;sentry&#39;;
CREATE DATABASE sentry ENCODING &#39;UTF8&#39;;
GRANT ALL PRIVILEGES ON DATABASE sentry to sentry;
\q
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;création-de-l-environnement-virtuel-python-téléchargement-et-configuration-de-sentry-via-pip&#34;&gt;Création de l&amp;rsquo;environnement virtuel python, téléchargement et configuration de Sentry via pip&lt;/h3&gt;

&lt;p&gt;Nous allons maintenant nous servir de l&amp;rsquo;utilitaire &lt;code&gt;virtualenv&lt;/code&gt; pour créer un environnement virtuel dans lequel nous allons installer Sentry avec la commande &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U virtualenv
virtualenv /www/sentry/
source /www/sentry/bin/activate
pip install -U sentry
pip install -U sentry[postgres]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Utilisons maintenant la commande suivante pour générer un fichier de configuration pour Sentry.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sentry init /etc/sentry.conf.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous allons maintenant éditer ce fichier pour renseigner les informations de base de données. Il faudra également descendre un peu plus bas pour modifier le paramètre &lt;code&gt;SENTRY_URL_PREFIX&lt;/code&gt;. Ce paramètre doit contenir le nom de domaine qui servira à accéder à notre serveur Sentry.&lt;/p&gt;

&lt;p&gt;Pour l&amp;rsquo;exemple, j&amp;rsquo;ai mis &lt;code&gt;sentry.local&lt;/code&gt;, j&amp;rsquo;ai également pensé à ajouter une entrée dans mon fichier &lt;code&gt;/etc/hosts&lt;/code&gt; (sur ma machine hôte) afin de rattacher le domaine à l&amp;rsquo;IP de ma VM. Si vous travaillez sur un serveur en live, vous aurez besoin d&amp;rsquo;un domaine et d&amp;rsquo;une entrée DNS faisant pointer ce domaine vers l&amp;rsquo;IP du serveur.&lt;/p&gt;

&lt;p&gt;Nous allons configurer Nginx comme reverse proxy pour servir les requêtes adressées à Sentry. Pour cette raison, la ligne contenant le paramètre &lt;code&gt;SENTRY_WEB_HOST&lt;/code&gt; sera commentée de façon à ce que Sentry ne réponde qu&amp;rsquo;à des adresses IP locales.&lt;/p&gt;

&lt;p&gt;Mon fichier de configuration est le suivant : &lt;a href=&#34;https://gist.github.com/aubm/00b0ba9a602312e26717#file-sentry-conf-py&#34; target=&#34;_blank&#34;&gt;Voir le gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Une fois que tout est bon, nous pouvons lancer les migrations pour fournir la base de données.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sentry --config=/etc/sentry.conf.py upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sentry est maintenant configuré et écoute sur le port 9000 en local uniquement. Une dernière chose avant de passer à la suite : créons un utilisateur qui nous servira à nous connecter à l&amp;rsquo;interface web.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sentry --config=/etc/sentry.conf.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note : la commande &lt;code&gt;deactivate&lt;/code&gt; permet de sortir de l&amp;rsquo;environnement virtuel python.&lt;/p&gt;

&lt;h3 id=&#34;configurer-nginx&#34;&gt;Configurer Nginx&lt;/h3&gt;

&lt;p&gt;Nous allons ajouter un hôte virtuel, que nous activerons en utilisant les commandes suivantes :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano /etc/nginx/sites-available/sentry.local
ln -s /etc/nginx/sites-available/sentry.local /etc/nginx/sites-enabled/sentry.local
service nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le contenu du fichier est disponible ici : &lt;a href=&#34;https://gist.github.com/aubm/00b0ba9a602312e26717#file-sentry-local-nginx-file&#34; target=&#34;_blank&#34;&gt;Voir le gist&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;lancer-les-processus-avec-supervisor&#34;&gt;Lancer les processus avec Supervisor&lt;/h3&gt;

&lt;p&gt;A ce stade, Sentry est correctement installé et prêt à fonctionner en démarrant ces deux processus :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sentry --config=/etc/sentry.conf.py start http
sentry --config=/etc/sentry.conf.py celery worker -B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le premier correspond à l&amp;rsquo;application web et embarque l&amp;rsquo;interface utilisateur et le webservice. Le second démarre les workers Celery qui traitent les tâches asynchrones qui permettent à Sentry de fonctionner.&lt;/p&gt;

&lt;p&gt;Cependant, pour des questions pratiques nous allons utiliser le gestionnaire de processus Supervisor qui prendra en charge le démarrage de ces deux programmes.&lt;/p&gt;

&lt;p&gt;Commençons par installer Supervisor et générer un fichier de configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;easy_install supervisor
echo_supervisord_conf &amp;gt; /etc/supervisord.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Éditons maintenant le fichier &lt;code&gt;/etc/supervisord.conf&lt;/code&gt; pour y ajouter (à la fin) le contenu de &lt;a href=&#34;https://gist.github.com/aubm/00b0ba9a602312e26717#file-end-of-supervisord-conf&#34; target=&#34;_blank&#34;&gt;ce gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enfin, la commande suivante démarrera Supervisor et Sentry par la même.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;supervisord
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;utiliser-sentry-avec-des-applications-php&#34;&gt;Utiliser Sentry avec des applications PHP&lt;/h2&gt;

&lt;h3 id=&#34;installation-de-raven-php&#34;&gt;Installation de raven-php&lt;/h3&gt;

&lt;p&gt;La première chose à faire est de télécharger le paquet raven-php. Utilisons composer et ajoutons le paquet comme dépendance pour le projet.&lt;/p&gt;

&lt;p&gt;Voilà le contenu du fichier &lt;code&gt;composer.json&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;raven/raven&amp;quot;: &amp;quot;dev-master&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une fois fait la commande &lt;code&gt;composer install&lt;/code&gt; se chargera de télécharger la dernière version de la librairie.&lt;/p&gt;

&lt;p&gt;Enfin - si ce n&amp;rsquo;est pas déjà fait - ajoutons la ligne suivante en début de fichier pour configurer le chargement automatique des classes du paquet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once __DIR__ . &#39;/vendor/autoload.php&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;envoyer-nos-premiers-messages&#34;&gt;Envoyer nos premiers messages&lt;/h3&gt;

&lt;p&gt;Nous allons créer un objet de type &lt;code&gt;Raven_Client&lt;/code&gt; que nous utiliserons pour communiquer nos erreurs au serveur Sentry.&lt;/p&gt;

&lt;p&gt;Voilà les lignes de code à ajouter à la suite de notre fichier :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sentry_api_key = &#39;http://21e21b43f3834e04b826ac24f9ef8cc9:acc747a904dc446793c5d31d9406ec79@sentry.local/2&#39;; 
$sentry_client = new Raven_Client($sentry_api_key);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La valeur de la variable &lt;code&gt;$sentry_api_key&lt;/code&gt; est propre à un projet. Cette information se récupère via l&amp;rsquo;interface web de Sentry en naviguant dans le projet, puis &amp;ldquo;Settings&amp;rdquo; puis &amp;ldquo;API Keys&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Il ne reste plus qu&amp;rsquo;à envoyer notre premier message :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sentry_client-&amp;gt;captureMessage(&#39;Message test !&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Capturer une exception est tout aussi simple en utilisant par exemple le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;try {
    throw new Exception(&#39;Exception test&#39;, 500); 
} catch (Exception $e) { 
    $sentry_client-&amp;gt;captureException($e);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
&lt;img src=&#34;http://www.aubm.net/img/message_exception_test.png&#34; alt=&#34;Affichage des messages d&#39;erreur dans l&#39;interface web de Sentry&#34; class=&#34;img-responsive&#34;/&gt;
&lt;figcaption&gt;Les messages tels qu&#39;ils sont affichés dans l&#39;interface web de Sentry.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;enregistrer-sentry-comme-gestionnaire-d-erreurs&#34;&gt;Enregistrer Sentry comme gestionnaire d&amp;rsquo;erreurs&lt;/h3&gt;

&lt;p&gt;Il est possible de configurer Sentry comme gestionnaire d&amp;rsquo;erreurs et d&amp;rsquo;exceptions avec le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$error_handler = new Raven_ErrorHandler($sentry_client); 
set_error_handler(array($error_handler, &#39;handleError&#39;));
 set_exception_handler(array($error_handler, &#39;handleException&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avec cette configuration, toutes les erreurs et les exceptions non &amp;ldquo;catchées&amp;rdquo; seront automatiquement envoyées à Sentry.&lt;/p&gt;

&lt;h3 id=&#34;configurer-sentry-pour-symfony2&#34;&gt;Configurer Sentry pour Symfony2&lt;/h3&gt;

&lt;p&gt;Configurer Sentry dans une application utilisant le framework full-stack de Symfony2 peut se faire de façon très simple grâce à &lt;a href=&#34;https://github.com/Seldaek/monolog/blob/master/src/Monolog/Handler/RavenHandler.php&#34; target=&#34;_blank&#34;&gt;Monolog qui intègre un handler pour Sentry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dans la configuration de Monolog, dans le fichier &lt;code&gt;config_prod.yml&lt;/code&gt; par exemple, il suffit de configurer ce handler.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;monolog:
    handlers:
        main:
            type: fingers_crossed
            action_level: error
            handler: nested
        nested:
            type:  stream
            path:  &amp;quot;%kernel.logs_dir%/%kernel.environment%.log&amp;quot;
            level: debug
        console:
            type:  console
        sentry:
            type: raven
            dsn: http://21e21b43f3834e04b826ac24f9ef8cc9:acc747a904dc446793c5d31d9406ec79@sentry.local/2
            level: notice
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ressources&#34;&gt;Ressources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sentry.readthedocs.org/en/latest/quickstart/&#34; target=&#34;_blank&#34;&gt;Guide d&amp;rsquo;installation officiel de Sentry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://virtualenv.pypa.io/en/latest/&#34; target=&#34;_blank&#34;&gt;Pour en apprendre plus sur les virtualenv python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/pip&#34; target=&#34;_blank&#34;&gt;Pour en apprendre plus sur le gestionnaire de paquets python pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://supervisord.org/installing.html&#34; target=&#34;_blank&#34;&gt;Pour en apprendre plus sur le gestionnaire de processus supervisor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://packagist.org/packages/raven/raven&#34; target=&#34;_blank&#34;&gt;Page packagist de raven-php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getcomposer.org/doc/00-intro.md&#34; target=&#34;_blank&#34;&gt;Introduction au gestionnaire de paquets php composer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Astuce PhpStorm : partager ses live templates</title>
      <link>http://www.aubm.net/blog/astuce-phpstorm-partager-ses-lives-templates/</link>
      <pubDate>Sat, 11 Oct 2014 18:39:40 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/astuce-phpstorm-partager-ses-lives-templates/</guid>
      <description>

&lt;h2 id=&#34;coder-vite-et-bien&#34;&gt;Coder vite et bien&lt;/h2&gt;

&lt;p&gt;Le choix de l&amp;rsquo;IDE est important dans le sens où celui-ci peut apporter une réelle valeur ajoutée dans le travail du développeur. En ce qui me concerne, j&amp;rsquo;ai vendu mon âme à &lt;a href=&#34;https://www.jetbrains.com/&#34; target=&#34;_blank&#34;&gt;Jetbrains&lt;/a&gt;. Une chose que j&amp;rsquo;apprécie particulièrement dans leurs solutions est la facilité avec laquelle il est possible de configurer des live templates. Cet article porte sur PhpStorm mais peut être reporté sur d&amp;rsquo;autres IDE de l&amp;rsquo;éditeur (RubyMine, PyCharm, etc &amp;hellip;).&lt;/p&gt;

&lt;p&gt;Les live templates, c&amp;rsquo;est cette fonctionnalité qui permet d&amp;rsquo;accélérer l&amp;rsquo;écriture du code à l&amp;rsquo;aide de &amp;ldquo;shortcuts&amp;rdquo; servant à générer des fragments de code entier. Un exemple ?&lt;/p&gt;

&lt;p&gt;Saisissez &amp;lsquo;fore&amp;rsquo; dans du code PHP, puis utilisez la touche tab. Le fragment de code suivant sera automatiquement généré :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;foreach ( as $) {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chaque appui sur la touche tab fera avancer le curseur à une position pré-déterminée vous permettant d&amp;rsquo;achever l&amp;rsquo;écriture de votre boucle en moins de temps qu&amp;rsquo;il n&amp;rsquo;en faut pour le dire. Essayez aussi d&amp;rsquo;autres shortcuts comme &lt;code&gt;forek&lt;/code&gt;, &lt;code&gt;pubf&lt;/code&gt;, etc &amp;hellip;&lt;/p&gt;

&lt;p&gt;Jetbrains propose un petit article détaillant la procédure à suivre pour &lt;a class=&#34;https://www.jetbrains.com/phpstorm/webhelp/creating-and-editing-live-templates.html&#34; target=&#34;_blank&#34;&gt;la création et l&amp;rsquo;éditions de live templates personnalisés&lt;/a&gt;. Sa lecture pourrait cependant ne pas être utile, inspirez vous simplement des live templates proposés par défaut pour créer les vôtres. Pour les trouver, rendez vous dans les paramètres de l&amp;rsquo;IDE, section &amp;ldquo;Live Templates&amp;rdquo;.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&#34;img-responsive&#34; src=&#34;http://www.aubm.net/img/php_storm_live_templates.png&#34; alt=&#34;Configuration des live templates dans PhpStorm&#34; width=&#34;900&#34; height=&#34;542&#34;&gt;
&lt;figcaption&gt;La fenêtre de configuration des live templates dans PHPStorm.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Le bouton + vous permet d&amp;rsquo;ajouter un nouveau live template. Considérez également l&amp;rsquo;utilisation des groupes de templates pour vous y retrouver plus facilement.&lt;/p&gt;

&lt;h2 id=&#34;partager-ses-live-templates&#34;&gt;Partager ses live templates&lt;/h2&gt;

&lt;p&gt;Si vous utilisez beaucoup les live templates, vous aurez certainement envie de retrouver vos précieux sur l&amp;rsquo;ensemble de vos postes, et ce bien entendu sans avoir à les re-saisir à la main. Je vous propose donc dans cet article la solution que j&amp;rsquo;utilise pour y parvenir.&lt;/p&gt;

&lt;p&gt;Les live templates personnalisés que vous créez sont enregistrés dans des fichiers xml. Selon votre environnement ils pourraient se trouver quelque part dans &lt;code&gt;~/Library/Preferences/WebIde{VERSION}/templates&lt;/code&gt; ou &lt;code&gt;C:\Users\{USERNAME}\.WebIde{VERSION}\templates&lt;/code&gt;. Chaque groupe de templates correspond à un fichier xml.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;idée est simple : versionner ce répertoire avec git (ou un autre VCS). Pour l&amp;rsquo;exemple, j&amp;rsquo;ai créé un nouveau repository sur mon compte Github, et me voici dans mon terminal :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/Library/Preferences/WebIde80/templates
git init
git remote add origin git@github.com:aubm/jetbrains-live-templates.git
git add -A
git commit -m &amp;quot;First commit&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et sur mon autre poste :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/Library/Preferences/WebIde80/templates
git init
git remote add origin git@github.com:aubm/jetbrains-live-templates.git
git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il faudra penser à redémarrer PhpStorm pour que les modifications effectuées dans le ou les fichiers xml soient prises en compte.&lt;/p&gt;

&lt;p&gt;Je peux maintenant enrichir mes live templates à volonté, puis les récupérer presque sans effort d&amp;rsquo;un poste à l&amp;rsquo;autre. En espérant que certains trouveront cette astuce utile, merci pour la lecture !&lt;/p&gt;

&lt;p&gt;Aurélien.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>La pagination avec Doctrine : la bonne méthode</title>
      <link>http://www.aubm.net/blog/la-pagination-avec-doctrine-la-bonne-methode/</link>
      <pubDate>Mon, 06 Oct 2014 19:45:13 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/la-pagination-avec-doctrine-la-bonne-methode/</guid>
      <description>

&lt;p&gt;Cet article a pour but de venir compléter la documentation de Doctrine, et plus particulièrement &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/tutorials/pagination.html&#34; target=&#34;_blank&#34;&gt;la section abordant la pagination&lt;/a&gt;, en y apportant quelques précisions, et surtout quelques exemples. En espérant que d&amp;rsquo;autres y trouveront une utilité, ayant moi-même déjà été confronté à quelques petites incompréhensions quant à l&amp;rsquo;utilisation du &lt;a href=&#34;http://www.doctrine-project.org/api/orm/2.4/class-Doctrine.ORM.Tools.Pagination.Paginator.html&#34; target=&#34;_blank&#34;&gt;Paginator de Doctrine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Les exemples de code sont extraits d&amp;rsquo;une application blog exemple réalisée à l&amp;rsquo;aide du framework Symfony 2. Cette application comporte une entité Post.&lt;/p&gt;

&lt;h2 id=&#34;pagination-simple&#34;&gt;Pagination simple&lt;/h2&gt;

&lt;p&gt;Le but est d&amp;rsquo;afficher un maximum de 20 posts par page, ainsi que le nombre total de posts. Doctrine nous propose d&amp;rsquo;utiliser la classe &lt;code&gt;Doctrine\ORM\Tools\Pagination\Paginator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Voici comment utiliser cette classe :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class PostRepository extends EntityRepository
{
    public function getPosts($first_result, $max_results = 20)
    {
        $qb = $this-&amp;gt;createQueryBuilder(&#39;post&#39;);
        $qb
            -&amp;gt;select(&#39;post&#39;)
            -&amp;gt;setFirstResult($first_result)
            -&amp;gt;setMaxResults($max_results);

        $pag = new Paginator($qb);
        return $pag;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le constructeur prend en premier paramètre une instance de &lt;code&gt;Doctrine\ORM\Query&lt;/code&gt; ou de &lt;code&gt;Doctrine\ORM\QueryBuilder&lt;/code&gt;. Paginator implémente les interfaces Countable et IteratorAggregate, si bien qu&amp;rsquo;obtenir le total d&amp;rsquo;enregistrements en base de données est aussi simple que ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;count($pag);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lister les 20 premiers posts peut se faire de la façon suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$posts = $post_repository-&amp;gt;getPosts(0);
foreach ($posts as $post) {
    echo $post-&amp;gt;getTitle() . &#39;&amp;amp;lt;br /&amp;amp;gt;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En bonus : le code du template (twig) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% block body %}
    &amp;lt;ul&amp;gt;
        {% for post in posts %}
            &amp;lt;li&amp;gt;{{ post.title }}&amp;lt;/li&amp;gt;
        {% endfor %}
    &amp;lt;/ul&amp;gt;
    &amp;lt;p&amp;gt;Total : {{ posts.count }}&amp;lt;/p&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pagination-avec-jointure-one-to-many-ou-many-to-many&#34;&gt;Pagination avec jointure one-to-many ou many-to-many&lt;/h2&gt;

&lt;p&gt;Dans certains cas, Doctrine peut utiliser le langage natif du moteur de base de données pour limiter le nombre de résultats et obtenir le total d&amp;rsquo;enregistrements. Dans d&amp;rsquo;autres cas, il n&amp;rsquo;est pas possible de procéder ainsi, et notamment lorsque la requête contient des jointures sur des tables comportant des relations one-to-many ou many-to-many.&lt;/p&gt;

&lt;p&gt;Dans ces cas de figure, Doctrine va procéder différemment. Cette procédure, tout à fait transparente, est expliquée &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/tutorials/pagination.html&#34; target=&#34;_blank&#34;&gt;dans la documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ajoutons une nouvelle entité Tag qui pourra appartenir à plusieurs Post.&lt;/p&gt;

&lt;p&gt;La méthode de la classe repository ressemble maintenant à ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function getPosts($first_result, $max_results = 20)
{
    $qb = $this-&amp;gt;createQueryBuilder(&#39;post&#39;);
    $qb
        -&amp;gt;select(&#39;post&#39;)
        -&amp;gt;addSelect(&#39;tag&#39;)
        -&amp;gt;leftJoin(&#39;post.tags&#39;, &#39;tag&#39;)
        -&amp;gt;setFirstResult($first_result)
        -&amp;gt;setMaxResults($max_results);

    $pag = new Paginator($qb);
    return $pag;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et le template mis à jour :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% block body %}
    &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;Post&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Tags&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
        {% for post in posts %}
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;{{ post.title }}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    {% for tag in post.tags %}
                        {{ tag.name }}
                    {% endfor %}
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        {% endfor %}
        &amp;lt;/tbody&amp;gt;
        &amp;lt;tfooter&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;Total : {{ posts|length }}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tfooter&amp;gt;
    &amp;lt;/table&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La raison d&amp;rsquo;être de cet article est en réalité le point que je vais aborder maintenant. Il s&amp;rsquo;agit d&amp;rsquo;un piège dans lequel je suis tombé lors de mes premiers essais avec la classe Paginator.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;objet Paginator permet d&amp;rsquo;accéder à notre objet Query passé en paramètre du constructeur. Si bien que l&amp;rsquo;on peut être tenté de l&amp;rsquo;exploiter directement dans notre template, boycottant ainsi l&amp;rsquo;utilisation du Paginator. Considérez le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$pag = $post_repository-&amp;gt;getPosts(0);
$posts = $pag-&amp;gt;getQuery()-&amp;gt;getResult();
foreach ($posts as $post) {
    echo $post-&amp;gt;getTitle() . &#39;&amp;lt;br /&amp;gt;&#39;;
}
echo &#39;Total : &#39; . $pag-&amp;gt;count();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si la requête ne comporte pas de jointure, le résultat affiché sera le même. Les suprises arriveront lorsque la requête comportera des jointures. Des anomalies pourraient se produire en raison du fait que l&amp;rsquo;hydratation d&amp;rsquo;un objet pourrait nécessiter la lecture de plusieurs lignes.&lt;/p&gt;

&lt;p&gt;Un bon moyen d&amp;rsquo;obtenir le tableau des 20 premiers Post est le suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$posts = $pag-&amp;gt;getIterator()-&amp;gt;getArrayCopy();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merci pour la lecture et n&amp;rsquo;hésitez pas à partager :)&lt;/p&gt;

&lt;p&gt;Code de l&amp;rsquo;application exemple : &lt;a href=&#34;https://github.com/aubm/tuto-doctrine-pagination&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/aubm/tuto-doctrine-pagination&#34;&gt;https://github.com/aubm/tuto-doctrine-pagination&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aurélien.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retour d&#39;expérience sur Joomla, point de vue d&#39;un développeur</title>
      <link>http://www.aubm.net/blog/retour-dexperience-sur-joomla-point-de-vue-dun-developpeur/</link>
      <pubDate>Wed, 01 Oct 2014 00:07:05 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/retour-dexperience-sur-joomla-point-de-vue-dun-developpeur/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Joomla - à l&amp;rsquo;instar de Wordpress et Drupal -  est un CMS permettant à des utilisateurs non-développeurs d&amp;rsquo;installer et de configurer un site internet. Le CMS s&amp;rsquo;adresse également aux développeurs, en leur proposant une API leur permettant d&amp;rsquo;étendre ses fonctionnalités. D&amp;rsquo;aucuns sont alors tentés de choisir Joomla pour démarrer un projet impliquant du développement spécifique. Sur le papier l&amp;rsquo;argumentaire est imparable : pourquoi ne pas utiliser le CMS comme base pour ce projet, pour lequel Joomla sorti de la boite couvre 80% des besoins du client ? C&amp;rsquo;est autant de temps de gagner.&lt;/p&gt;

&lt;p&gt;Pendant presque deux ans, j&amp;rsquo;ai eu l&amp;rsquo;occasion de prendre part à de nombreux développements sur Joomla. Cette expérience m&amp;rsquo;a conduit à penser que dans certains cas, cette logique est applicable. En effet, pour un budget moyen et dans le cas d&amp;rsquo;un projet de site web répondant aux caractéristiques classiques d&amp;rsquo;un blog, d&amp;rsquo;une vitrine ou éventuellement d&amp;rsquo;un e-commerce, cette hypothèse semble se vérifier. Il est cependant de nombreux cas où le besoin métier du client représentant les 20% de développement restant représentent en réalité bien plus que 20% du temps de développement global. Pour ce type de projets, mieux vaut s&amp;rsquo;assurer de choisir un bon environnement de développement pour travailler.&lt;/p&gt;

&lt;p&gt;Alors Joomla est-il un bon terrain de jeu ? Sur le sujet ma position est claire : non. Dans cet article je vais tâcher de défendre ce point de vue.
Sans vouloir tomber dans du troll, certains points de vue restent personnels et donc discutables. Il pourrait être intéressant de les confronter à des visions différentes.&lt;/p&gt;

&lt;h2 id=&#34;modulaire-mais-pas-extensible&#34;&gt;Modulaire mais pas extensible&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;argumentaire &amp;ldquo;commercial&amp;rdquo; de Joomla repose sur sa modularité. L&amp;rsquo;architecture du CMS permet effectivement de développer des extensions afin d&amp;rsquo;ajouter des fonctionnalités sans altérer le core du logiciel. Vous pouvez donc envisager de développer un forum, un composant de petites annonces, ou encore une solution permettant d&amp;rsquo;exporter des données vers un CRM ; le tout en cohabitation avec la gestion du blog et des utilisateurs fournie par le CMS.&lt;/p&gt;

&lt;p&gt;Bien, je souhaite maintenant étendre le composant de gestion des contenus du site afin d&amp;rsquo;y ajouter la possibilité de renseigner un champ supplémentaire. La désillusion commence ici, car à problème simple, solution &amp;hellip; pas simple. Malheureusement le CMS ne permet pas d&amp;rsquo;étendre les fonctionnalités des composants natifs. Pour un besoin comme celui-ci il faudra passer par le développement d&amp;rsquo;un composant à part entière afin d&amp;rsquo;ajouter les fonctionnalités manquantes (ou éventuellement l&amp;rsquo;utilisation d&amp;rsquo;un composant tiers, mais cela pourrait apporter de nouvelles contraintes).&lt;/p&gt;

&lt;p&gt;On serait tenté de dire qu&amp;rsquo;il s&amp;rsquo;agit là d&amp;rsquo;un exemple isolé et que ces problématiques ne sont pas récurrentes. J&amp;rsquo;ai pourtant été confronté à des cas similaires de nombreuses fois. La raison pour laquelle cela est réellement gênant est que ces problèmes trahissent en vérité des erreurs importantes de conception. Dans le meilleur des mondes, Joomla mettrait à disposition un composant d&amp;rsquo;injection de dépendances couplé à une stratégie d&amp;rsquo;abstraction sur les classes utilisées dans les composants du core. Ainsi une hypothétique classe concrète &lt;code&gt;Content&lt;/code&gt; pourrait être remplacée par une classe &lt;code&gt;MyCustomContent&lt;/code&gt;, quelques détails à régler, un petit script de migration pour modifier la structure de la base de données et le tour est joué. On est très loin de ça.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;aborde là des notions relatives au design objet, le but n&amp;rsquo;est pas de m&amp;rsquo;égarer dans des idées trop éloignées du sujet. Je suis conscient que l&amp;rsquo;utilisation de certaines techniques pourrait sembler surévaluée et en ça il s&amp;rsquo;agit là d&amp;rsquo;un point de vue discutable. Ceci étant dit, s&amp;rsquo;il est question de choisir un environnement pour développer une application relativement complexe, alors s&amp;rsquo;orienter vers une solution plus ouverte me semble plus judicieux. Car si le problème mis en évidence ici est relatif à la couche fonctionnelle du CMS, des erreurs similaires existent au niveau du framework.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/saquedeneu.png&#34; alt=&#34;Saquedeneu&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Force est de constater que les contributeurs de Joomla fournissent un travail important pour améliorer la qualité du code. Je précise au passage que certains aspects sont intéressants (comme notamment le fonctionnement des plugins). Cependant Joomla (à l&amp;rsquo;origine fork de Mambo) est construit de manière empirique et à ce stade du projet, la tâche est herculéenne. Conscients des faiblesses de Drupal 7, les développeurs de Drupal 8 ont choisi de reprendre le projet à zéro.&lt;/p&gt;

&lt;h2 id=&#34;joomla-le-vilain-petit-canard&#34;&gt;Joomla le vilain petit canard&lt;/h2&gt;

&lt;h3 id=&#34;psr-quoi&#34;&gt;PSR quoi ?&lt;/h3&gt;

&lt;p&gt;A l&amp;rsquo;heure où j&amp;rsquo;écris, une partie du framework est réécrite avec dans l&amp;rsquo;optique d&amp;rsquo;embrasser des techniques de codage plus au goût de ce qui se fait aujourd&amp;rsquo;hui dans le monde de PHP. Bien que pour le développeur d&amp;rsquo;extensions cela relève plus de l&amp;rsquo;anecdote qu&amp;rsquo;autre chose, c&amp;rsquo;est plutôt une bonne nouvelle. Car si Joomla 3.4 requiert au minimum PHP 5.3, l&amp;rsquo;utilisation des namespaces dans le code des extensions suscitera éventuellement de timides &amp;ldquo;pourquoi pas ?&amp;rdquo; mais toujours pas d&amp;rsquo;applaudissements. On attend avec impatience le jour où l&amp;rsquo;auto-chargement des classes conforme PSR-0 ou PSR-4 sera géré par le CMS. En attendant vous pouvez continuer à le configurer manuellement pour chacune de vos classes.&lt;/p&gt;

&lt;h3 id=&#34;un-router-pour-le-moins-original&#34;&gt;Un router pour le moins original&lt;/h3&gt;

&lt;p&gt;Les composants du CMS doivent respecter une structure pour fonctionner. Des contrôleurs sont définis pour isoler la logique de l&amp;rsquo;application. En réalité cette responsabilité est partagée entre les contrôleurs et les vues. C&amp;rsquo;est un peu différent de ce qu&amp;rsquo;on peut trouver dans d&amp;rsquo;autres frameworks mais pourquoi pas.&lt;/p&gt;

&lt;p&gt;Ce qui me laisse un peu perplexe en revanche c&amp;rsquo;est le fonctionnement du router. Le contrôleur et l&amp;rsquo;action qui prendront en charge la requête sont définis par des variables de requête. Si bien que cette requête &lt;code&gt;index.php?option=com_forum&amp;amp;task=message.save&lt;/code&gt; sera prise en charge par la méthode &lt;code&gt;save()&lt;/code&gt; du contrôleur &lt;code&gt;Message&lt;/code&gt; du composant &lt;code&gt;Forum&lt;/code&gt;. Le flow d&amp;rsquo;exécution de la requête est donc sous le contrôle partiel de l&amp;rsquo;utilisateur du site. Il est possible de la même façon de déterminer le fichier de vue et le template à utiliser en forçant une valeur pour les variables &lt;code&gt;view&lt;/code&gt; et &lt;code&gt;tmpl&lt;/code&gt;. Pour info, si une combinaison de valeurs ne fonctionne pas, &lt;a href=&#34;http://www.joomla.org/index.php?option=com_content&amp;task=john.doe&#34; target=&#34;_blank&#34;&gt;l&amp;rsquo;application renverra une 500&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pour utiliser des urls plus &amp;ldquo;SEO friendly&amp;rdquo;, il faudra donc mettre en place un fichier &lt;code&gt;router.php&lt;/code&gt; à l&amp;rsquo;intérieur du composant, fichier dans lequel la réécriture des urls est définie programmatiquement. Pas franchement simple donc, à titre d&amp;rsquo;exemple, le fichier router du composant de gestion de contenu embarqué dans le CMS &lt;a href=&#34;https://github.com/joomla/joomla-cms/blob/staging/components/com_content/router.php&#34; target=&#34;_blank&#34;&gt;compte pas loin de 500 lignes&lt;/a&gt;, quid des performances ? Sans compter qu&amp;rsquo;il est impossible de personnaliser les routes des composants natifs de Joomla.&lt;/p&gt;

&lt;p&gt;A noter qu&amp;rsquo;activer la réécriture des urls n&amp;rsquo;empêchera pas les utilisateurs de la boycotter et d&amp;rsquo;accéder à &lt;code&gt;index.php?option=com_....&lt;/code&gt;. Cela ne les empêchera pas non plus d&amp;rsquo;accéder aux autres fichiers du site d&amp;rsquo;ailleurs, étant donné que le point d&amp;rsquo;entrée (supposé) de l&amp;rsquo;application est situé à un niveau d&amp;rsquo;arborescence supérieur aux fichiers des composants. Forçant ainsi à vérifier la déclaration de la constante &lt;code&gt;_JEXEC&lt;/code&gt; au début de chaque fichier (pas très élégant &amp;hellip;), et accessoirement de placer un &lt;code&gt;index.html&lt;/code&gt; vide dans chaque sous répertoire.&lt;/p&gt;

&lt;h3 id=&#34;a-propos-d-élégance&#34;&gt;A propos d&amp;rsquo;élégance&lt;/h3&gt;

&lt;p&gt;A propos d&amp;rsquo;élégance (ou plus exactement de praticité), il y a un certain nombre de points qui méritent d&amp;rsquo;être soulignés.&lt;/p&gt;

&lt;p&gt;Par exemple, si une mise à jour d&amp;rsquo;un composant du site implique des modifications dans la structure de la base de données, il est préférable d&amp;rsquo;ajouter un fichier de migration afin de faciliter la mise à jour de ce composant sur le serveur de production. Un peu dommage que ces fichiers contiennent des requêtes SQL qu&amp;rsquo;il faut écrire à la main. Doctrine ou Eloquent (à titre d&amp;rsquo;exemples) peuvent tous deux générer des scripts équivalents via un CLI avec en bonus des possibilités de rollback (ce qui n&amp;rsquo;est pas le cas ici je précise).&lt;/p&gt;

&lt;p&gt;En parlant d&amp;rsquo;ORM, à noter que Joomla n&amp;rsquo;embarque pas d&amp;rsquo;ORM. Il faudra se contenter d&amp;rsquo;un composant d&amp;rsquo;abstraction sur la base de données (une petite sur-couche à PDO) présentant au moins l&amp;rsquo;avantage de pouvoir construire des requêtes SQL plus facilement en manipulant des objets. C&amp;rsquo;est regrettable, surtout quand il s&amp;rsquo;agit d&amp;rsquo;extraire des données de plusieurs tables, l&amp;rsquo;utilisation d&amp;rsquo;un ORM peut faire gagner un temps précieux.&lt;/p&gt;

&lt;p&gt;Parmi les éléments qui me viennent à l&amp;rsquo;esprit, j&amp;rsquo;évoquerai aussi la définition des formulaires dans des fichiers XML. L&amp;rsquo;idée est bonne sur la papier dans la mesure où cela vise à faciliter des tâches fastidieuses comme la validation des données ou la génération de templates. Dans la pratique il est des cas où cette approche apporte plus de contraintes qu&amp;rsquo;autre chose. Quid des formulaires dynamiques par exemple ?&lt;/p&gt;

&lt;p&gt;Rien de bien grave dans tout ça me direz-vous et c&amp;rsquo;est sans doute vrai. Rien de véritablement bloquant pour achever le développement du site, mais je rappelle qu&amp;rsquo;il est question de choisir un environnement de développement confortable permettant de travailler efficacement (et donc plus rapidement). Sur les points cités plus haut comme sur de nombreux autres, Joomla n&amp;rsquo;est clairement pas au niveau de ce que proposent des frameworks concurrents.&lt;/p&gt;

&lt;h3 id=&#34;une-maturité-discutable&#34;&gt;Une maturité discutable&lt;/h3&gt;

&lt;p&gt;Si il semble qu&amp;rsquo;aujourd&amp;rsquo;hui, la culture du test commence à rentrer dans les moeurs, ce n&amp;rsquo;était pas le cas il y a encore relativement peu de temps. La communauté semble effectivement avoir &lt;a href=&#34;http://developer.joomla.org/news/597-release-postmortem.html&#34; target=&#34;_blank&#34;&gt;appris de ses erreurs&lt;/a&gt; et une grande partie du code est aujourd&amp;rsquo;hui (enfin) couverte par des tests. Ces tests ne garantissent évidemment pas le fonctionnement de l&amp;rsquo;application mais permettent au moins de contrôler un certain nombre de régressions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.aubm.net/img/iron_man.gif&#34; alt=&#34;Iron man&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Cela reste un avis très personnel mais je ne peux m&amp;rsquo;empêcher de penser qu&amp;rsquo;une prise de conscience aussi tardive pourrait témoigner d&amp;rsquo;un certain manque de maturité du logiciel, ce qui est assez paradoxal étant donné son ancienneté.&lt;/p&gt;

&lt;p&gt;On pourrait en dire autant sur la documentation officielle pour les développeurs, qui aujourd&amp;rsquo;hui encore paraît assez maigre (notamment en terme d&amp;rsquo;exemples) à côté de la quantité de ressources que l&amp;rsquo;on peut trouver sur les sites respectifs de Laravel ou de Symfony (pour ne citer qu&amp;rsquo;eux).
Encore un paradoxe d&amp;rsquo;ailleurs, étant donné que ce n&amp;rsquo;est pourtant pas le contenu qui manque entre &lt;a class=&#34;http://dev.joomla.fr/&#34; target=&#34;_blank&#34;&gt;dev.joomla.fr&lt;/a&gt;, &lt;a href=&#34;http://developer.joomla.org/&#34; target=&#34;_blank&#34;&gt;developper.joomla.org&lt;/a&gt; ou encore &lt;a href=&#34;https://docs.joomla.org/Portal:Developers&#34; target=&#34;_blank&#34;&gt;docs.joomla.org/Portal:Developers&lt;/a&gt; &amp;hellip; J&amp;rsquo;y mets peut-être un peu de mauvaise volonté mais quelqu&amp;rsquo;un pourrait me dire par où commencer ?&lt;/p&gt;

&lt;h2 id=&#34;performance-scalabilité-et-maintenance&#34;&gt;Performance, scalabilité et maintenance&lt;/h2&gt;

&lt;p&gt;La performance c&amp;rsquo;est souvent la bête noire des CMS. En tout cas pour ceux orientés &amp;ldquo;end-user&amp;rdquo;, étant donné que beaucoup font le choix de stocker un (trop) grand nombre d&amp;rsquo;informations en base de données et que les accès I/O sont généralement les opérations les plus couteuses.&lt;/p&gt;

&lt;p&gt;Joomla peine à déroger à la règle, c&amp;rsquo;est effectivement délicat quand le choix est fait de stocker en base de données, des données relatives au paramétrage des composants par exemple. &lt;a href=&#34;http://www.chronoengine.com/downloads/chronoforms.html&#34; target=&#34;_blank&#34;&gt;Certains composants&lt;/a&gt; poussent le vice assez loin en allant jusqu&amp;rsquo;à stocker en base de données des fragments de code destinés à être exécutés.&lt;/p&gt;

&lt;p&gt;La complexification des requêtes SQL peut également être une conséquence indirecte de la nature modulaire mais peu extensible du CMS (cf. début de l&amp;rsquo;article). En effet si ajouter une information sur le numéro de téléphone des utilisateurs ne peut être fait en modifiant directement la table des utilisateurs, un composant tiers n&amp;rsquo;aura alors d&amp;rsquo;autre choix que d&amp;rsquo;ajouter une table &lt;code&gt;users_extra_data&lt;/code&gt; comportant une clé étrangère vers la table &lt;code&gt;users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Une mauvaise optimisation de la base de données ne représente pas un problème majeur au départ. On peut toujours investir 200 euros de plus par an pour que l&amp;rsquo;application s&amp;rsquo;exécute convenablement. C&amp;rsquo;est sur le moyen/long terme que ces problèmes peuvent devenir gênants, alors que le traffic augmente sur le site, la besoin en resources augmentera de manière exponentielle.&lt;/p&gt;

&lt;p&gt;A noter également qu&amp;rsquo;en terme de maintenance, qu&amp;rsquo;il s&amp;rsquo;agisse de versionner le projet ou de configurer un environnement de test, cette mauvaise utilisation de la base de données ne facilitera pas la tâche.&lt;/p&gt;

&lt;h2 id=&#34;le-mot-de-la-fin&#34;&gt;Le mot de la fin&lt;/h2&gt;

&lt;p&gt;Le tour n&amp;rsquo;est pas encore complet et il y aurait évidemment encore beaucoup à dire (en bon comme en mauvais). Je pense cependant avoir donné suffisamment d&amp;rsquo;éléments pour défendre mon point de vue.&lt;/p&gt;

&lt;p&gt;N&amp;rsquo;hésitez pas à commenter pour donner votre retour, et merci pour la lecture !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webservice Restful avec Symfony2 : gérer les champs de type Datetime</title>
      <link>http://www.aubm.net/blog/webservice-restful-avec-symfony2-gerer-les-champs-de-type-datetime/</link>
      <pubDate>Thu, 03 Jul 2014 19:24:23 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/webservice-restful-avec-symfony2-gerer-les-champs-de-type-datetime/</guid>
      <description>&lt;p&gt;Si vous choisissez Symfony pour construire une application de webservice, il est un détail à relever à propos des champs de type Datetime dans le cas d&amp;rsquo;utilisation des objets formulaires.&lt;/p&gt;

&lt;p&gt;Prenons par exemple ce code qui génère un formulaire à partir des champs d&amp;rsquo;une entité Post fictive :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$builder
    -&amp;gt;add(&#39;title&#39;)
    -&amp;gt;add(&#39;content&#39;)
    -&amp;gt;add(&#39;published&#39;)
     ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans cet exemple, le champ published est de type Datetime. Si on utilise ce formulaire pour générer du code HTML, Symfony générera pour le champ published le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;label class=&amp;quot;required&amp;quot;&amp;gt;Published&amp;lt;/label&amp;gt;
    &amp;lt;div id=&amp;quot;acme_demobundle_post_published&amp;quot;&amp;gt;
        &amp;lt;div id=&amp;quot;acme_demobundle_post_published_date&amp;quot;&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_date_year&amp;quot; name=&amp;quot;acme_demobundle_post[published][date][year]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;2009&amp;quot;&amp;gt;2009&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2010&amp;quot;&amp;gt;2010&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_date_month&amp;quot; name=&amp;quot;acme_demobundle_post[published][date][month]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;Jan&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;Feb&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_date_day&amp;quot; name=&amp;quot;acme_demobundle_post[published][date][day]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;1&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;2&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&amp;quot;acme_demobundle_post_published_time&amp;quot;&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_time_hour&amp;quot; name=&amp;quot;acme_demobundle_post[published][time][hour]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;0&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;02&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_time_minute&amp;quot; name=&amp;quot;acme_demobundle_post[published][time][minute]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;0&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;02&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A noter que la valeur du champs est construite dans un tableau rassemblant les différents informations year, month, day, etc &amp;hellip;&lt;/p&gt;

&lt;p&gt;Si on utilise ce formulaire pour mettre à jour les informations d&amp;rsquo;un objet Post via une route &lt;code&gt;PUT /posts/{postId}&lt;/code&gt; par exemple, le client devra construire la valeur de l&amp;rsquo;attribut published de la même façon que dans ce formulaire. Soit quelque chose comme ça :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;published[date][year] = 2000
published[date][month] = 12
published[date][day] = 15
published[time][hour] = 12
published[time][minute] = 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voilà qui pourrait convenir, cependant pour une question de simplicité pour le client, nous souhaitons que celui-ci nous envoie l&amp;rsquo;information published de cette façon :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;published = 2000-12-15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour ce faire, la solution est très simple, il suffit de changer la valeur par défaut de certaines options de l&amp;rsquo;entrée published de la classe du formulaire.&lt;/p&gt;

&lt;p&gt;Voici le code du formulaire, modifié de façon à ce qu&amp;rsquo;il se comporte comme nous le souhaitons :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$builder
    -&amp;gt;add(&#39;title&#39;)
    -&amp;gt;add(&#39;content&#39;)
    -&amp;gt;add(&#39;published&#39;, null, array(
        &amp;quot;widget&amp;quot; =&amp;gt; &amp;quot;single_text&amp;quot;,
        &amp;quot;format&amp;quot; =&amp;gt; &amp;quot;yyyy-MM-dd&amp;quot;,
     ))
     ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons défini deux options. L&amp;rsquo;option widget est définie à single_text de manière à ce que le formulaire attende la valeur du champ dans une seule variable. L&amp;rsquo;option format quant à elle permet de définir le format qui est attendu pour la date.&lt;/p&gt;

&lt;p&gt;N&amp;rsquo;hésitez pas à consulter la &lt;a href=&#34;http://symfony.com/fr/doc/current/reference/forms/types/date.html&#34; target=&#34;_blank&#34;&gt;documentation de Symfony&lt;/a&gt; pour en savoir plus sur ces options ainsi que sur les autres options disponibles pour le type champ Date.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Astuce : le serveur de développement embarqué de PHP</title>
      <link>http://www.aubm.net/blog/astuce-le-serveur-de-developpement-embarque-de-php/</link>
      <pubDate>Thu, 22 May 2014 02:15:15 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/astuce-le-serveur-de-developpement-embarque-de-php/</guid>
      <description>

&lt;p&gt;Bonjour, ce petit article pour partager une de mes découvertes récentes. Il s&amp;rsquo;agit du serveur web interne de PHP, intégré depuis la version 5.4. La lecture de cette article ne vous apprendra surement pas grand chose si vous avez déjà connaissance de cette fonctionnalité.&lt;/p&gt;

&lt;p&gt;Pour en savoir plus, rendez vous directement sur la &lt;a href=&#34;http://php.net/manual/fr/features.commandline.webserver.php&#34; target=&#34;_blank&#34;&gt;documentation officielle de PHP&lt;/a&gt;. La documentation explique comment utiliser de façon très simple ce service. A noter que celui n&amp;rsquo;est pas pensé pour être utilisé dans un environnement de production, mais est destiné à servir dans un environnement de développement. Il n&amp;rsquo;est, par conséquent, plus nécessaire de configurer une nouvelle vhost sur votre serveur http (typiquement apache ou nginx), et d&amp;rsquo;ajouter une entrée dans le fichier hosts. Démarrez votre application à l&amp;rsquo;aide d&amp;rsquo;une simple commande dans votre terminal, et testez directement votre application !&lt;/p&gt;

&lt;h2 id=&#34;encore-mieux&#34;&gt;Encore mieux&lt;/h2&gt;

&lt;p&gt;De nombreux framework de développement PHP, dont Symfony ou encore Laravel facillitent encore plus l&amp;rsquo;utilisation de ce service. Pour l&amp;rsquo;exemple, si vous utilisez Symfony2 pour développer votre application, tapez directement dans votre terminal la commande suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php app/console server:run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La console vous affichera un message comme :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Server running on http://localhost:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ouvrez votre navigateur et rendez vous à l&amp;rsquo;adresse &lt;code&gt;http:/localhost:8000&lt;/code&gt; pour utiliser votre application. Note : la commande lance l&amp;rsquo;application dans l&amp;rsquo;environnement de développement, vous n&amp;rsquo;avez donc pas besoin de faire précéder toutes vos route par &lt;code&gt;app_dev.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pour finir un petit coup d&amp;rsquo;oeil sur les informations que nous fournit la commande suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php app/console server:run --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enfin, pour en savoir plus, rendez-vous directement sur la &lt;a href=&#34;http://symfony.com/doc/current/cookbook/web_server/built_in.html&#34; target=&#34;_blank&#34;&gt;documentation officelle de Symfony&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Et voilà, have fun :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>