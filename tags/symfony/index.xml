<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Symfony on Aubm</title>
    <link>http://www.aubm.net/tags/symfony/index.xml</link>
    <description>Recent content in Symfony on Aubm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <atom:link href="http://www.aubm.net/tags/symfony/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Contrainte d&#39;unicité dans Symfony 2 avec Doctrine</title>
      <link>http://www.aubm.net/blog/contrainte-dunicite-dans-symfony-2-avec-doctrine/</link>
      <pubDate>Sun, 22 Mar 2015 15:55:31 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/contrainte-dunicite-dans-symfony-2-avec-doctrine/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Le &lt;a href=&#34;http://symfony.com/doc/current/book/validation.html&#34; target=&#34;_blank&#34;&gt;composant de validation de Symfony&lt;/a&gt; embarque des contraintes pré-définies (outre la possibilité de créer des contraintes personnalisées évidemment). Par ailleurs, l&amp;rsquo;intégration de Doctrine dans le framework full-stack fournit une autre contrainte prête à l&amp;rsquo;emploi : &lt;code&gt;UniqueEntity&lt;/code&gt;, qui permet de valider l&amp;rsquo;unicité dans une table de la base de données d&amp;rsquo;un ou plusieurs champs d&amp;rsquo;une entité.&lt;/p&gt;

&lt;p&gt;Cette contrainte est référencée dans la &lt;a href=&#34;http://symfony.com/doc/current/reference/constraints/UniqueEntity.html&#34; target=&#34;_blank&#34;&gt;documentation officielle de Symfony&lt;/a&gt;. Cet article se propose d&amp;rsquo;apporter quelques exemples et explications en complément de cette documentation. J&amp;rsquo;ajoute qu&amp;rsquo;à l&amp;rsquo;heure où j&amp;rsquo;écris, la version en français de la documentation ne semble pas être à jour. Elle est en effet incomplète en comparaison avec la version anglaise qui recense un plus grand nombre d&amp;rsquo;options.&lt;/p&gt;

&lt;h2 id=&#34;contexte&#34;&gt;Contexte&lt;/h2&gt;

&lt;p&gt;Les extraits de code de cet article sont issus de l&amp;rsquo;application exemple &lt;a href=&#34;https://github.com/aubm/Doctrine-Unique-Entity-Example-App&#34; target=&#34;_blank&#34;&gt;dont le code est disponible sur Github&lt;/a&gt;. Il s&amp;rsquo;agit d&amp;rsquo;une application réalisée à l&amp;rsquo;aide de Symfony 2.6 Standard Edition. La procédure à suivre pour installer l&amp;rsquo;application en local (si jamais vous souhaitez tester) est la suivante :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installer les pré-requis nécessaires : Git, PHP &amp;gt; 5.3, Composer, MySQL (ou un autre système de base de données compatible).&lt;/li&gt;
&lt;li&gt;Cloner le repo &lt;code&gt;git clone https://github.com/aubm/Doctrine-Unique-Entity-Example-App.git&lt;/code&gt; et se déplacer dans le répertoire du projet &lt;code&gt;cd Doctrine-Unique-Entity-Example-App/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Installer les dépendances avec Composer &lt;code&gt;composer install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modifier au besoin le nom et les paramètres de connexion à la base de données dans &lt;code&gt;app/config/parameters.yml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Créer la base de données, vous pouvez le faire avec l&amp;rsquo;outil cli &lt;code&gt;php app/console doctrine:database:create&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Générer le schéma &lt;code&gt;php app/console doctrine:schema:update --dump-sql --force&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Servir l&amp;rsquo;app &lt;code&gt;php app/console server:run&lt;/code&gt; (CTLR + C pour arrêter).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cette application est un système fictif de votes. Il est possible de lui adresser une requête HTTP qui ajoutera une entrée dans la table des votes. Un vote peut être positif ou négatif, cet état est représenté par la colonne &lt;code&gt;positive&lt;/code&gt; supposée recevoir une valeur &lt;code&gt;1&lt;/code&gt; ou &lt;code&gt;0&lt;/code&gt;. Afin d&amp;rsquo;illustrer l&amp;rsquo;utilisation de la contrainte &lt;code&gt;UniqueEntity&lt;/code&gt;, nous souhaitons ajouter une règle d&amp;rsquo;unicité sur l&amp;rsquo;IP entrante, afin de ne permettre à un client de n&amp;rsquo;enregistrer qu&amp;rsquo;un seul vote.&lt;/p&gt;

&lt;p&gt;Si vous avez installé l&amp;rsquo;application, vous pouvez lui adresser cette requête :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /votes
positive=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A défaut d&amp;rsquo;autre chose, &lt;a href=&#34;https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt; est un outil très pratique pour construire des requêtes HTTP et les envoyer via une interface web.&lt;/p&gt;

&lt;h2 id=&#34;utiliser-la-contrainte-uniqueentity&#34;&gt;Utiliser la contrainte UniqueEntity&lt;/h2&gt;

&lt;p&gt;Ce code est extrait du contrôleur responsable de l&amp;rsquo;enregistrement des votes :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function createAction(Request $request)
{
    $votes_manager = $this-&amp;gt;container-&amp;gt;get(&#39;ab.voting_system.votes_manager&#39;);
    $vote = $votes_manager-&amp;gt;newEntity([
            &#39;remote_addr&#39; =&amp;gt; $request-&amp;gt;server-&amp;gt;get(&#39;REMOTE_ADDR&#39;)
        ] + $request-&amp;gt;request-&amp;gt;all());
    $validation_errors = $votes_manager-&amp;gt;validateEntity($vote);
    if (count($validation_errors) == 0) {
        $votes_manager-&amp;gt;saveEntity($vote);
        return new JsonResponse(null, 201);
    } else {
        return new JsonResponse(null, 400);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;entité &lt;code&gt;Vote&lt;/code&gt; est une simple classe contenant les attributs suivants :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Vote
{
    private $id;
    private $positive;
    private $remote_addr;

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le mapping des attributs pour Doctrine est défini dans &lt;a href=&#34;https://github.com/aubm/Doctrine-Unique-Entity-Example-App/blob/master/src/AB/VotingSystemBundle/Resources/config/doctrine/Vote.orm.yml&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;src/AB/VotingSystemBundle/Resources/config/doctrine/Vote.orm.yml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il est possible de réduire légèrement le contrôleur en passant par une classe de formulaire. Pour cette exemple, j&amp;rsquo;ai fait le choix de valider manuellement l&amp;rsquo;entité afin de faciliter la compréhension du code (notamment pour des lecteurs moins familiers avec le framework).
L&amp;rsquo;ajout de la contrainte d&amp;rsquo;unicité sur &lt;code&gt;remote_addr&lt;/code&gt; peut être fait en yaml comme ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# src/AB/VotingSystem/Resources/config/validation.yml
AB\VotingSystemBundle\Entity\Vote:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
            fields: remote_addr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A ce niveau le contrôleur n&amp;rsquo;autorisera pas l&amp;rsquo;enregistrement d&amp;rsquo;une nouvelle ligne si la valeur contenue dans &lt;code&gt;remote_addr&lt;/code&gt; existe déjà dans la table. A noter que si notre application est servie derrière un proxy, il se peut qu&amp;rsquo;elle ne se comporte pas comme nous le souhaitons. Auquel cas il serait judicieux d&amp;rsquo;enregistrer également la valeur de l&amp;rsquo;en-tête &lt;code&gt;HTTP_X_FORWARDED_FOR&lt;/code&gt; afin de s&amp;rsquo;assurer de l&amp;rsquo;unicité de la paire &lt;code&gt;remote_addr&lt;/code&gt; + &lt;code&gt;http_x_forwarded_for&lt;/code&gt; dans la table.&lt;/p&gt;

&lt;p&gt;Commençons par mettre à jour l&amp;rsquo;entité &lt;code&gt;Vote&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Vote
{
    ...
    private $http_x_forwarded_for;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis le fichier de configuration des contraintes de validation :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# src/AB/VotingSystem/Resources/config/validation.yml
AB\VotingSystemBundle\Entity\Vote:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
            fields: [remote_addr, http_x_forwarded_for]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fields&lt;/code&gt; prend maintenant un tableau de champs à vérifier. Il faut préciser que Symfony s&amp;rsquo;assurera de l&amp;rsquo;unicité &lt;em&gt;du groupe de champs&lt;/em&gt; et non des deux champs de manière isolée.&lt;/p&gt;

&lt;h2 id=&#34;contrainte-uniqueentity-et-champ-nullable&#34;&gt;Contrainte UniqueEntity et champ nullable&lt;/h2&gt;

&lt;p&gt;Un comportement par défaut de la contrainte &lt;code&gt;UniqueEntity&lt;/code&gt; dont il faut être conscient est que celle-ci n&amp;rsquo;enregistrera aucune erreur si un ou plusieurs champs ont une valeur nulle (autrement dit, la contrainte sera ignorée). Dans l&amp;rsquo;état, il est donc possible dans la table en base de données d&amp;rsquo;avoir ces valeurs enregistrées :&lt;/p&gt;

&lt;table class=&#34;table table-condensed&#34;&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;positive&lt;/th&gt;
        &lt;th&gt;remote_addr&lt;/th&gt;
        &lt;th&gt;http_x_forwarded_for&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;0&lt;/td&gt;
        &lt;td&gt;80.13.81.94&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td class=&#34;text-danger&#34;&gt;213.80.109.42&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td class=&#34;text-danger&#34;&gt;213.80.109.42&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td class=&#34;text-danger&#34;&gt;213.80.109.42&lt;/td&gt;
        &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Dans le cas de cette application, ce comportement n&amp;rsquo;est pas celui attendu. Il est donc nécessaire de définir une autre valeur pour l&amp;rsquo;option &lt;code&gt;ignoreNull&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# src/AB/VotingSystem/Resources/config/validation.yml
AB\VotingSystemBundle\Entity\Vote:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
            fields: [remote_addr, http_x_forwarded_for]
            ignoreNull: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette fois tout devrait être bon :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>La pagination avec Doctrine : la bonne méthode</title>
      <link>http://www.aubm.net/blog/la-pagination-avec-doctrine-la-bonne-methode/</link>
      <pubDate>Mon, 06 Oct 2014 19:45:13 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/la-pagination-avec-doctrine-la-bonne-methode/</guid>
      <description>

&lt;p&gt;Cet article a pour but de venir compléter la documentation de Doctrine, et plus particulièrement &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/tutorials/pagination.html&#34; target=&#34;_blank&#34;&gt;la section abordant la pagination&lt;/a&gt;, en y apportant quelques précisions, et surtout quelques exemples. En espérant que d&amp;rsquo;autres y trouveront une utilité, ayant moi-même déjà été confronté à quelques petites incompréhensions quant à l&amp;rsquo;utilisation du &lt;a href=&#34;http://www.doctrine-project.org/api/orm/2.4/class-Doctrine.ORM.Tools.Pagination.Paginator.html&#34; target=&#34;_blank&#34;&gt;Paginator de Doctrine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Les exemples de code sont extraits d&amp;rsquo;une application blog exemple réalisée à l&amp;rsquo;aide du framework Symfony 2. Cette application comporte une entité Post.&lt;/p&gt;

&lt;h2 id=&#34;pagination-simple&#34;&gt;Pagination simple&lt;/h2&gt;

&lt;p&gt;Le but est d&amp;rsquo;afficher un maximum de 20 posts par page, ainsi que le nombre total de posts. Doctrine nous propose d&amp;rsquo;utiliser la classe &lt;code&gt;Doctrine\ORM\Tools\Pagination\Paginator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Voici comment utiliser cette classe :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class PostRepository extends EntityRepository
{
    public function getPosts($first_result, $max_results = 20)
    {
        $qb = $this-&amp;gt;createQueryBuilder(&#39;post&#39;);
        $qb
            -&amp;gt;select(&#39;post&#39;)
            -&amp;gt;setFirstResult($first_result)
            -&amp;gt;setMaxResults($max_results);

        $pag = new Paginator($qb);
        return $pag;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le constructeur prend en premier paramètre une instance de &lt;code&gt;Doctrine\ORM\Query&lt;/code&gt; ou de &lt;code&gt;Doctrine\ORM\QueryBuilder&lt;/code&gt;. Paginator implémente les interfaces Countable et IteratorAggregate, si bien qu&amp;rsquo;obtenir le total d&amp;rsquo;enregistrements en base de données est aussi simple que ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;count($pag);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lister les 20 premiers posts peut se faire de la façon suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$posts = $post_repository-&amp;gt;getPosts(0);
foreach ($posts as $post) {
    echo $post-&amp;gt;getTitle() . &#39;&amp;amp;lt;br /&amp;amp;gt;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En bonus : le code du template (twig) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% block body %}
    &amp;lt;ul&amp;gt;
        {% for post in posts %}
            &amp;lt;li&amp;gt;{{ post.title }}&amp;lt;/li&amp;gt;
        {% endfor %}
    &amp;lt;/ul&amp;gt;
    &amp;lt;p&amp;gt;Total : {{ posts.count }}&amp;lt;/p&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pagination-avec-jointure-one-to-many-ou-many-to-many&#34;&gt;Pagination avec jointure one-to-many ou many-to-many&lt;/h2&gt;

&lt;p&gt;Dans certains cas, Doctrine peut utiliser le langage natif du moteur de base de données pour limiter le nombre de résultats et obtenir le total d&amp;rsquo;enregistrements. Dans d&amp;rsquo;autres cas, il n&amp;rsquo;est pas possible de procéder ainsi, et notamment lorsque la requête contient des jointures sur des tables comportant des relations one-to-many ou many-to-many.&lt;/p&gt;

&lt;p&gt;Dans ces cas de figure, Doctrine va procéder différemment. Cette procédure, tout à fait transparente, est expliquée &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/tutorials/pagination.html&#34; target=&#34;_blank&#34;&gt;dans la documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ajoutons une nouvelle entité Tag qui pourra appartenir à plusieurs Post.&lt;/p&gt;

&lt;p&gt;La méthode de la classe repository ressemble maintenant à ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function getPosts($first_result, $max_results = 20)
{
    $qb = $this-&amp;gt;createQueryBuilder(&#39;post&#39;);
    $qb
        -&amp;gt;select(&#39;post&#39;)
        -&amp;gt;addSelect(&#39;tag&#39;)
        -&amp;gt;leftJoin(&#39;post.tags&#39;, &#39;tag&#39;)
        -&amp;gt;setFirstResult($first_result)
        -&amp;gt;setMaxResults($max_results);

    $pag = new Paginator($qb);
    return $pag;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et le template mis à jour :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% block body %}
    &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;Post&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Tags&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
        {% for post in posts %}
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;{{ post.title }}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    {% for tag in post.tags %}
                        {{ tag.name }}
                    {% endfor %}
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        {% endfor %}
        &amp;lt;/tbody&amp;gt;
        &amp;lt;tfooter&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;Total : {{ posts|length }}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tfooter&amp;gt;
    &amp;lt;/table&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La raison d&amp;rsquo;être de cet article est en réalité le point que je vais aborder maintenant. Il s&amp;rsquo;agit d&amp;rsquo;un piège dans lequel je suis tombé lors de mes premiers essais avec la classe Paginator.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;objet Paginator permet d&amp;rsquo;accéder à notre objet Query passé en paramètre du constructeur. Si bien que l&amp;rsquo;on peut être tenté de l&amp;rsquo;exploiter directement dans notre template, boycottant ainsi l&amp;rsquo;utilisation du Paginator. Considérez le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$pag = $post_repository-&amp;gt;getPosts(0);
$posts = $pag-&amp;gt;getQuery()-&amp;gt;getResult();
foreach ($posts as $post) {
    echo $post-&amp;gt;getTitle() . &#39;&amp;lt;br /&amp;gt;&#39;;
}
echo &#39;Total : &#39; . $pag-&amp;gt;count();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si la requête ne comporte pas de jointure, le résultat affiché sera le même. Les suprises arriveront lorsque la requête comportera des jointures. Des anomalies pourraient se produire en raison du fait que l&amp;rsquo;hydratation d&amp;rsquo;un objet pourrait nécessiter la lecture de plusieurs lignes.&lt;/p&gt;

&lt;p&gt;Un bon moyen d&amp;rsquo;obtenir le tableau des 20 premiers Post est le suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$posts = $pag-&amp;gt;getIterator()-&amp;gt;getArrayCopy();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merci pour la lecture et n&amp;rsquo;hésitez pas à partager :)&lt;/p&gt;

&lt;p&gt;Code de l&amp;rsquo;application exemple : &lt;a href=&#34;https://github.com/aubm/tuto-doctrine-pagination&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/aubm/tuto-doctrine-pagination&#34;&gt;https://github.com/aubm/tuto-doctrine-pagination&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aurélien.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webservice Restful avec Symfony2 : gérer les champs de type Datetime</title>
      <link>http://www.aubm.net/blog/webservice-restful-avec-symfony2-gerer-les-champs-de-type-datetime/</link>
      <pubDate>Thu, 03 Jul 2014 19:24:23 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/webservice-restful-avec-symfony2-gerer-les-champs-de-type-datetime/</guid>
      <description>&lt;p&gt;Si vous choisissez Symfony pour construire une application de webservice, il est un détail à relever à propos des champs de type Datetime dans le cas d&amp;rsquo;utilisation des objets formulaires.&lt;/p&gt;

&lt;p&gt;Prenons par exemple ce code qui génère un formulaire à partir des champs d&amp;rsquo;une entité Post fictive :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$builder
    -&amp;gt;add(&#39;title&#39;)
    -&amp;gt;add(&#39;content&#39;)
    -&amp;gt;add(&#39;published&#39;)
     ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans cet exemple, le champ published est de type Datetime. Si on utilise ce formulaire pour générer du code HTML, Symfony générera pour le champ published le code suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;label class=&amp;quot;required&amp;quot;&amp;gt;Published&amp;lt;/label&amp;gt;
    &amp;lt;div id=&amp;quot;acme_demobundle_post_published&amp;quot;&amp;gt;
        &amp;lt;div id=&amp;quot;acme_demobundle_post_published_date&amp;quot;&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_date_year&amp;quot; name=&amp;quot;acme_demobundle_post[published][date][year]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;2009&amp;quot;&amp;gt;2009&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2010&amp;quot;&amp;gt;2010&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_date_month&amp;quot; name=&amp;quot;acme_demobundle_post[published][date][month]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;Jan&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;Feb&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_date_day&amp;quot; name=&amp;quot;acme_demobundle_post[published][date][day]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;1&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;2&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&amp;quot;acme_demobundle_post_published_time&amp;quot;&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_time_hour&amp;quot; name=&amp;quot;acme_demobundle_post[published][time][hour]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;0&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;02&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
            &amp;lt;select id=&amp;quot;acme_demobundle_post_published_time_minute&amp;quot; name=&amp;quot;acme_demobundle_post[published][time][minute]&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;0&amp;quot;&amp;gt;00&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;01&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;02&amp;lt;/option&amp;gt;
                ...
            &amp;lt;/select&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A noter que la valeur du champs est construite dans un tableau rassemblant les différents informations year, month, day, etc &amp;hellip;&lt;/p&gt;

&lt;p&gt;Si on utilise ce formulaire pour mettre à jour les informations d&amp;rsquo;un objet Post via une route &lt;code&gt;PUT /posts/{postId}&lt;/code&gt; par exemple, le client devra construire la valeur de l&amp;rsquo;attribut published de la même façon que dans ce formulaire. Soit quelque chose comme ça :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;published[date][year] = 2000
published[date][month] = 12
published[date][day] = 15
published[time][hour] = 12
published[time][minute] = 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voilà qui pourrait convenir, cependant pour une question de simplicité pour le client, nous souhaitons que celui-ci nous envoie l&amp;rsquo;information published de cette façon :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;published = 2000-12-15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour ce faire, la solution est très simple, il suffit de changer la valeur par défaut de certaines options de l&amp;rsquo;entrée published de la classe du formulaire.&lt;/p&gt;

&lt;p&gt;Voici le code du formulaire, modifié de façon à ce qu&amp;rsquo;il se comporte comme nous le souhaitons :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$builder
    -&amp;gt;add(&#39;title&#39;)
    -&amp;gt;add(&#39;content&#39;)
    -&amp;gt;add(&#39;published&#39;, null, array(
        &amp;quot;widget&amp;quot; =&amp;gt; &amp;quot;single_text&amp;quot;,
        &amp;quot;format&amp;quot; =&amp;gt; &amp;quot;yyyy-MM-dd&amp;quot;,
     ))
     ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons défini deux options. L&amp;rsquo;option widget est définie à single_text de manière à ce que le formulaire attende la valeur du champ dans une seule variable. L&amp;rsquo;option format quant à elle permet de définir le format qui est attendu pour la date.&lt;/p&gt;

&lt;p&gt;N&amp;rsquo;hésitez pas à consulter la &lt;a href=&#34;http://symfony.com/fr/doc/current/reference/forms/types/date.html&#34; target=&#34;_blank&#34;&gt;documentation de Symfony&lt;/a&gt; pour en savoir plus sur ces options ainsi que sur les autres options disponibles pour le type champ Date.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Utiliser les Event Subscriber avec FosRestBundle et JMSSerializerBundle</title>
      <link>http://www.aubm.net/blog/utiliser-les-event-subscriber-avec-fosrestbundle-et-jmsserializerbundle/</link>
      <pubDate>Tue, 20 May 2014 20:26:49 +0100</pubDate>
      
      <guid>http://www.aubm.net/blog/utiliser-les-event-subscriber-avec-fosrestbundle-et-jmsserializerbundle/</guid>
      <description>

&lt;h2 id=&#34;présentation-de-la-problèmatique&#34;&gt;Présentation de la problèmatique&lt;/h2&gt;

&lt;p&gt;J&amp;rsquo;écris cet article car j&amp;rsquo;ai été confronté à une problématique lors d&amp;rsquo;un projet que j&amp;rsquo;ai réalisé il y a peu. Le projet impliquait la création d&amp;rsquo;un webservice au standard Rest dans une application Symfony2. J&amp;rsquo;ai fait le choix d&amp;rsquo;utiliser FosRestBundle et JMSSerializerBundle. Pour en apprendre plus sur l&amp;rsquo;utilisation de ces bundles, je vous invite à consulter &lt;a href=&#34;http://obtao.com/blog/2013/12/creer-une-api-rest-dans-une-application-symfony/&#34; target=&#34;_blank&#34;&gt;cet article&lt;/a&gt; du blog de obtao.com. Le problème auquel j&amp;rsquo;ai été confronté était le suivant.&lt;/p&gt;

&lt;p&gt;Une méthode du webservice devait retourner une collection d&amp;rsquo;objets de la classe File suivante (j&amp;rsquo;épure volontairement le code) :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class File
{
    private $id;
    private $originalClientName;
    private $filename;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le nom du fichier original qui a été uploadé est conservé dans l&amp;rsquo;attribut $originalClientName. Potentiellement, cet attribut contient des valeurs comme &amp;ldquo;chat.jpg&amp;rdquo; ou &amp;ldquo;photos.zip&amp;rdquo; L&amp;rsquo;attribut $filename quant à lui contient le nom du fichier tel qu&amp;rsquo;il est stocké sur le serveur, il s&amp;rsquo;agit d&amp;rsquo;une chaîne de caractères aléatoire générée lors de l&amp;rsquo;enregistrement de l&amp;rsquo;entité dans la base de données.&lt;/p&gt;

&lt;p&gt;La représentation json retournée par le webservice pour chaque entité File devait être de la forme suivante.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;id&amp;quot; : 34,
    &amp;quot;originalClientName&amp;quot; : &amp;quot;chat.jpg&amp;quot;,
    &amp;quot;downloadUrl&amp;quot; : &amp;quot;http://mon-serveur.com/download/z3r4gez775gd2dczzdf261gr0y66e&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comme on peut le voir, l&amp;rsquo;attribut $filename (supposé contenir la string &lt;code&gt;&amp;quot;z3r4gez775gd2dczzdf261gr0y66e&amp;quot;&lt;/code&gt; dans cet exemple), n&amp;rsquo;est pas directement retourné dans le flux. Il s&amp;rsquo;agit en fait d&amp;rsquo;une uri facilement exploitable pour le client, pointant directement vers la  resource. Ayant parcouru la document du JMSSerializerBundle j&amp;rsquo;ai pensé à utiliser l&amp;rsquo;annotion &lt;code&gt;@VirtualProperty&lt;/code&gt; sur une méthode de mon entité File qui ressemblerait à ceci.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class File
{
    private $id;
    private $originalClientName;
    private $filename;

    /**
    * @VirtualProperty
    */
    public function getDownloadUrl()
    {
        return &amp;quot;http://mon-serveur.com/download/&amp;quot; . $this-&amp;gt;filename;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je n&amp;rsquo;aimais qu&amp;rsquo;à moitié cette solution car elle m&amp;rsquo;imposait d&amp;rsquo;écrire mon uri &amp;ldquo;en dur&amp;rdquo; dans le code source de mon entité. Cela pouvait poser problème si pendant le développement je voulais changer de hostname et tout simplement passer d&amp;rsquo;un environnement à un autre (dev -&amp;gt; prod ou l&amp;rsquo;inverse).&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;ai donc voulu utiliser le service &amp;ldquo;router&amp;rdquo; de Symfony pour générer l&amp;rsquo;uri dynamiquement. Sauf que manque de chance, utiliser un service dans une entité, ce n&amp;rsquo;est pas si simple à faire. Et ce pour la bonne raison que c&amp;rsquo;est une mauvaise pratique, l&amp;rsquo;entité devant pouvoir exister de façon indépendante à tout service externe.&lt;/p&gt;

&lt;p&gt;Epluchant les documentations et les forums, je ne trouvais pas de solution simple ou suffisamment &amp;ldquo;good practice&amp;rdquo; à mon goût pour régler le problème. J&amp;rsquo;avais d&amp;rsquo;abord réfléchi à une solution qui me permettrait d&amp;rsquo;injecter un service dans une classe abtraite, ce qui me permettrait d&amp;rsquo;appeler une méthode statique sur cette classe. Mais ça me paraissait bien compliqué à réaliser, voire même tout simplement impossible.&lt;/p&gt;

&lt;p&gt;Je suis finalement tombé sur un forum, dans lequel une personne rencontrant une problématique semblable à la mienne se voyait soumettre un début de solution qui a pu m&amp;rsquo;aider à me dépatouiller.&lt;/p&gt;

&lt;h2 id=&#34;ma-solution&#34;&gt;Ma solution&lt;/h2&gt;

&lt;p&gt;La solution que j&amp;rsquo;ai choisie pour répondre à cette problématique consistait à utiliser la &lt;a href=&#34;http://jmsyst.com/libs/serializer/master/event_system&#34; target=&#34;_blank&#34;&gt;gestion des évènements du serializer&lt;/a&gt;. Concrétement, voici comment j&amp;rsquo;ai exploité cette fonctionnalité dans mon webservice. Dans la configuration de mes services (au niveau de mon WebServiceBundle), j&amp;rsquo;ai ajouté le service défini de la façon suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parameters:
    aubm_web_service.serialize_handler_file.class: Aubm\WebServiceBundle\SerializeEventHandler\FileHandler
services:
    aubm_web_service.serialize_handler_file:
    class: %aubm_web_service.serialize_handler_file.class%
    tags:
        - { name: jms_serializer.event_subscriber }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;astuce ici est d&amp;rsquo;ajouter le tag &lt;code&gt;jms_serializer.event_subscriber&lt;/code&gt; au service. Si vous n&amp;rsquo;avez jamais travaillé avec les services taggés, n&amp;rsquo;hésitez pas à parcourir rapidement la &lt;a href=&#34;http://symfony.com/fr/doc/current/components/dependency_injection/tags.html&#34; target=&#34;_blank&#34;&gt;documentation officielle du framework&lt;/a&gt; afin de mieux comprendre leur utilité. Le tag &lt;code&gt;jms_serializer.event_subscriber&lt;/code&gt; va indiquer au serializer qu&amp;rsquo;il doit effectuer un certains nombre d&amp;rsquo;actions sur ce service lors de certaines étapes de la serialisation des objets. Le &amp;ldquo;quoi effectuer&amp;rdquo; et &amp;ldquo;quand l&amp;rsquo;effectuer&amp;rdquo; sont définis dans le service lui même. Ce service doit implémenter l&amp;rsquo;interface &lt;code&gt;\JMS\Serializer\EventDispatcher\EventSubscriberInterface&lt;/code&gt; et doit donc implémenter la méthode statique &lt;code&gt;getSubscribedEvents&lt;/code&gt;. Voici le code de la classe du service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class FileHandler implements EventSubscriberInterface
{
    /**
    * {@inheritdoc}
    */
    public static function getSubscribedEvents()
    {
        return array(
            array(&#39;event&#39; =&amp;gt; &#39;serializer.pre_serialize&#39;, &#39;method&#39; =&amp;gt; &#39;onPreSerialize&#39;, &#39;class&#39; =&amp;gt; &#39;Aubm\WebServiceBundle\Entity\File&#39;),
        );
    }

    public function onPreSerialize(PreSerializeEvent $event)
    {
        $file = $event-&amp;gt;getObject();
        // effectuer des manipulation sur l&#39;objet avant sa serialisation ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans la méthode onPreSerialize, je peux manipuler mon entité File comme je souhaite avant sa sérialisation. Par ailleurs, ma classe FileHandler est définie en tant que service dans ma configuration, je peux donc y injecter toutes les dépendances dont j&amp;rsquo;ai besoin. Pour la suite, le code parle de lui-même &amp;hellip;&lt;/p&gt;

&lt;p&gt;Dans mon entité File &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class File
{
    ...

    private $downloadUrl;

    public function setDownloadUrl($downloadUrl)
    {
        $this-&amp;gt;downloadUrl = $downloadUrl;
    }

    public function getDownloadUrl()
    {
        return $this-&amp;gt;downloadUrl;
    }

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans mon services.yml &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parameters:
    aubm_web_service.serialize_handler_file.class: Aubm\WebServiceBundle\SerializeEventHandler\FileHandler
services:
    aubm_web_service.serialize_handler_file:
    class: %aubm_web_service.serialize_handler_file.class%
    arguments:
        router: &amp;quot;@router&amp;quot;
    tags:
        - { name: jms_serializer.event_subscriber }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enfin, dans ma classe de service FileHandler &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function onPreSerialize(PreSerializeEvent $event)
{
    $file = $event-&amp;gt;getObject();
    $file-&amp;gt;setDownloadUrl(
        $this-&amp;gt;router-&amp;gt;generate(&amp;quot;aubm_download_file&amp;quot;, array(
            &amp;quot;filename&amp;quot; =&amp;gt; $file-&amp;gt;getFilename()
        ));
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En espérant que cet article pourra aider des personnes à la recherche d&amp;rsquo;une solution pour un problème similaire, merci de m&amp;rsquo;avoir lu et n&amp;rsquo;hésitez pas à backlinker :)&lt;/p&gt;

&lt;p&gt;Aurélien.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>